{"version":3,"sources":["webpack:///app.bundle.js","webpack:///./src/main.ts","webpack:///./src/app/modules/app.module.ts","webpack:///./src/app/app-main/app-main.component.ts","webpack:///./src/app/services/GlobalService.ts","webpack:///./src/app/services/JobService.ts","webpack:///./src/app/app-main/app-main.component.html","webpack:///./src/app/app-routes/app.routes.ts","webpack:///./src/app/home/home.component.ts","webpack:///./src/app/home/home.component.html","webpack:///./src/static/images/logo.png","webpack:///./src/app/home/home.component.css","webpack:///./src/app/job-list/job-list.component.ts","webpack:///./src/app/job-list/job-list.component.html","webpack:///./src/app/job-list/job-list.component.css","webpack:///./src/app/project-list/project-list.component.ts","webpack:///./src/app/services/ProjectService.ts","webpack:///./src/app/project-list/project-list.component.html","webpack:///./src/app/not-found/not-found.component.ts","webpack:///./src/app/not-found/not-found.component.html","webpack:///./src/app/project-view/project-view.component.ts","webpack:///./src/app/services/TaskService.ts","webpack:///./src/app/project-view/project-view.component.html","webpack:///./src/app/task-view/task-view.component.ts","webpack:///./src/app/domain/OutputGroup.ts","webpack:///./src/app/domain/Utils.ts","webpack:///./src/app/task-view/task-view.component.html","webpack:///./src/app/app-header/app-header.component.ts","webpack:///./src/app/app-header/app-header.component.html","webpack:///./src/static/images/logo-header.png","webpack:///./src/app/app-header/app-header.component.css","webpack:///./src/app/app-footer/app-footer.component.ts","webpack:///./src/app/app-footer/app-footer.component.html","webpack:///./src/app/app-footer/app-footer.component.css","webpack:///./~/@angular/forms/bundles/forms.umd.js","webpack:///./src/app/pipes/timestampFormat.ts","webpack:///./~/ng2-charts/ng2-charts.js","webpack:///./~/ng2-charts/components/charts/charts.js","webpack:///./src/app/task-options/task-options.component.ts","webpack:///./src/app/domain/TaskOption.ts","webpack:///./src/app/task-options/task-options.component.html"],"names":["webpackJsonp","0","module","exports","__webpack_require__","1","platform_browser_dynamic_1","app_module_1","core_1","enableProdMode","platformBrowserDynamic","bootstrapModule","AppModule","25","toastr","__decorate","this","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","platform_browser_1","app_main_component_1","app_routes_1","GlobalService_1","JobService_1","router_1","home_component_1","app_header_component_1","app_footer_component_1","job_list_component_1","project_list_component_1","project_view_component_1","not_found_component_1","forms_1","http_1","TaskService_1","ProjectService_1","task_view_component_1","timestampFormat_1","ng2_charts_1","task_options_component_1","options","timeOut","progressBar","hideDuration","positionClass","NgModule","declarations","AppMainComponent","HomeComponent","AppHeaderComponent","AppFooterComponent","JobListComponent","ProjectListComponent","ProjectViewComponent","NotFoundComponent","TaskViewComponent","TaskOptionsComponent","TimestampFormat","CHART_DIRECTIVES","imports","routing","BrowserModule","FormsModule","ReactiveFormsModule","HttpModule","RouterModule","bootstrap","providers","GlobalService","JobService","TaskService","ProjectService","call","29","Rx_1","globalService","jobService","prototype","ngOnInit","_this","jobsCountTimer","Observable","timer","subscribe","setJobCount","getRunningList","then","res","jobsCount","data","count","jobList","jobs","emitJobsCount","emitJobList","Component","selector","template","30","jobsCountEmitter","EventEmitter","jobListEmitter","loadingDelayTime","emit","Injectable","31","http","get","toPromise","response","json","handleError","last","projectId","taskId","error","Promise","reject","message","Http","357","358","appRoutes","path","redirectTo","pathMatch","component","forRoot","360","styles","361","362","p","363","364","router","chartDataLabels","chartDataOptions","chartDataColors","hideAll","showLoading","value","showError","showEmptyData","showData","chartLabels","chartColors","chartDataset","chartOptions","animation","chartDataForOnQueue","chartDataForRunning","chartDataForError","chartDataForSuccess","jobIndex","job","jobStatus","push","chartData","type","animateScale","animateRotate","labels","datasets","backgroundColor","hoverBackgroundColor","graphOptions","chartDataDatasets","view","navigate","back","Router","365","366","367","projectService","load","empty","delay","getData","list","success","showList","showEmptyList","onError","368","369","370","371","372","taskService","route","params","project","showTaskOptionsForm","showTaskOptions","projectName","taskName","taskDescription","runProjectId","runProjectName","runTaskId","runTaskName","runTaskDescription","runTaskOptions","taskRunWithSuccess","$event","taskRunWithError","taskRunCancel","ActivatedRoute","373","run","headers","Headers","Content-Type","post","374","375","OutputGroup_1","Utils_1","lastJobTimer","getLastJobData","task","hideAllForLastJob","showLastJobData","showLastJobEmptyData","showLastJobLoading","showLastJobError","onErrorForLastJob","lastJob","lastJobId","outputGroupList","newOutputGroupList","outputGroup","activeTabId","newOutputGroupKey","newOutputGroup","hasOutputGroup","outputGroupKey","name","updatedAt","output","OutputGroup","id","Utils","slugify","active","376","377","formValuesEncoded","formValues","formData","formKey","formValue","text","toString","toLowerCase","replace","378","379","380","381","382","383","384","385","386","global","factory","_angular_core","rxjs_operator_toPromise","rxjs_Subject","rxjs_Observable","rxjs_observable_fromPromise","isPresent","obj","undefined","isBlank","isString","isFunction","isStringMap","isPromise","isArray","Array","looseIdentical","a","b","isNaN","normalizeBool","isJsObject","o","isPrimitive","hasConstructor","constructor","_flattenArray","source","item","_convertToPromise","_executeValidators","control","validators","map","_executeAsyncValidators","_mergeErrors","arrayOfErrors","reduce","errors","StringMapWrapper","merge","isEmpty","normalizeValidator","validator","validate","normalizeAsyncValidator","unimplemented","Error","_buildValueString","StringWrapper","slice","_extractId","valueString","split","_buildValueString$1","_extractId$1","controlPath","parent","ListWrapper","clone","setUpControl","dir","_throwError","valueAccessor","Validators","compose","asyncValidator","composeAsync","writeValue","registerOnChange","newValue","viewToModelUpdate","markAsDirty","setValue","emitModelToViewChange","registerOnTouched","markAsTouched","emitModelEvent","setDisabledState","registerOnDisabledChange","isDisabled","_rawValidators","forEach","updateValueAndValidity","_rawAsyncValidators","cleanUpControl","_noControlError","_clearChangeFns","setUpFormContainer","messageEnd","join","composeValidators","composeAsyncValidators","isPropertyUpdated","changes","viewModel","contains","change","isFirstChange","currentValue","isBuiltInAccessor","CheckboxControlValueAccessor","NumberValueAccessor","SelectControlValueAccessor","SelectMultipleControlValueAccessor","RadioControlValueAccessor","selectValueAccessor","valueAccessors","defaultAccessor","builtinAccessor","customAccessor","DefaultValueAccessor","_find","delimiter","FormGroup","controls","FormArray","index","at","toObservable","fromPromise","coerceToValidator","coerceToAsyncValidator","_hasInvalidParent","FormGroupName","FormGroupDirective","FormArrayName","globalScope","window","WorkerGlobalScope","self","global$1","assert","condition","fromCharCode","code","String","charCodeAt","s","regExp","equals","s2","stripLeft","charVal","pos","substring","stripRight","from","replaceAll","to","replaceAllMapped","cb","matches","_i","splice","substr","indexOf","compare","NumberWrapper","toFixed","n","fractionDigits","equal","parseIntAutoRadix","result","parseInt","radix","test","parseFloat","NaN","enumerable","configurable","isNumeric","isInteger","Number","AbstractControlDirective","valid","invalid","pending","pristine","dirty","touched","untouched","disabled","enabled","statusChanges","valueChanges","reset","__extends$1","__extends","__","hasOwnProperty","create","ControlContainer","_super","apply","Map$1","Map","Set","createMapFromPairs","size","pairs","e","pair","set","createMapFromMap","m","_clearValues","keys","next","keyIterator","_arrayFromMap","values","getValues","createFixedSize","MapWrapper","createFromStringMap","stringMap","prop","toStringMap","createFromPairs","clearValues","iterable","callback","_a","m1","m2","_b","_c","k1","k2","createGrowableSize","array","forEachWithIndex","fn","first","startIndex","el","reversed","reverse","concat","insert","removeAt","removeAll","items","remove","clear","fill","start","end","l","sort","compareFn","toJSON","JSON","stringify","maximum","predicate","solution","maxValue","Infinity","candidate","candidateValue","flatten","addAll","NG_VALIDATORS","lst","add","OpaqueToken","NG_ASYNC_VALIDATORS","required","minLength","minlength","requiredLength","actualLength","maxLength","maxlength","pattern","regex","RegExp","requiredPattern","actualValue","nullValidator","presentValidators","filter","promises","all","NG_VALUE_ACCESSOR","CHECKBOX_VALUE_ACCESSOR","provide","useExisting","forwardRef","multi","_renderer","_elementRef","onChange","_","onTouched","setElementProperty","nativeElement","Directive","args","host","(change)","(blur)","ctorParameters","Renderer","ElementRef","DEFAULT_VALUE_ACCESSOR","normalizedValue","(input)","NUMBER_VALUE_ACCESSOR","__extends$2","NgControl","_parent","RADIO_VALUE_ACCESSOR","RadioControlRegistry","_accessors","accessor","indexToRemove","select","_isSameGroup","fireUncheck","controlPair","_control","_registry","_injector","_checkName","ngOnDestroy","_state","_fn","formControlName","_throwNameError","Injector","propDecorators","Input","SELECT_VALUE_ACCESSOR","_optionMap","_idCounter","_getOptionId","_getOptionValue","_registerOption","NgSelectOption","_element","_select","_setElementValue","Optional","Host","ngValue","SELECT_MULTIPLE_VALUE_ACCESSOR","ids","opt","_setSelected","selected","selectedOptions","val","_value","NgSelectMultipleOption","AbstractFormGroupDirective","_checkParentType","formDirective","addFormGroup","removeFormGroup","getFormGroup","_validators","_asyncValidators","__extends$3","AbstractControlStatus","cd","_cd","ngControlStatusHost","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","NgControlStatus","Self","NgControlStatusGroup","__extends$5","isAsync","__isAsync","generatorOrNext","complete","schedulerFn","errorFn","err","completeFn","setTimeout","Subject","__extends$6","VALID","INVALID","PENDING","DISABLED","AbstractControl","_pristine","_touched","_status","_errors","_valueChanges","_statusChanges","setAsyncValidators","newValidator","clearAsyncValidators","setValidators","clearValidators","onlySelf","markAsPristine","_forEachChild","_updatePristine","markAsUntouched","_updateTouched","markAsPending","disable","emitEvent","_updateValue","_updateAncestors","_onDisabledChange","enable","setParent","_runValidator","originalStatus","_calculateStatus","_runAsyncValidator","_disabledChanged","_updateTreeValidity","ctrl","_cancelExistingSubscription","obs","_asyncValidationSubscription","setErrors","unsubscribe","_updateControlsErrors","getError","errorCode","hasError","x","_initObservables","_anyControlsHaveStatus","_allControlsDisabled","status","_anyControls","_anyControlsDirty","_anyControlsTouched","_isBoxedValue","formState","FormControl","_onChange","_applyFormState","emitViewToModelChange","changeFn","patchValue","_setParentForControls","registerControl","addControl","removeControl","controlName","_checkAllValuesPresent","_throwIfControlMissing","getRawValue","_reduceChildren","acc","_reduceValue","initValue","some","__extends$4","formDirectiveProvider","NgForm","resolvedPromise","resolve","asyncValidators","_submitted","ngSubmit","form","container","_findContainer","getControl","group","updateModel","onSubmit","onReset","resetForm","pop","(submit)","(reset)","outputs","exportAs","Inject","Examples","formGroupName","formArrayName","ngModelGroup","ngModelWithFormGroup","TemplateDrivenErrors","modelParentException","formGroupNameException","missingNameException","modelGroupParentException","__extends$8","modelGroupProvider","NgModelGroup","SkipSelf","__extends$7","formControlBinding","NgModel","resolvedPromise$1","_registered","update","ngOnChanges","_checkForErrors","_setUpControl","_updateDisabled","model","_isStandalone","_setUpStandalone","standalone","disabledValue","Output","ReactiveErrors","controlParentException","ngModelGroupException","missingFormException","groupParentException","arrayParentException","disabledAttrWarning","console","warn","__extends$9","formControlBinding$1","FormControlDirective","_isControlChanged","__extends$11","formDirectiveProvider$1","directives","_checkFormPresent","sync","async","_updateDomValue","addFormArray","removeFormArray","getFormArray","oldForm","previousValue","newCtrl","oldCtrl","__extends$12","formGroupNameProvider","formArrayNameProvider","__extends$10","controlNameBinding","FormControlName","_added","REQUIRED_VALIDATOR","RequiredValidator","_required","[attr.required]","MIN_LENGTH_VALIDATOR","MinLengthValidator","_createValidator","_validator","[attr.minlength]","MAX_LENGTH_VALIDATOR","MaxLengthValidator","[attr.maxlength]","PATTERN_VALIDATOR","PatternValidator","[attr.pattern]","FormBuilder","controlsConfig","extra","_reduceControls","_createControl","controlConfig","SHARED_FORM_DIRECTIVES","TEMPLATE_DRIVEN_DIRECTIVES","REACTIVE_DRIVEN_DIRECTIVES","InternalFormsSharedModule","387","transform","date","Date","formatted","strPad","getMonth","getDate","getFullYear","getHours","getMinutes","getSeconds","pad","str","padLeft","Pipe","388","__export","charts_1","389","rgba","colour","alpha","getRandomInt","min","max","Math","floor","random","formatLineColor","colors","borderColor","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","formatBarColor","hoverBorderColor","formatPieColors","color","formatPolarAreaColors","getRandomColor","generateColor","BaseChartComponent","defaultColors","generateColors","colorsArr","getColors","chartType","common_1","element","responsive","chartClick","chartHover","initFlag","ctx","children","getContext","cvs","refresh","chart","destroy","getChartBuilder","label","elm","newElm","assign","hover","onHover","onClick","event","opts","Chart","clientHeight","Boolean","CORE_DIRECTIVES","FORM_DIRECTIVES","NgClass","390","TaskOption_1","controlList","taskOptions","option","TaskOption","description","showEmptyMessage","cancel","391","392"],"mappings":"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","file":"app.bundle.js","sourcesContent":["webpackJsonp([0],{\n\n/***/ 0:\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n\n/***/ 1:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar platform_browser_dynamic_1 = __webpack_require__(2);\n\tvar app_module_1 = __webpack_require__(25);\n\tvar core_1 = __webpack_require__(4);\n\tif (true) {\n\t    core_1.enableProdMode();\n\t}\n\tplatform_browser_dynamic_1.platformBrowserDynamic().bootstrapModule(app_module_1.AppModule);\n\n\n/***/ },\n\n/***/ 25:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(toastr) {\"use strict\";\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\n\t};\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n\t};\n\tvar core_1 = __webpack_require__(4);\n\tvar platform_browser_1 = __webpack_require__(23);\n\tvar app_main_component_1 = __webpack_require__(29);\n\tvar app_routes_1 = __webpack_require__(358);\n\tvar GlobalService_1 = __webpack_require__(30);\n\tvar JobService_1 = __webpack_require__(31);\n\tvar router_1 = __webpack_require__(359);\n\tvar home_component_1 = __webpack_require__(360);\n\tvar app_header_component_1 = __webpack_require__(379);\n\tvar app_footer_component_1 = __webpack_require__(383);\n\tvar job_list_component_1 = __webpack_require__(364);\n\tvar project_list_component_1 = __webpack_require__(367);\n\tvar project_view_component_1 = __webpack_require__(372);\n\tvar not_found_component_1 = __webpack_require__(370);\n\tvar forms_1 = __webpack_require__(386);\n\tvar http_1 = __webpack_require__(32);\n\tvar TaskService_1 = __webpack_require__(373);\n\tvar ProjectService_1 = __webpack_require__(368);\n\tvar task_view_component_1 = __webpack_require__(375);\n\tvar timestampFormat_1 = __webpack_require__(387);\n\tvar ng2_charts_1 = __webpack_require__(388);\n\tvar task_options_component_1 = __webpack_require__(390);\n\ttoastr.options = { timeOut: 5000, progressBar: true, hideDuration: 300, positionClass: 'toast-top-center' };\n\tvar AppModule = (function () {\n\t    function AppModule() {\n\t    }\n\t    AppModule = __decorate([\n\t        core_1.NgModule({\n\t            declarations: [\n\t                app_main_component_1.AppMainComponent,\n\t                home_component_1.HomeComponent,\n\t                app_header_component_1.AppHeaderComponent,\n\t                app_footer_component_1.AppFooterComponent,\n\t                job_list_component_1.JobListComponent,\n\t                project_list_component_1.ProjectListComponent,\n\t                project_view_component_1.ProjectViewComponent,\n\t                not_found_component_1.NotFoundComponent,\n\t                task_view_component_1.TaskViewComponent,\n\t                task_options_component_1.TaskOptionsComponent,\n\t                timestampFormat_1.TimestampFormat,\n\t                ng2_charts_1.CHART_DIRECTIVES\n\t            ],\n\t            imports: [\n\t                app_routes_1.routing,\n\t                platform_browser_1.BrowserModule,\n\t                forms_1.FormsModule,\n\t                forms_1.ReactiveFormsModule,\n\t                http_1.HttpModule,\n\t                router_1.RouterModule\n\t            ],\n\t            bootstrap: [\n\t                app_main_component_1.AppMainComponent\n\t            ],\n\t            providers: [\n\t                GlobalService_1.GlobalService,\n\t                JobService_1.JobService,\n\t                TaskService_1.TaskService,\n\t                ProjectService_1.ProjectService\n\t            ]\n\t        }), \n\t        __metadata('design:paramtypes', [])\n\t    ], AppModule);\n\t    return AppModule;\n\t}());\n\texports.AppModule = AppModule;\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26)))\n\n/***/ },\n\n/***/ 29:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\n\t};\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n\t};\n\tvar core_1 = __webpack_require__(4);\n\tvar GlobalService_1 = __webpack_require__(30);\n\tvar JobService_1 = __webpack_require__(31);\n\tvar Rx_1 = __webpack_require__(35);\n\tvar AppMainComponent = (function () {\n\t    function AppMainComponent(globalService, jobService) {\n\t        this.globalService = globalService;\n\t        this.jobService = jobService;\n\t    }\n\t    AppMainComponent.prototype.ngOnInit = function () {\n\t        var _this = this;\n\t        var jobsCountTimer = Rx_1.Observable.timer(1000, 1000);\n\t        jobsCountTimer.subscribe(function () { return _this.setJobCount(); });\n\t    };\n\t    AppMainComponent.prototype.setJobCount = function () {\n\t        var _this = this;\n\t        this.jobService.getRunningList()\n\t            .then(function (res) {\n\t            _this.globalService.jobsCount = res.data.count;\n\t            _this.globalService.jobList = res.data.jobs;\n\t            _this.globalService.emitJobsCount();\n\t            _this.globalService.emitJobList();\n\t        })\n\t            .catch(function () {\n\t            _this.globalService.jobsCount = 0;\n\t            _this.globalService.jobList = null;\n\t            _this.globalService.emitJobsCount();\n\t            _this.globalService.emitJobList();\n\t        });\n\t    };\n\t    AppMainComponent = __decorate([\n\t        core_1.Component({\n\t            selector: 'app-main',\n\t            template: __webpack_require__(357)\n\t        }), \n\t        __metadata('design:paramtypes', [GlobalService_1.GlobalService, JobService_1.JobService])\n\t    ], AppMainComponent);\n\t    return AppMainComponent;\n\t}());\n\texports.AppMainComponent = AppMainComponent;\n\n\n/***/ },\n\n/***/ 30:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\n\t};\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n\t};\n\tvar core_1 = __webpack_require__(4);\n\tvar GlobalService = (function () {\n\t    function GlobalService() {\n\t        this.jobsCount = 0;\n\t        this.jobsCountEmitter = new core_1.EventEmitter();\n\t        this.jobListEmitter = new core_1.EventEmitter();\n\t        this.loadingDelayTime = 0;\n\t    }\n\t    GlobalService.prototype.emitJobsCount = function () {\n\t        this.jobsCountEmitter.emit(this.jobsCount);\n\t    };\n\t    GlobalService.prototype.emitJobList = function () {\n\t        this.jobListEmitter.emit(this.jobList);\n\t    };\n\t    GlobalService = __decorate([\n\t        core_1.Injectable(), \n\t        __metadata('design:paramtypes', [])\n\t    ], GlobalService);\n\t    return GlobalService;\n\t}());\n\texports.GlobalService = GlobalService;\n\n\n/***/ },\n\n/***/ 31:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\n\t};\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n\t};\n\tvar core_1 = __webpack_require__(4);\n\tvar http_1 = __webpack_require__(32);\n\t__webpack_require__(33);\n\tvar JobService = (function () {\n\t    function JobService(http) {\n\t        this.http = http;\n\t    }\n\t    JobService.prototype.getRunningList = function () {\n\t        return this.http.get('/api/job/runningList')\n\t            .toPromise()\n\t            .then(function (response) { return response.json(); })\n\t            .catch(this.handleError);\n\t    };\n\t    JobService.prototype.last = function (projectId, taskId) {\n\t        return this.http.get('/api/job/last?project=' + projectId + '&task=' + taskId)\n\t            .toPromise()\n\t            .then(function (response) { return response.json(); })\n\t            .catch(this.handleError);\n\t    };\n\t    JobService.prototype.handleError = function (error) {\n\t        return Promise.reject(error.message || error);\n\t    };\n\t    JobService = __decorate([\n\t        core_1.Injectable(), \n\t        __metadata('design:paramtypes', [http_1.Http])\n\t    ], JobService);\n\t    return JobService;\n\t}());\n\texports.JobService = JobService;\n\n\n/***/ },\n\n/***/ 357:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=\\\"wrap\\\">\\n\\t<app-header></app-header>\\n\\n\\t<div class=\\\"container\\\">\\n\\t\\t<router-outlet></router-outlet>\\n\\t</div>\\n</div>\\n\\n<app-footer></app-footer>\";\n\n/***/ },\n\n/***/ 358:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar router_1 = __webpack_require__(359);\n\tvar home_component_1 = __webpack_require__(360);\n\tvar job_list_component_1 = __webpack_require__(364);\n\tvar project_list_component_1 = __webpack_require__(367);\n\tvar not_found_component_1 = __webpack_require__(370);\n\tvar project_view_component_1 = __webpack_require__(372);\n\tvar task_view_component_1 = __webpack_require__(375);\n\tvar appRoutes = [\n\t    //{ path: '**', component: PageNotFoundComponent },\n\t    {\n\t        path: '',\n\t        redirectTo: '/home',\n\t        pathMatch: 'full'\n\t    },\n\t    {\n\t        path: 'home', component: home_component_1.HomeComponent\n\t    },\n\t    {\n\t        path: 'job/list', component: job_list_component_1.JobListComponent\n\t    },\n\t    {\n\t        path: 'project/list', component: project_list_component_1.ProjectListComponent\n\t    },\n\t    {\n\t        path: 'project/view/:project', component: project_view_component_1.ProjectViewComponent\n\t    },\n\t    {\n\t        path: 'task/view/:project/:task', component: task_view_component_1.TaskViewComponent\n\t    },\n\t    {\n\t        path: '**',\n\t        component: not_found_component_1.NotFoundComponent\n\t    }\n\t];\n\texports.routing = router_1.RouterModule.forRoot(appRoutes);\n\n\n/***/ },\n\n/***/ 360:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\n\t};\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n\t};\n\tvar core_1 = __webpack_require__(4);\n\tvar HomeComponent = (function () {\n\t    function HomeComponent() {\n\t    }\n\t    HomeComponent = __decorate([\n\t        core_1.Component({\n\t            selector: 'home',\n\t            template: __webpack_require__(361),\n\t            styles: [__webpack_require__(363)]\n\t        }), \n\t        __metadata('design:paramtypes', [])\n\t    ], HomeComponent);\n\t    return HomeComponent;\n\t}());\n\texports.HomeComponent = HomeComponent;\n\n\n/***/ },\n\n/***/ 361:\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = \"<div class=\\\"home-index\\\">\\n\\n\\t<div class=\\\"jumbotron\\\">\\n\\t\\t<h1>GoCI</h1>\\n\\n\\t\\t<p class=\\\"lead\\\">\\n\\t\\t\\t<img src=\\\"\" + __webpack_require__(362) + \"\\\" border=\\\"0\\\" alt=\\\"\\\" class=\\\"logo\\\"/>\\n\\t\\t</p>\\n\\n\\t\\t<p class=\\\"lead\\\">Welcome! Click on button below to start!.</p>\\n\\n\\t\\t<p>\\n\\t\\t\\t<a class=\\\"btn btn-lg btn-success\\\" routerLink=\\\"/project/list\\\">Start</a>\\n\\t\\t</p>\\n\\t</div>\\n\\n\\t<div class=\\\"body-content\\\">\\n\\n\\t\\t<div class=\\\"row\\\">\\n\\t\\t\\t<div class=\\\"col-lg-4\\\">\\n\\t\\t\\t\\t<h2>Simple structure</h2>\\n\\t\\t\\t\\t<p>With a file based structure you can easily versioning all project files</p>\\n\\t\\t\\t</div>\\n\\t\\t\\t<div class=\\\"col-lg-4\\\">\\n\\t\\t\\t\\t<h2>Simple API</h2>\\n\\t\\t\\t\\t<p>It works with a simple API, using HTTP requests to make everything - if you want</p>\\n\\t\\t\\t</div>\\n\\t\\t\\t<div class=\\\"col-lg-4\\\">\\n\\t\\t\\t\\t<h2>Friendly Interface</h2>\\n\\t\\t\\t\\t<p>You can see your logs with a nice and friendly web responsive interface</p>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\n\\t</div>\\n</div>\";\n\n/***/ },\n\n/***/ 362:\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__.p + \"assets/logo.638d4c934da96a3d88f77760d2ed7b88.png\";\n\n/***/ },\n\n/***/ 363:\n/***/ function(module, exports) {\n\n\tmodule.exports = \".home-index .logo {\\n\\twidth: 200px;\\n}\\n\\n.jumbotron {\\n\\ttext-align: center;\\n\\tbackground-color: transparent;\\n}\\n\\n.jumbotron .btn {\\n\\tfont-size: 21px;\\n\\tpadding: 14px 24px;\\n}\"\n\n/***/ },\n\n/***/ 364:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\n\t};\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n\t};\n\tvar core_1 = __webpack_require__(4);\n\tvar router_1 = __webpack_require__(359);\n\tvar GlobalService_1 = __webpack_require__(30);\n\tvar JobListComponent = (function () {\n\t    function JobListComponent(globalService, router) {\n\t        this.globalService = globalService;\n\t        this.router = router;\n\t        this.chartDataLabels = [];\n\t        this.chartDataOptions = {};\n\t        this.chartDataColors = [];\n\t        this.hideAll();\n\t        this.showLoading = true;\n\t    }\n\t    JobListComponent.prototype.ngOnInit = function () {\n\t        var _this = this;\n\t        this.globalService.jobListEmitter.subscribe(function (value) {\n\t            _this.jobList = value;\n\t            if (_this.jobList == null) {\n\t                _this.hideAll();\n\t                _this.showError = true;\n\t            }\n\t            else if (_this.jobList.length == 0) {\n\t                _this.hideAll();\n\t                _this.showEmptyData = true;\n\t            }\n\t            else {\n\t                // job list data\n\t                _this.hideAll();\n\t                _this.showData = true;\n\t                // chart data\n\t                var chartLabels = [];\n\t                var chartColors = [];\n\t                var chartDataset = [];\n\t                var chartOptions = {\n\t                    animation: false\n\t                };\n\t                var chartDataForOnQueue = 0;\n\t                var chartDataForRunning = 0;\n\t                var chartDataForError = 0;\n\t                var chartDataForSuccess = 0;\n\t                for (var jobIndex in _this.jobList) {\n\t                    var job = _this.jobList[jobIndex];\n\t                    var jobStatus = job[\"status\"];\n\t                    switch (jobStatus) {\n\t                        case 'onqueue':\n\t                            chartDataForOnQueue += 1;\n\t                            break;\n\t                        case 'running':\n\t                            chartDataForRunning += 1;\n\t                            break;\n\t                        case 'error':\n\t                            chartDataForError += 1;\n\t                            break;\n\t                        case 'success':\n\t                            chartDataForSuccess += 1;\n\t                            break;\n\t                    }\n\t                }\n\t                if (chartDataForOnQueue > 0) {\n\t                    chartLabels.push(\"On Queue\");\n\t                    chartColors.push(\"#08b4fa\");\n\t                    chartDataset.push(chartDataForOnQueue);\n\t                }\n\t                if (chartDataForSuccess > 0) {\n\t                    chartLabels.push(\"Success\");\n\t                    chartColors.push(\"#39c558\");\n\t                    chartDataset.push(chartDataForSuccess);\n\t                }\n\t                if (chartDataForError > 0) {\n\t                    chartLabels.push(\"Error\");\n\t                    chartColors.push(\"#ff3e43\");\n\t                    chartDataset.push(chartDataForError);\n\t                }\n\t                if (chartDataForRunning > 0) {\n\t                    chartLabels.push(\"Running\");\n\t                    chartColors.push(\"#ffbe41\");\n\t                    chartDataset.push(chartDataForRunning);\n\t                }\n\t                _this.chartData = {\n\t                    type: 'doughnut',\n\t                    animation: {\n\t                        animateScale: false,\n\t                        animateRotate: false\n\t                    },\n\t                    labels: chartLabels,\n\t                    datasets: [\n\t                        {\n\t                            data: chartDataset,\n\t                            backgroundColor: chartColors,\n\t                            hoverBackgroundColor: chartColors\n\t                        }\n\t                    ],\n\t                    graphOptions: {\n\t                        animation: false\n\t                    }\n\t                };\n\t                _this.chartDataDatasets = [{\n\t                        data: chartDataset,\n\t                        backgroundColor: chartColors,\n\t                        hoverBackgroundColor: chartColors\n\t                    }];\n\t                _this.chartDataLabels = chartLabels;\n\t                _this.chartDataOptions = chartOptions;\n\t                _this.chartDataColors = chartColors;\n\t            }\n\t        });\n\t    };\n\t    JobListComponent.prototype.hideAll = function () {\n\t        this.showData = false;\n\t        this.showEmptyData = false;\n\t        this.showLoading = false;\n\t        this.showError = false;\n\t    };\n\t    JobListComponent.prototype.view = function (projectId, taskId) {\n\t        this.router.navigate(['/task/view', projectId, taskId]);\n\t    };\n\t    JobListComponent.prototype.back = function () {\n\t        this.router.navigate(['/project/list']);\n\t    };\n\t    JobListComponent = __decorate([\n\t        core_1.Component({\n\t            selector: 'job-list',\n\t            template: __webpack_require__(365),\n\t            styles: [__webpack_require__(366)]\n\t        }), \n\t        __metadata('design:paramtypes', [GlobalService_1.GlobalService, router_1.Router])\n\t    ], JobListComponent);\n\t    return JobListComponent;\n\t}());\n\texports.JobListComponent = JobListComponent;\n\n\n/***/ },\n\n/***/ 365:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=\\\"job-list\\\">\\n\\n\\t<div class=\\\"col-md-8 col-lg-8\\\">\\n\\t\\t<!-- OPTIONS -->\\n\\t\\t<div id=\\\"options-container\\\" class=\\\"panel panel-default\\\">\\n\\t\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t\\t<h3 class=\\\"options-container-title\\\">Job List</h3>\\n\\t\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"back()\\\">Back</button>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\n\\t\\t<!-- DATA -->\\n\\t\\t<div id=\\\"data\\\" *ngIf=\\\"showData\\\">\\n\\t\\t\\t<div id=\\\"job-list\\\" class=\\\"list-group\\\">\\n\\t\\t\\t\\t<div *ngFor=\\\"let job of jobList\\\" id=\\\"job-row-{{job.id}}\\\" class=\\\"job-row list-group-item\\\">\\n\\t\\t\\t\\t\\t<h4 class=\\\"list-group-item-heading\\\">\\n\\t\\t\\t\\t\\t\\t<a href=\\\"javascript:void(0);\\\" (click)=\\\"view(job.projectId, job.taskId)\\\">{{job.task.name}}</a>\\n\\t\\t\\t\\t\\t</h4>\\n\\t\\t\\t\\t\\t<div class=\\\"list-group-item-text\\\">\\n\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t<strong>Job: </strong> {{job.id}}\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t<strong>Created at:</strong> {{job.createdAt | timestampFormat}}\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t<strong>Started at:</strong> {{job.startedAt | timestampFormat}}\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t<strong>Duration:</strong> {{job.duration}}s\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t<strong>Status:</strong>\\n\\t\\t\\t\\t\\t\\t\\t<span [ngSwitch]=\\\"job?.status\\\">\\n\\t\\t\\t\\t\\t\\t\\t<span *ngSwitchCase=\\\"'onqueue'\\\" class=\\\"label label-primary\\\">{{job.status}}</span>\\n\\t\\t\\t\\t\\t\\t\\t<span *ngSwitchCase=\\\"'running'\\\" class=\\\"label label-warning\\\">{{job.status}}</span>\\n\\t\\t\\t\\t\\t\\t\\t<span *ngSwitchCase=\\\"'success'\\\" class=\\\"label label-success\\\">{{job.status}}</span>\\n\\t\\t\\t\\t\\t\\t\\t<span *ngSwitchCase=\\\"'error'\\\" class=\\\"label label-danger\\\">{{job.status}}</span>\\n\\t\\t\\t\\t\\t\\t\\t<span *ngSwitchDefault class=\\\"label label-success\\\">{{job.status}}</span>\\n\\t\\t\\t\\t\\t\\t</span>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t<strong>Progress:</strong>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"progress\\\">\\n\\t\\t\\t\\t\\t\\t\\t<span [ngSwitch]=\\\"job.status\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<div *ngSwitchCase=\\\"'onqueue'\\\" class=\\\"active progress-bar progress-bar-info\\\" role=\\\"progressbar\\\" [attr.aria-valuenow]=\\\"job.progress\\\" aria-valuemin=\\\"0\\\" aria-valuemax=\\\"100\\\" [style.width]=\\\"job.progress + '%'\\\" style=\\\"min-width: 2em\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{{job.progress}}%\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t<div *ngSwitchCase=\\\"'success'\\\" class=\\\"active progress-bar progress-bar-success\\\" role=\\\"progressbar\\\" [attr.aria-valuenow]=\\\"job.progress\\\" aria-valuemin=\\\"0\\\" aria-valuemax=\\\"100\\\" [style.width]=\\\"job.progress + '%'\\\" style=\\\"min-width: 2em\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{{job.progress}}%\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t<div *ngSwitchCase=\\\"'running'\\\" class=\\\"active progress-bar progress-bar-striped progress-bar-warning\\\" role=\\\"progressbar\\\" [attr.aria-valuenow]=\\\"job.progress\\\" aria-valuemin=\\\"0\\\" aria-valuemax=\\\"100\\\" [style.width]=\\\"job.progress + '%'\\\" style=\\\"min-width: 2em\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{{job.progress}}%\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t<div *ngSwitchCase=\\\"'error'\\\" class=\\\"active progress-bar progress-bar-danger\\\" role=\\\"progressbar\\\" [attr.aria-valuenow]=\\\"job.progress\\\" aria-valuemin=\\\"0\\\" aria-valuemax=\\\"100\\\" [style.width]=\\\"job.progress + '%'\\\" style=\\\"min-width: 2em\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{{job.progress}}%\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t<div *ngSwitchDefault class=\\\"active progress-bar progress-bar-success\\\" role=\\\"progressbar\\\" [attr.aria-valuenow]=\\\"job.progress\\\" aria-valuemin=\\\"0\\\" aria-valuemax=\\\"100\\\" [style.width]=\\\"job.progress + '%'\\\" style=\\\"min-width: 2em\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{{job.progress}}%\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t</span>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\n\\t\\t<div id=\\\"no-data\\\" *ngIf=\\\"showEmptyData\\\">\\n\\t\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t\\t\\t<div>No jobs found</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\n\\t\\t<div id=\\\"error-data\\\" *ngIf=\\\"showError\\\">\\n\\t\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t\\t\\t<h3>Problem while loading job list</h3>\\n\\t\\t\\t\\t\\t<p id=\\\"error-data-message\\\"></p>\\n\\t\\t\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"load()\\\">Try again</button>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\n\\t\\t<div id=\\\"loading-data\\\" *ngIf=\\\"showLoading\\\">\\n\\t\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t\\t<div class=\\\"panel-body\\\">Loading...</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<div class=\\\"col-md-4 col-lg-4\\\">\\n\\t\\t<div id=\\\"graph-data\\\" *ngIf=\\\"showData\\\">\\n\\t\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t\\t\\t<h3>Job graph</h3>\\n\\t\\t\\t\\t\\t<br/>\\n\\t\\t\\t\\t\\t<base-chart\\n\\t\\t\\t\\t\\t\\tclass=\\\"chart\\\"\\n\\t\\t\\t\\t\\t\\t[datasets]=\\\"chartDataDatasets\\\"\\n\\t\\t\\t\\t\\t\\t[labels]=\\\"chartDataLabels\\\"\\n\\t\\t\\t\\t\\t\\t[options]=\\\"chartDataOptions\\\"\\n\\t\\t\\t\\t\\t\\t[colors]=\\\"chartDataColors\\\"\\n\\t\\t\\t\\t\\t\\t[chartType]=\\\"'doughnut'\\\">\\n\\t\\t\\t\\t\\t</base-chart>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\n\\t\\t<div id=\\\"graph-no-data\\\" *ngIf=\\\"showEmptyData\\\">\\n\\t\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t\\t\\t<div>No jobs for graph</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\n\\t\\t<div id=\\\"graph-error-data\\\" *ngIf=\\\"showError\\\">\\n\\t\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t\\t\\t<div>Problem while loading job list</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\n\\t\\t<div id=\\\"graph-loading-data\\\" *ngIf=\\\"showLoading\\\">\\n\\t\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t\\t<div class=\\\"panel-body\\\">Loading...</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t</div>\\n\\n</div>\";\n\n/***/ },\n\n/***/ 366:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"h4.list-group-item-heading a {\\n\\ttext-decoration: none;\\n\\tcolor: #000;\\n}\\n\\nh4.list-group-item-heading a:focus {\\n\\ttext-decoration: none;\\n\\tcolor: #000;\\n}\\n\\nh4.list-group-item-heading a:hover {\\n\\ttext-decoration: none;\\n\\tcolor: #6e6e6e;\\n}\\n\"\n\n/***/ },\n\n/***/ 367:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\n\t};\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n\t};\n\tvar core_1 = __webpack_require__(4);\n\tvar ProjectService_1 = __webpack_require__(368);\n\tvar router_1 = __webpack_require__(359);\n\tvar Rx_1 = __webpack_require__(35);\n\tvar GlobalService_1 = __webpack_require__(30);\n\tvar ProjectListComponent = (function () {\n\t    function ProjectListComponent(globalService, projectService, router) {\n\t        this.globalService = globalService;\n\t        this.projectService = projectService;\n\t        this.router = router;\n\t    }\n\t    ProjectListComponent.prototype.ngOnInit = function () {\n\t        this.load();\n\t    };\n\t    ProjectListComponent.prototype.load = function () {\n\t        var _this = this;\n\t        this.hideAll();\n\t        if (this.globalService.loadingDelayTime > 0) {\n\t            this.showLoading = true;\n\t        }\n\t        Rx_1.Observable.empty().delay(this.globalService.loadingDelayTime).subscribe(null, null, function () {\n\t            _this.getData();\n\t        });\n\t    };\n\t    ProjectListComponent.prototype.getData = function () {\n\t        var _this = this;\n\t        this.projectService.list()\n\t            .then(function (response) {\n\t            if (response != null && response.success == true) {\n\t                _this.list = response.data.list;\n\t                _this.hideAll();\n\t                if (_this.list.length > 0) {\n\t                    _this.showList = true;\n\t                }\n\t                else {\n\t                    _this.showEmptyList = true;\n\t                }\n\t            }\n\t            else {\n\t                _this.onError();\n\t            }\n\t        })\n\t            .catch(function () {\n\t            _this.onError();\n\t        });\n\t    };\n\t    ProjectListComponent.prototype.back = function () {\n\t        this.router.navigate(['/']);\n\t    };\n\t    ProjectListComponent.prototype.hideAll = function () {\n\t        this.showList = false;\n\t        this.showEmptyList = false;\n\t        this.showLoading = false;\n\t        this.showError = false;\n\t    };\n\t    ProjectListComponent.prototype.onError = function () {\n\t        this.hideAll();\n\t        this.showError = true;\n\t        this.list = [];\n\t    };\n\t    ProjectListComponent.prototype.view = function (projectId) {\n\t        this.router.navigate(['/project/view', projectId]);\n\t    };\n\t    ProjectListComponent = __decorate([\n\t        core_1.Component({\n\t            selector: 'project-list',\n\t            template: __webpack_require__(369)\n\t        }), \n\t        __metadata('design:paramtypes', [GlobalService_1.GlobalService, ProjectService_1.ProjectService, router_1.Router])\n\t    ], ProjectListComponent);\n\t    return ProjectListComponent;\n\t}());\n\texports.ProjectListComponent = ProjectListComponent;\n\n\n/***/ },\n\n/***/ 368:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\n\t};\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n\t};\n\tvar core_1 = __webpack_require__(4);\n\tvar http_1 = __webpack_require__(32);\n\t__webpack_require__(33);\n\tvar ProjectService = (function () {\n\t    function ProjectService(http) {\n\t        this.http = http;\n\t    }\n\t    ProjectService.prototype.list = function () {\n\t        return this.http.get('/api/project/list')\n\t            .toPromise()\n\t            .then(function (response) { return response.json(); })\n\t            .catch(this.handleError);\n\t    };\n\t    ProjectService.prototype.view = function (projectId) {\n\t        return this.http.get('/api/project/view?project=' + projectId)\n\t            .toPromise()\n\t            .then(function (response) { return response.json(); })\n\t            .catch(this.handleError);\n\t    };\n\t    ProjectService.prototype.handleError = function (error) {\n\t        return Promise.reject(error.message || error);\n\t    };\n\t    ProjectService = __decorate([\n\t        core_1.Injectable(), \n\t        __metadata('design:paramtypes', [http_1.Http])\n\t    ], ProjectService);\n\t    return ProjectService;\n\t}());\n\texports.ProjectService = ProjectService;\n\n\n/***/ },\n\n/***/ 369:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=\\\"project-index\\\">\\n\\n\\t<!-- OPTIONS -->\\n\\t<div id=\\\"options-container\\\" class=\\\"panel panel-default hiddenContent\\\">\\n\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t<h3 class=\\\"options-container-title\\\">Project List</h3>\\n\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"load()\\\">Refresh</button>\\n\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"back()\\\">Back</button>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<!-- DATA -->\\n\\t<div id=\\\"data\\\" *ngIf=\\\"showList\\\">\\n\\t\\t<div id=\\\"project-list\\\" class=\\\"list-group\\\">\\n\\t\\t\\t<a *ngFor=\\\"let item of list\\\" href=\\\"javascript: void(0);\\\" (click)=\\\"view(item.id)\\\" class=\\\"project-row list-group-item\\\">\\n\\t\\t\\t\\t<h4 class=\\\"list-group-item-heading\\\">{{item.name}}</h4>\\n\\t\\t\\t\\t<p class=\\\"list-group-item-text\\\">{{item.description}}</p>\\n\\t\\t\\t</a>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<div id=\\\"no-data\\\" *ngIf=\\\"showEmptyList\\\">\\n\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t\\t<div>No projects found</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<div id=\\\"error-data\\\" *ngIf=\\\"showError\\\">\\n\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t\\t<h3>Problem while loading project list</h3>\\n\\t\\t\\t\\t<p id=\\\"error-data-message\\\"></p>\\n\\t\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"load()\\\">Try again</button>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<div id=\\\"loading-data\\\" *ngIf=\\\"showLoading\\\">\\n\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t<div class=\\\"panel-body\\\">Loading...</div>\\n\\t\\t</div>\\n\\t</div>\\n\\n</div>\";\n\n/***/ },\n\n/***/ 370:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\n\t};\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n\t};\n\tvar core_1 = __webpack_require__(4);\n\tvar NotFoundComponent = (function () {\n\t    function NotFoundComponent() {\n\t    }\n\t    NotFoundComponent = __decorate([\n\t        core_1.Component({\n\t            selector: 'not-found',\n\t            template: __webpack_require__(371)\n\t        }), \n\t        __metadata('design:paramtypes', [])\n\t    ], NotFoundComponent);\n\t    return NotFoundComponent;\n\t}());\n\texports.NotFoundComponent = NotFoundComponent;\n\n\n/***/ },\n\n/***/ 371:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div style=\\\"width: 100%; text-align: center;\\\">\\n\\t<h1>\\n\\t\\tOops!</h1>\\n\\t<h2>\\n\\t\\t404 Not Found</h2>\\n\\t<div class=\\\"error-details\\\">\\n\\t\\tSorry, an error has occured, Requested page not found!\\n\\t</div>\\n</div>\";\n\n/***/ },\n\n/***/ 372:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(toastr) {\"use strict\";\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\n\t};\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n\t};\n\tvar core_1 = __webpack_require__(4);\n\tvar ProjectService_1 = __webpack_require__(368);\n\tvar router_1 = __webpack_require__(359);\n\tvar Rx_1 = __webpack_require__(35);\n\tvar TaskService_1 = __webpack_require__(373);\n\tvar GlobalService_1 = __webpack_require__(30);\n\tvar ProjectViewComponent = (function () {\n\t    function ProjectViewComponent(globalService, projectService, taskService, router, route) {\n\t        this.globalService = globalService;\n\t        this.projectService = projectService;\n\t        this.taskService = taskService;\n\t        this.router = router;\n\t        this.route = route;\n\t    }\n\t    ProjectViewComponent.prototype.ngOnInit = function () {\n\t        var _this = this;\n\t        this.route.params.subscribe(function (params) {\n\t            _this.projectId = params['project'];\n\t        });\n\t        this.load();\n\t    };\n\t    ProjectViewComponent.prototype.load = function () {\n\t        var _this = this;\n\t        this.hideAll();\n\t        if (this.globalService.loadingDelayTime > 0) {\n\t            this.showLoading = true;\n\t        }\n\t        Rx_1.Observable.empty().delay(this.globalService.loadingDelayTime).subscribe(null, null, function () {\n\t            _this.getData();\n\t        });\n\t    };\n\t    ProjectViewComponent.prototype.getData = function () {\n\t        var _this = this;\n\t        this.projectService.view(this.projectId)\n\t            .then(function (response) {\n\t            if (response != null && response.success == true) {\n\t                _this.project = response.data.project;\n\t                _this.hideAll();\n\t                if (_this.project != null) {\n\t                    _this.showData = true;\n\t                }\n\t                else {\n\t                    _this.showEmptyData = true;\n\t                }\n\t            }\n\t            else {\n\t                _this.onError();\n\t            }\n\t        })\n\t            .catch(function () {\n\t            _this.onError();\n\t        });\n\t    };\n\t    ProjectViewComponent.prototype.back = function () {\n\t        this.router.navigate(['/project/list']);\n\t    };\n\t    ProjectViewComponent.prototype.hideAll = function () {\n\t        this.showData = false;\n\t        this.showEmptyData = false;\n\t        this.showLoading = false;\n\t        this.showError = false;\n\t        this.showTaskOptionsForm = false;\n\t    };\n\t    ProjectViewComponent.prototype.onError = function () {\n\t        this.hideAll();\n\t        this.showError = true;\n\t        this.project = null;\n\t    };\n\t    ProjectViewComponent.prototype.view = function (projectId, taskId) {\n\t        this.router.navigate(['/task/view', projectId, taskId]);\n\t    };\n\t    ProjectViewComponent.prototype.showTaskOptions = function (projectId, projectName, taskId, taskName, taskDescription) {\n\t        var _this = this;\n\t        this.showTaskOptionsForm = false;\n\t        this.runProjectId = projectId;\n\t        this.runProjectName = projectName;\n\t        this.runTaskId = taskId;\n\t        this.runTaskName = taskName;\n\t        this.runTaskDescription = taskDescription;\n\t        this.runTaskOptions = null;\n\t        this.taskService.options(projectId, taskId)\n\t            .then(function (response) {\n\t            if (response != null && response.success == true) {\n\t                _this.hideAll();\n\t                _this.runTaskOptions = response.data.options;\n\t                _this.showTaskOptionsForm = true;\n\t            }\n\t            else {\n\t                toastr.error('Error when get task options, try again');\n\t            }\n\t        })\n\t            .catch(function (error) {\n\t            toastr.error(error);\n\t        });\n\t    };\n\t    ProjectViewComponent.prototype.taskRunWithSuccess = function ($event) {\n\t        this.hideAll();\n\t        this.showData = true;\n\t    };\n\t    ProjectViewComponent.prototype.taskRunWithError = function ($event) {\n\t    };\n\t    ProjectViewComponent.prototype.taskRunCancel = function ($event) {\n\t        this.hideAll();\n\t        this.showData = true;\n\t    };\n\t    ProjectViewComponent = __decorate([\n\t        core_1.Component({\n\t            selector: 'project-view',\n\t            template: __webpack_require__(374)\n\t        }), \n\t        __metadata('design:paramtypes', [GlobalService_1.GlobalService, ProjectService_1.ProjectService, TaskService_1.TaskService, router_1.Router, router_1.ActivatedRoute])\n\t    ], ProjectViewComponent);\n\t    return ProjectViewComponent;\n\t}());\n\texports.ProjectViewComponent = ProjectViewComponent;\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26)))\n\n/***/ },\n\n/***/ 373:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\n\t};\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n\t};\n\tvar core_1 = __webpack_require__(4);\n\tvar http_1 = __webpack_require__(32);\n\t__webpack_require__(33);\n\tvar TaskService = (function () {\n\t    function TaskService(http) {\n\t        this.http = http;\n\t    }\n\t    TaskService.prototype.options = function (projectId, taskId) {\n\t        return this.http.get('/api/task/options?project=' + projectId + '&task=' + taskId)\n\t            .toPromise()\n\t            .then(function (response) { return response.json(); })\n\t            .catch(this.handleError);\n\t    };\n\t    TaskService.prototype.view = function (projectId, taskId) {\n\t        return this.http.get('/api/task/view?project=' + projectId + '&task=' + taskId)\n\t            .toPromise()\n\t            .then(function (response) { return response.json(); })\n\t            .catch(this.handleError);\n\t    };\n\t    TaskService.prototype.run = function (projectId, taskId, options) {\n\t        var headers = new http_1.Headers({\n\t            'Content-Type': 'application/x-www-form-urlencoded'\n\t        });\n\t        return this.http.post('/api/task/run', options, { headers: headers })\n\t            .toPromise()\n\t            .then(function (response) { return response.json(); })\n\t            .catch(this.handleError);\n\t    };\n\t    TaskService.prototype.handleError = function (error) {\n\t        return Promise.reject(error.message || error);\n\t    };\n\t    TaskService = __decorate([\n\t        core_1.Injectable(), \n\t        __metadata('design:paramtypes', [http_1.Http])\n\t    ], TaskService);\n\t    return TaskService;\n\t}());\n\texports.TaskService = TaskService;\n\n\n/***/ },\n\n/***/ 374:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=\\\"project-view\\\">\\n\\n\\t<!-- OPTIONS -->\\n\\t<div id=\\\"options-container\\\" class=\\\"panel panel-default\\\">\\n\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t<h3 class=\\\"options-container-title\\\">Project {{project?.name}}</h3>\\n\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"load()\\\">Refresh</button>\\n\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"back()\\\">Back</button>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<!-- DATA -->\\n\\t<div id=\\\"data\\\" *ngIf=\\\"showData\\\">\\n\\t\\t<h5>Details</h5>\\n\\n\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t\\t<div><strong>Name:</strong> {{project.name}}</div>\\n\\t\\t\\t\\t<div><strong>Description:</strong> {{project.description}}</div>\\n\\t\\t\\t\\t<div><strong>Tasks:</strong> {{project.tasks?.length}}</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\n\\t\\t<h5 *ngIf=\\\"project.tasks?.length > 0\\\">Tasks</h5>\\n\\n\\t\\t<div id=\\\"project-task-list\\\" class=\\\"list-group\\\" *ngIf=\\\"project.tasks?.length > 0\\\">\\n\\t\\t\\t<div *ngFor=\\\"let task of project.tasks\\\" class=\\\"project-task-row list-group-item\\\">\\n\\t\\t\\t\\t<h4 class=\\\"list-group-item-heading\\\">{{task.name}}</h4>\\n\\t\\t\\t\\t<div class=\\\"list-group-item-text\\\">\\n\\t\\t\\t\\t\\t<p>\\n\\t\\t\\t\\t\\t\\t<strong>Description:</strong>{{task.description}}\\n\\t\\t\\t\\t\\t\\t<br/>\\n\\t\\t\\t\\t\\t\\t<strong>Steps:</strong>{{task.steps?.length}}\\n\\t\\t\\t\\t\\t</p>\\n\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-success\\\" (click)=\\\"showTaskOptions(project.id, project.name, task.id, task.name, task.description)\\\">Run</button>\\n\\t\\t\\t\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"view(project.id, task.id)\\\">View</button>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<div id=\\\"no-data\\\" *ngIf=\\\"showEmptyData\\\">\\n\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t\\t<div>Project not found</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<div id=\\\"error-data\\\" *ngIf=\\\"showError\\\">\\n\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t\\t<h3>Problem while loading project</h3>\\n\\t\\t\\t\\t<p id=\\\"error-data-message\\\"></p>\\n\\t\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"back()\\\">Back</button>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<div id=\\\"loading-data\\\" *ngIf=\\\"showLoading\\\">\\n\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t<div class=\\\"panel-body\\\">Loading...</div>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<task-options *ngIf=\\\"showTaskOptionsForm\\\" [projectId]=\\\"runProjectId\\\" [projectName]=\\\"runProjectName\\\" [taskId]=\\\"runTaskId\\\" [taskName]=\\\"runTaskName\\\" [taskDescription]=\\\"runTaskDescription\\\" [options]=\\\"runTaskOptions\\\" (taskRunWithSuccess)=\\\"taskRunWithSuccess($event)\\\" (taskRunWithError)=\\\"taskRunWithError($event)\\\" (taskRunCancel)=\\\"taskRunCancel($event)\\\"></task-options>\\n\\n</div>\\n\";\n\n/***/ },\n\n/***/ 375:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(toastr) {\"use strict\";\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\n\t};\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n\t};\n\tvar core_1 = __webpack_require__(4);\n\tvar router_1 = __webpack_require__(359);\n\tvar Rx_1 = __webpack_require__(35);\n\tvar TaskService_1 = __webpack_require__(373);\n\tvar JobService_1 = __webpack_require__(31);\n\tvar OutputGroup_1 = __webpack_require__(376);\n\tvar Utils_1 = __webpack_require__(377);\n\tvar GlobalService_1 = __webpack_require__(30);\n\tvar TaskViewComponent = (function () {\n\t    function TaskViewComponent(globalService, taskService, jobService, router, route) {\n\t        this.globalService = globalService;\n\t        this.taskService = taskService;\n\t        this.jobService = jobService;\n\t        this.router = router;\n\t        this.route = route;\n\t    }\n\t    TaskViewComponent.prototype.ngOnInit = function () {\n\t        var _this = this;\n\t        this.route.params.subscribe(function (params) {\n\t            _this.projectId = params['project'];\n\t            _this.taskId = params['task'];\n\t        });\n\t        this.load();\n\t        var lastJobTimer = Rx_1.Observable.timer(1000, 1000);\n\t        lastJobTimer.subscribe(function () { return _this.getLastJobData(); });\n\t    };\n\t    TaskViewComponent.prototype.load = function () {\n\t        var _this = this;\n\t        this.hideAll();\n\t        if (this.globalService.loadingDelayTime > 0) {\n\t            this.showLoading = true;\n\t        }\n\t        Rx_1.Observable.empty().delay(this.globalService.loadingDelayTime).subscribe(null, null, function () {\n\t            _this.getData();\n\t        });\n\t    };\n\t    TaskViewComponent.prototype.getData = function () {\n\t        var _this = this;\n\t        this.taskService.view(this.projectId, this.taskId)\n\t            .then(function (response) {\n\t            if (response != null && response.success == true) {\n\t                _this.project = response.data.project;\n\t                _this.task = response.data.task;\n\t                _this.hideAll();\n\t                if (_this.project != null && _this.task != null) {\n\t                    _this.showData = true;\n\t                }\n\t                else {\n\t                    _this.showEmptyData = true;\n\t                }\n\t            }\n\t            else {\n\t                _this.onError();\n\t            }\n\t        })\n\t            .catch(function () {\n\t            _this.onError();\n\t        });\n\t    };\n\t    TaskViewComponent.prototype.back = function () {\n\t        this.router.navigate(['/project/view', this.projectId]);\n\t    };\n\t    TaskViewComponent.prototype.hideAll = function () {\n\t        this.showData = false;\n\t        this.showEmptyData = false;\n\t        this.showLoading = false;\n\t        this.showError = false;\n\t        this.showTaskOptionsForm = false;\n\t    };\n\t    TaskViewComponent.prototype.hideAllForLastJob = function () {\n\t        this.showLastJobData = false;\n\t        this.showLastJobEmptyData = false;\n\t        this.showLastJobLoading = false;\n\t        this.showLastJobError = false;\n\t    };\n\t    TaskViewComponent.prototype.onError = function () {\n\t        this.hideAll();\n\t        this.showError = true;\n\t        this.project = null;\n\t    };\n\t    TaskViewComponent.prototype.onErrorForLastJob = function () {\n\t        this.hideAllForLastJob();\n\t        this.showLastJobError = true;\n\t        this.lastJob = null;\n\t    };\n\t    TaskViewComponent.prototype.view = function (projectId, taskId) {\n\t        this.router.navigate(['/task/view', projectId, taskId]);\n\t    };\n\t    TaskViewComponent.prototype.showTaskOptions = function (projectId, projectName, taskId, taskName, taskDescription) {\n\t        var _this = this;\n\t        this.showTaskOptionsForm = false;\n\t        this.runProjectId = projectId;\n\t        this.runProjectName = projectName;\n\t        this.runTaskId = taskId;\n\t        this.runTaskName = taskName;\n\t        this.runTaskDescription = taskDescription;\n\t        this.runTaskOptions = null;\n\t        this.taskService.options(projectId, taskId)\n\t            .then(function (response) {\n\t            if (response != null && response.success == true) {\n\t                _this.hideAll();\n\t                _this.runTaskOptions = response.data.options;\n\t                _this.showTaskOptionsForm = true;\n\t            }\n\t            else {\n\t                toastr.error('Error when get task options, try again');\n\t            }\n\t        })\n\t            .catch(function (error) {\n\t            toastr.error(error);\n\t        });\n\t    };\n\t    TaskViewComponent.prototype.taskRunWithSuccess = function ($event) {\n\t        this.hideAll();\n\t        this.showData = true;\n\t    };\n\t    TaskViewComponent.prototype.taskRunWithError = function ($event) {\n\t    };\n\t    TaskViewComponent.prototype.taskRunCancel = function ($event) {\n\t        this.hideAll();\n\t        this.showData = true;\n\t    };\n\t    TaskViewComponent.prototype.getLastJobData = function () {\n\t        var _this = this;\n\t        this.jobService.last(this.projectId, this.taskId)\n\t            .then(function (response) {\n\t            if (response != null && response.success == true) {\n\t                _this.lastJob = response.data.job;\n\t                if (_this.lastJob[\"id\"] != _this.lastJobId) {\n\t                    _this.lastJobId = _this.lastJob[\"id\"];\n\t                    _this.outputGroupList = [];\n\t                }\n\t                var newOutputGroupList = _this.lastJob.outputGroup;\n\t                var activeTabId = \"console\";\n\t                // add new tabs\n\t                if (newOutputGroupList) {\n\t                    for (var newOutputGroupKey in newOutputGroupList) {\n\t                        var newOutputGroup = newOutputGroupList[newOutputGroupKey];\n\t                        var hasOutputGroup = false;\n\t                        for (var outputGroupKey in _this.outputGroupList) {\n\t                            var outputGroup = _this.outputGroupList[outputGroupKey];\n\t                            if (outputGroup.name == newOutputGroup[\"name\"]) {\n\t                                hasOutputGroup = true;\n\t                                if (outputGroup.updatedAt != newOutputGroup[\"updatedAt\"]) {\n\t                                    outputGroup.updatedAt = newOutputGroup[\"updatedAt\"];\n\t                                    outputGroup.output = newOutputGroup[\"output\"];\n\t                                }\n\t                            }\n\t                        }\n\t                        if (!hasOutputGroup) {\n\t                            var outputGroup = new OutputGroup_1.OutputGroup();\n\t                            outputGroup.id = Utils_1.Utils.slugify(newOutputGroup[\"name\"]);\n\t                            outputGroup.name = newOutputGroup[\"name\"];\n\t                            outputGroup.output = newOutputGroup[\"output\"];\n\t                            outputGroup.updatedAt = newOutputGroup[\"updatedAt\"];\n\t                            _this.outputGroupList.push(outputGroup);\n\t                        }\n\t                    }\n\t                }\n\t                // select tab\n\t                for (var outputGroupKey in _this.outputGroupList) {\n\t                    var outputGroup = _this.outputGroupList[outputGroupKey];\n\t                    if (outputGroup.id == activeTabId) {\n\t                        outputGroup.active = true;\n\t                    }\n\t                    else {\n\t                        outputGroup.active = false;\n\t                    }\n\t                }\n\t                _this.hideAllForLastJob();\n\t                if (_this.lastJob != null) {\n\t                    _this.showLastJobData = true;\n\t                }\n\t                else {\n\t                    _this.showLastJobEmptyData = true;\n\t                }\n\t            }\n\t            else {\n\t                _this.onErrorForLastJob();\n\t            }\n\t        })\n\t            .catch(function () {\n\t            _this.onErrorForLastJob();\n\t        });\n\t    };\n\t    TaskViewComponent = __decorate([\n\t        core_1.Component({\n\t            selector: 'task-view',\n\t            template: __webpack_require__(378)\n\t        }), \n\t        __metadata('design:paramtypes', [GlobalService_1.GlobalService, TaskService_1.TaskService, JobService_1.JobService, router_1.Router, router_1.ActivatedRoute])\n\t    ], TaskViewComponent);\n\t    return TaskViewComponent;\n\t}());\n\texports.TaskViewComponent = TaskViewComponent;\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26)))\n\n/***/ },\n\n/***/ 376:\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar OutputGroup = (function () {\n\t    function OutputGroup() {\n\t    }\n\t    return OutputGroup;\n\t}());\n\texports.OutputGroup = OutputGroup;\n\n\n/***/ },\n\n/***/ 377:\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar Utils = (function () {\n\t    function Utils() {\n\t    }\n\t    Utils.formValuesEncoded = function (formValues) {\n\t        var formData = '';\n\t        if (formValues != null) {\n\t            for (var formKey in formValues) {\n\t                var formValue = formValues[formKey];\n\t                if (formData == '') {\n\t                    formData += formKey + \"=\" + formValue;\n\t                }\n\t                else {\n\t                    formData += \"&\" + formKey + \"=\" + formValue;\n\t                }\n\t            }\n\t        }\n\t        return formData;\n\t    };\n\t    Utils.slugify = function (text) {\n\t        return text.toString().toLowerCase()\n\t            .replace(/\\s+/g, '-') // Replace spaces with -\n\t            .replace(/[^\\w\\-]+/g, '') // Remove all non-word chars\n\t            .replace(/\\-\\-+/g, '-') // Replace multiple - with single -\n\t            .replace(/^-+/, '') // Trim - from start of text\n\t            .replace(/-+$/, ''); // Trim - from end of text\n\t    };\n\t    return Utils;\n\t}());\n\texports.Utils = Utils;\n\n\n/***/ },\n\n/***/ 378:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=\\\"task-view\\\">\\n\\n\\t<!-- OPTIONS -->\\n\\t<div id=\\\"options-container\\\" class=\\\"panel panel-default\\\">\\n\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t<h3 class=\\\"options-container-title\\\">Task {{task?.name}}</h3>\\n\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-success\\\" (click)=\\\"showTaskOptions(project.id, project.name, task.id, task.name, task.description)\\\">Run</button>\\n\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"load()\\\">Refresh</button>\\n\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"back()\\\">Back</button>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<!-- DATA -->\\n\\t<div id=\\\"data\\\" *ngIf=\\\"showData\\\">\\n\\t\\t<h5>Details</h5>\\n\\n\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t\\t<div><strong>Project:</strong> {{project.name}}</div>\\n\\t\\t\\t\\t<div><strong>Task:</strong> {{task.name}}</div>\\n\\t\\t\\t\\t<div><strong>Description:</strong> {{task.description}}</div>\\n\\t\\t\\t\\t<div><strong>Steps:</strong> {{task.steps?.length}}</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\n\\t\\t<h5 *ngIf=\\\"project.tasks?.length > 0\\\">Tasks</h5>\\n\\n\\t\\t<div id=\\\"project-task-list\\\" class=\\\"list-group\\\" *ngIf=\\\"project.tasks?.length > 0\\\">\\n\\t\\t\\t<div *ngFor=\\\"let task of project.tasks\\\" class=\\\"project-task-row list-group-item\\\">\\n\\t\\t\\t\\t<h4 class=\\\"list-group-item-heading\\\">{{task.name}}</h4>\\n\\t\\t\\t\\t<div class=\\\"list-group-item-text\\\">\\n\\t\\t\\t\\t\\t<p>\\n\\t\\t\\t\\t\\t\\t<strong>Description:</strong>{{task.description}}\\n\\t\\t\\t\\t\\t\\t<br/>\\n\\t\\t\\t\\t\\t\\t<strong>Steps:</strong>{{task.steps?.length}}\\n\\t\\t\\t\\t\\t</p>\\n\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-success\\\" (click)=\\\"showTaskOptions(project.id, project.name, task.id, task.name, task.description)\\\">Run</button>\\n\\t\\t\\t\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"view(project.id, task.id)\\\">View</button>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<div id=\\\"no-data\\\" *ngIf=\\\"showEmptyData\\\">\\n\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t\\t<div>Project not found</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<div id=\\\"error-data\\\" *ngIf=\\\"showError\\\">\\n\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t\\t<h3>Problem while loading project</h3>\\n\\t\\t\\t\\t<p id=\\\"error-data-message\\\"></p>\\n\\t\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"back()\\\">Back</button>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<div id=\\\"loading-data\\\" *ngIf=\\\"showLoading\\\">\\n\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t<div class=\\\"panel-body\\\">Loading...</div>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<div id=\\\"ph-project-task-last-job-data\\\" *ngIf=\\\"showLastJobData\\\">\\n\\t\\t<h5>Last job data</h5>\\n\\n\\t\\t<div class=\\\"ph-project-task-last-job-details\\\">\\n\\t\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t<strong>Job: </strong> {{lastJob.id}}\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t<strong>Created at:</strong> {{lastJob.createdAt | timestampFormat}}\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t<strong>Started at:</strong> {{lastJob.startedAt | timestampFormat}}\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t<strong>Finished at:</strong> {{lastJob.finishedAt | timestampFormat}}\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t<strong>Duration:</strong> {{lastJob.duration}}s\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t<strong>Status:</strong>\\n\\t\\t\\t\\t\\t\\t<span [ngSwitch]=\\\"lastJob?.status\\\">\\n\\t\\t\\t\\t\\t\\t\\t<span *ngSwitchCase=\\\"'onqueue'\\\" class=\\\"label label-primary\\\">{{lastJob.status}}</span>\\n\\t\\t\\t\\t\\t\\t\\t<span *ngSwitchCase=\\\"'running'\\\" class=\\\"label label-warning\\\">{{lastJob.status}}</span>\\n\\t\\t\\t\\t\\t\\t\\t<span *ngSwitchCase=\\\"'success'\\\" class=\\\"label label-success\\\">{{lastJob.status}}</span>\\n\\t\\t\\t\\t\\t\\t\\t<span *ngSwitchCase=\\\"'error'\\\" class=\\\"label label-danger\\\">{{lastJob.status}}</span>\\n\\t\\t\\t\\t\\t\\t\\t<span *ngSwitchDefault class=\\\"label label-success\\\">{{lastJob.status}}</span>\\n\\t\\t\\t\\t\\t\\t</span>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t<strong>Progress:</strong>\\n\\t\\t\\t\\t\\t\\t<div class=\\\"progress\\\">\\n\\t\\t\\t\\t\\t\\t\\t<span [ngSwitch]=\\\"lastJob.status\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<div *ngSwitchCase=\\\"'onqueue'\\\" class=\\\"active progress-bar progress-bar-info\\\" role=\\\"progressbar\\\" [attr.aria-valuenow]=\\\"lastJob.progress\\\" aria-valuemin=\\\"0\\\" aria-valuemax=\\\"100\\\" [style.width]=\\\"lastJob.progress + '%'\\\" style=\\\"min-width: 2em\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{{lastJob.progress}}%\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t<div *ngSwitchCase=\\\"'success'\\\" class=\\\"active progress-bar progress-bar-success\\\" role=\\\"progressbar\\\" [attr.aria-valuenow]=\\\"lastJob.progress\\\" aria-valuemin=\\\"0\\\" aria-valuemax=\\\"100\\\" [style.width]=\\\"lastJob.progress + '%'\\\" style=\\\"min-width: 2em\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{{lastJob.progress}}%\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t<div *ngSwitchCase=\\\"'running'\\\" class=\\\"active progress-bar progress-bar-striped progress-bar-warning\\\" role=\\\"progressbar\\\" [attr.aria-valuenow]=\\\"lastJob.progress\\\" aria-valuemin=\\\"0\\\" aria-valuemax=\\\"100\\\" [style.width]=\\\"lastJob.progress + '%'\\\" style=\\\"min-width: 2em\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{{lastJob.progress}}%\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t<div *ngSwitchCase=\\\"'error'\\\" class=\\\"active progress-bar progress-bar-danger\\\" role=\\\"progressbar\\\" [attr.aria-valuenow]=\\\"lastJob.progress\\\" aria-valuemin=\\\"0\\\" aria-valuemax=\\\"100\\\" [style.width]=\\\"lastJob.progress + '%'\\\" style=\\\"min-width: 2em\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{{lastJob.progress}}%\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t<div *ngSwitchDefault class=\\\"active progress-bar progress-bar-success\\\" role=\\\"progressbar\\\" [attr.aria-valuenow]=\\\"lastJob.progress\\\" aria-valuemin=\\\"0\\\" aria-valuemax=\\\"100\\\" [style.width]=\\\"lastJob.progress + '%'\\\" style=\\\"min-width: 2em\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{{lastJob.progress}}%\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t</span>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t\\t<div>\\n\\t\\t\\t<ul class=\\\"ph-project-task-last-job-tabs nav nav-tabs\\\" role=\\\"tablist\\\">\\n\\t\\t\\t\\t<li role=\\\"presentation\\\" *ngFor=\\\"let outputGroup of outputGroupList\\\" [class.active]=\\\"outputGroup.active\\\">\\n\\t\\t\\t\\t\\t<a id=\\\"tab-{{outputGroup.id}}\\\" href=\\\"#tab-content-{{outputGroup.id}}\\\" [attr.aria-controls]=\\\"'tab-content-'+ outputGroup.id\\\" role=\\\"tab\\\" data-toggle=\\\"tab\\\">{{outputGroup.name}}</a>\\n\\t\\t\\t\\t</li>\\n\\t\\t\\t</ul>\\n\\t\\t\\t<div class=\\\"tab-content ph-project-task-last-job-tab-contents\\\">\\n\\t\\t\\t\\t<div role=\\\"tabpanel\\\" class=\\\"tab-pane tab-pane-output-group\\\" id=\\\"tab-content-{{outputGroup.id}}\\\" *ngFor=\\\"let outputGroup of outputGroupList\\\" [class.active]=\\\"outputGroup.active\\\">\\n\\t\\t\\t\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t\\t\\t\\t<div id=\\\"tab-content-body-{{outputGroup.id}}\\\" class=\\\"panel-body\\\" [innerHTML]=\\\"outputGroup.output\\\"></div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<div id=\\\"ph-project-task-last-job-no-data\\\" *ngIf=\\\"showLastJobEmptyData\\\">\\n\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t\\t<div>Last job not found</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<div id=\\\"ph-project-task-last-job-error-data\\\" *ngIf=\\\"showLastJobError\\\">\\n\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t\\t<h3>Problem while loading last job data</h3>\\n\\t\\t\\t\\t<p id=\\\"ph-project-task-last-job-error-data-message\\\"></p>\\n\\t\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"getLastJobData()\\\">Try again</button>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<div id=\\\"ph-project-task-last-job-loading-data\\\" *ngIf=\\\"showLastJobLoading\\\">\\n\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t<div class=\\\"panel-body\\\">Loading last job data...</div>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<task-options *ngIf=\\\"showTaskOptionsForm\\\" [projectId]=\\\"runProjectId\\\" [projectName]=\\\"runProjectName\\\" [taskId]=\\\"runTaskId\\\" [taskName]=\\\"runTaskName\\\" [taskDescription]=\\\"runTaskDescription\\\" [options]=\\\"runTaskOptions\\\" (taskRunWithSuccess)=\\\"taskRunWithSuccess($event)\\\" (taskRunWithError)=\\\"taskRunWithError($event)\\\" (taskRunCancel)=\\\"taskRunCancel($event)\\\"></task-options>\\n\\n</div>\\n\";\n\n/***/ },\n\n/***/ 379:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\n\t};\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n\t};\n\tvar core_1 = __webpack_require__(4);\n\tvar GlobalService_1 = __webpack_require__(30);\n\tvar AppHeaderComponent = (function () {\n\t    function AppHeaderComponent(globalService) {\n\t        var _this = this;\n\t        this.globalService = globalService;\n\t        this.jobs = 0;\n\t        globalService.jobsCountEmitter.subscribe(function (value) {\n\t            _this.jobs = value;\n\t        });\n\t    }\n\t    AppHeaderComponent = __decorate([\n\t        core_1.Component({\n\t            selector: 'app-header',\n\t            template: __webpack_require__(380),\n\t            styles: [__webpack_require__(382)]\n\t        }), \n\t        __metadata('design:paramtypes', [GlobalService_1.GlobalService])\n\t    ], AppHeaderComponent);\n\t    return AppHeaderComponent;\n\t}());\n\texports.AppHeaderComponent = AppHeaderComponent;\n\n\n/***/ },\n\n/***/ 380:\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = \"<nav class=\\\"navbar navbar-default navbar-fixed-top\\\">\\n\\t<div class=\\\"container-fluid\\\">\\n\\t\\t<div class=\\\"navbar-header\\\">\\n\\t\\t\\t<button type=\\\"button\\\" class=\\\"navbar-toggle collapsed\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#nav-collapse\\\" aria-expanded=\\\"false\\\" aria-controls=\\\"navbar\\\">\\n\\t\\t\\t\\t<span class=\\\"sr-only\\\">Toggle navigation</span>\\n\\t\\t\\t\\t<span class=\\\"icon-bar\\\"></span>\\n\\t\\t\\t\\t<span class=\\\"icon-bar\\\"></span>\\n\\t\\t\\t\\t<span class=\\\"icon-bar\\\"></span>\\n\\t\\t\\t</button>\\n\\t\\t\\t<a class=\\\"navbar-brand\\\" routerLink=\\\"/home\\\" href=\\\"javascript: void(0);\\\">\\n\\t\\t\\t\\t<img src=\\\"\" + __webpack_require__(381) + \"\\\" border=\\\"0\\\" alt=\\\"\\\" class=\\\"logo pull-left\\\"/>\\n\\t\\t\\t\\tGoCI\\n\\t\\t\\t</a>\\n\\t\\t</div>\\n\\t\\t<div id=\\\"nav-collapse\\\" class=\\\"collapse navbar-collapse\\\">\\n\\n\\t\\t\\t<ul class=\\\"nav navbar-nav navbar-right\\\">\\n\\t\\t\\t\\t<li>\\n\\t\\t\\t\\t\\t<a routerLink=\\\"/job/list\\\" href=\\\"javascript: void(0);\\\">\\n\\t\\t\\t\\t\\t\\t<span class=\\\"ph-job-running-list-count\\\">{{jobs}}</span>\\n\\t\\t\\t\\t\\t\\t<span class=\\\"ph-job-running-list-text\\\">jobs</span>\\n\\t\\t\\t\\t\\t</a>\\n\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t<li>\\n\\t\\t\\t\\t\\t<a routerLink=\\\"/home\\\" href=\\\"javascript: void(0);\\\">Home</a>\\n\\t\\t\\t\\t</li>\\n\\t\\t\\t</ul>\\n\\n\\t\\t</div>\\n\\t</div>\\n</nav>\";\n\n/***/ },\n\n/***/ 381:\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__.p + \"assets/logo-header.80fc2d1dfb692e9d0fdaeedf027bec3c.png\";\n\n/***/ },\n\n/***/ 382:\n/***/ function(module, exports) {\n\n\tmodule.exports = \".navbar {\\n\\tbackground-color: #205081;\\n}\\n\\n.navbar .container-fluid {\\n\\tbackground-color: #205081;\\n}\\n\\n.navbar-default {\\n\\tborder-bottom: 2px #3d96f3;\\n\\tcolor: #fff;\\n}\\n\\n.navbar-default .navbar-nav > li > a,\\n.navbar-default .navbar-brand {\\n\\tcolor: #fff;\\n}\\n\\n.navbar-default .navbar-toggle {\\n\\tborder-color: #fff;\\n}\\n\\n.navbar-default .navbar-toggle .icon-bar {\\n\\tbackground-color: #fff;\\n}\\n\\n.navbar-default .navbar-brand:hover {\\n\\tcolor: #3d96f3;\\n}\\n.navbar-default .navbar-brand:focus {\\n\\tcolor: #fff;\\n}\\n\\n.navbar .brand, .navbar .nav > li > a:hover {\\n\\tcolor: #3d96f3;\\n}\\n\\n.navbar .brand, .navbar .nav > li > a:focus {\\n\\tcolor: #fff;\\n}\\n\\n.navbar-default .navbar-collapse, .navbar-default .navbar-form {\\n\\tborder: 0 transparent;\\n\\tbox-shadow: none;\\n}\\n\\n.navbar-brand .logo {\\n\\twidth: 28px;\\n\\tmargin-top: -5px;\\n\\tmargin-right: 10px;\\n}\"\n\n/***/ },\n\n/***/ 383:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\n\t};\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n\t};\n\tvar core_1 = __webpack_require__(4);\n\tvar AppFooterComponent = (function () {\n\t    function AppFooterComponent() {\n\t    }\n\t    AppFooterComponent = __decorate([\n\t        core_1.Component({\n\t            selector: 'app-footer',\n\t            template: __webpack_require__(384),\n\t            styles: [__webpack_require__(385)]\n\t        }), \n\t        __metadata('design:paramtypes', [])\n\t    ], AppFooterComponent);\n\t    return AppFooterComponent;\n\t}());\n\texports.AppFooterComponent = AppFooterComponent;\n\n\n/***/ },\n\n/***/ 384:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<footer class=\\\"footer\\\">\\n\\t<div class=\\\"container\\\">\\n\\t\\t<p class=\\\"pull-left\\\">&copy; GoCI</p>\\n\\t\\t<p class=\\\"pull-right\\\">Created By:\\n\\t\\t\\t<a href=\\\"http://www.pcoutinho.com\\\" title=\\\"Paulo Coutinho\\\" target=\\\"_blank\\\">Paulo Coutinho</a>\\n\\t\\t</p>\\n\\t</div>\\n</footer>\";\n\n/***/ },\n\n/***/ 385:\n/***/ function(module, exports) {\n\n\tmodule.exports = \".footer {\\n\\theight: 60px;\\n\\tbackground-color: #f5f5f5;\\n\\tborder-top: 1px solid #ddd;\\n\\tpadding-top: 20px;\\n}\\n\\n.no-footer {\\n\\tdisplay: none;\\n}\"\n\n/***/ },\n\n/***/ 386:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {/**\n\t * @license Angular v2.0.0-rc.6\n\t * (c) 2010-2016 Google, Inc. https://angular.io/\n\t * License: MIT\n\t */\n\t(function (global, factory) {\n\t     true ? factory(exports, __webpack_require__(4), __webpack_require__(34), __webpack_require__(5), __webpack_require__(6), __webpack_require__(82)) :\n\t    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'rxjs/operator/toPromise', 'rxjs/Subject', 'rxjs/Observable', 'rxjs/observable/fromPromise'], factory) :\n\t    (factory((global.ng = global.ng || {}, global.ng.forms = global.ng.forms || {}),global.ng.core,global.Rx.Observable.prototype,global.Rx,global.Rx,global.Rx.Observable));\n\t}(this, function (exports,_angular_core,rxjs_operator_toPromise,rxjs_Subject,rxjs_Observable,rxjs_observable_fromPromise) { 'use strict';\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var globalScope;\n\t    if (typeof window === 'undefined') {\n\t        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {\n\t            // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492\n\t            globalScope = self;\n\t        }\n\t        else {\n\t            globalScope = global;\n\t        }\n\t    }\n\t    else {\n\t        globalScope = window;\n\t    }\n\t    // Need to declare a new variable for global here since TypeScript\n\t    // exports the original value of the symbol.\n\t    var global$1 = globalScope;\n\t    // TODO: remove calls to assert in production environment\n\t    // Note: Can't just export this and import in in other files\n\t    // as `assert` is a reserved keyword in Dart\n\t    global$1.assert = function assert(condition) {\n\t        // TODO: to be fixed properly via #2830, noop for now\n\t    };\n\t    function isPresent(obj) {\n\t        return obj !== undefined && obj !== null;\n\t    }\n\t    function isBlank(obj) {\n\t        return obj === undefined || obj === null;\n\t    }\n\t    function isString(obj) {\n\t        return typeof obj === 'string';\n\t    }\n\t    function isFunction(obj) {\n\t        return typeof obj === 'function';\n\t    }\n\t    function isStringMap(obj) {\n\t        return typeof obj === 'object' && obj !== null;\n\t    }\n\t    function isPromise(obj) {\n\t        // allow any Promise/A+ compliant thenable.\n\t        // It's up to the caller to ensure that obj.then conforms to the spec\n\t        return isPresent(obj) && isFunction(obj.then);\n\t    }\n\t    function isArray(obj) {\n\t        return Array.isArray(obj);\n\t    }\n\t    var StringWrapper = (function () {\n\t        function StringWrapper() {\n\t        }\n\t        StringWrapper.fromCharCode = function (code) { return String.fromCharCode(code); };\n\t        StringWrapper.charCodeAt = function (s, index) { return s.charCodeAt(index); };\n\t        StringWrapper.split = function (s, regExp) { return s.split(regExp); };\n\t        StringWrapper.equals = function (s, s2) { return s === s2; };\n\t        StringWrapper.stripLeft = function (s, charVal) {\n\t            if (s && s.length) {\n\t                var pos = 0;\n\t                for (var i = 0; i < s.length; i++) {\n\t                    if (s[i] != charVal)\n\t                        break;\n\t                    pos++;\n\t                }\n\t                s = s.substring(pos);\n\t            }\n\t            return s;\n\t        };\n\t        StringWrapper.stripRight = function (s, charVal) {\n\t            if (s && s.length) {\n\t                var pos = s.length;\n\t                for (var i = s.length - 1; i >= 0; i--) {\n\t                    if (s[i] != charVal)\n\t                        break;\n\t                    pos--;\n\t                }\n\t                s = s.substring(0, pos);\n\t            }\n\t            return s;\n\t        };\n\t        StringWrapper.replace = function (s, from, replace) {\n\t            return s.replace(from, replace);\n\t        };\n\t        StringWrapper.replaceAll = function (s, from, replace) {\n\t            return s.replace(from, replace);\n\t        };\n\t        StringWrapper.slice = function (s, from, to) {\n\t            if (from === void 0) { from = 0; }\n\t            if (to === void 0) { to = null; }\n\t            return s.slice(from, to === null ? undefined : to);\n\t        };\n\t        StringWrapper.replaceAllMapped = function (s, from, cb) {\n\t            return s.replace(from, function () {\n\t                var matches = [];\n\t                for (var _i = 0; _i < arguments.length; _i++) {\n\t                    matches[_i - 0] = arguments[_i];\n\t                }\n\t                // Remove offset & string from the result array\n\t                matches.splice(-2, 2);\n\t                // The callback receives match, p1, ..., pn\n\t                return cb(matches);\n\t            });\n\t        };\n\t        StringWrapper.contains = function (s, substr) { return s.indexOf(substr) != -1; };\n\t        StringWrapper.compare = function (a, b) {\n\t            if (a < b) {\n\t                return -1;\n\t            }\n\t            else if (a > b) {\n\t                return 1;\n\t            }\n\t            else {\n\t                return 0;\n\t            }\n\t        };\n\t        return StringWrapper;\n\t    }());\n\t    var NumberWrapper = (function () {\n\t        function NumberWrapper() {\n\t        }\n\t        NumberWrapper.toFixed = function (n, fractionDigits) { return n.toFixed(fractionDigits); };\n\t        NumberWrapper.equal = function (a, b) { return a === b; };\n\t        NumberWrapper.parseIntAutoRadix = function (text) {\n\t            var result = parseInt(text);\n\t            if (isNaN(result)) {\n\t                throw new Error('Invalid integer literal when parsing ' + text);\n\t            }\n\t            return result;\n\t        };\n\t        NumberWrapper.parseInt = function (text, radix) {\n\t            if (radix == 10) {\n\t                if (/^(\\-|\\+)?[0-9]+$/.test(text)) {\n\t                    return parseInt(text, radix);\n\t                }\n\t            }\n\t            else if (radix == 16) {\n\t                if (/^(\\-|\\+)?[0-9ABCDEFabcdef]+$/.test(text)) {\n\t                    return parseInt(text, radix);\n\t                }\n\t            }\n\t            else {\n\t                var result = parseInt(text, radix);\n\t                if (!isNaN(result)) {\n\t                    return result;\n\t                }\n\t            }\n\t            throw new Error('Invalid integer literal when parsing ' + text + ' in base ' + radix);\n\t        };\n\t        // TODO: NaN is a valid literal but is returned by parseFloat to indicate an error.\n\t        NumberWrapper.parseFloat = function (text) { return parseFloat(text); };\n\t        Object.defineProperty(NumberWrapper, \"NaN\", {\n\t            get: function () { return NaN; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        NumberWrapper.isNumeric = function (value) { return !isNaN(value - parseFloat(value)); };\n\t        NumberWrapper.isNaN = function (value) { return isNaN(value); };\n\t        NumberWrapper.isInteger = function (value) { return Number.isInteger(value); };\n\t        return NumberWrapper;\n\t    }());\n\t    // JS has NaN !== NaN\n\t    function looseIdentical(a, b) {\n\t        return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n\t    }\n\t    function normalizeBool(obj) {\n\t        return isBlank(obj) ? false : obj;\n\t    }\n\t    function isJsObject(o) {\n\t        return o !== null && (typeof o === 'function' || typeof o === 'object');\n\t    }\n\t    function isPrimitive(obj) {\n\t        return !isJsObject(obj);\n\t    }\n\t    function hasConstructor(value, type) {\n\t        return value.constructor === type;\n\t    }\n\t\n\t    /**\n\t     * Base class for control directives.\n\t     *\n\t     * Only used internally in the forms module.\n\t     *\n\t     * @stable\n\t     */\n\t    var AbstractControlDirective = (function () {\n\t        function AbstractControlDirective() {\n\t        }\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"control\", {\n\t            get: function () { throw new Error('unimplemented'); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"value\", {\n\t            get: function () { return isPresent(this.control) ? this.control.value : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"valid\", {\n\t            get: function () { return isPresent(this.control) ? this.control.valid : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"invalid\", {\n\t            get: function () { return isPresent(this.control) ? this.control.invalid : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"pending\", {\n\t            get: function () { return isPresent(this.control) ? this.control.pending : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"errors\", {\n\t            get: function () {\n\t                return isPresent(this.control) ? this.control.errors : null;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"pristine\", {\n\t            get: function () { return isPresent(this.control) ? this.control.pristine : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"dirty\", {\n\t            get: function () { return isPresent(this.control) ? this.control.dirty : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"touched\", {\n\t            get: function () { return isPresent(this.control) ? this.control.touched : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"untouched\", {\n\t            get: function () { return isPresent(this.control) ? this.control.untouched : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"disabled\", {\n\t            get: function () { return isPresent(this.control) ? this.control.disabled : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"enabled\", {\n\t            get: function () { return isPresent(this.control) ? this.control.enabled : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"statusChanges\", {\n\t            get: function () {\n\t                return isPresent(this.control) ? this.control.statusChanges : null;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"valueChanges\", {\n\t            get: function () {\n\t                return isPresent(this.control) ? this.control.valueChanges : null;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlDirective.prototype, \"path\", {\n\t            get: function () { return null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        AbstractControlDirective.prototype.reset = function (value) {\n\t            if (value === void 0) { value = undefined; }\n\t            if (isPresent(this.control))\n\t                this.control.reset(value);\n\t        };\n\t        return AbstractControlDirective;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$1 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * A directive that contains multiple {@link NgControl}s.\n\t     *\n\t     * Only used by the forms module.\n\t     *\n\t     * @stable\n\t     */\n\t    var ControlContainer = (function (_super) {\n\t        __extends$1(ControlContainer, _super);\n\t        function ControlContainer() {\n\t            _super.apply(this, arguments);\n\t        }\n\t        Object.defineProperty(ControlContainer.prototype, \"formDirective\", {\n\t            /**\n\t             * Get the form to which this container belongs.\n\t             */\n\t            get: function () { return null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ControlContainer.prototype, \"path\", {\n\t            /**\n\t             * Get the path to this container.\n\t             */\n\t            get: function () { return null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return ControlContainer;\n\t    }(AbstractControlDirective));\n\t\n\t    var Map$1 = global$1.Map;\n\t    var Set = global$1.Set;\n\t    // Safari and Internet Explorer do not support the iterable parameter to the\n\t    // Map constructor.  We work around that by manually adding the items.\n\t    var createMapFromPairs = (function () {\n\t        try {\n\t            if (new Map$1([[1, 2]]).size === 1) {\n\t                return function createMapFromPairs(pairs) { return new Map$1(pairs); };\n\t            }\n\t        }\n\t        catch (e) {\n\t        }\n\t        return function createMapAndPopulateFromPairs(pairs) {\n\t            var map = new Map$1();\n\t            for (var i = 0; i < pairs.length; i++) {\n\t                var pair = pairs[i];\n\t                map.set(pair[0], pair[1]);\n\t            }\n\t            return map;\n\t        };\n\t    })();\n\t    var createMapFromMap = (function () {\n\t        try {\n\t            if (new Map$1(new Map$1())) {\n\t                return function createMapFromMap(m) { return new Map$1(m); };\n\t            }\n\t        }\n\t        catch (e) {\n\t        }\n\t        return function createMapAndPopulateFromMap(m) {\n\t            var map = new Map$1();\n\t            m.forEach(function (v, k) { map.set(k, v); });\n\t            return map;\n\t        };\n\t    })();\n\t    var _clearValues = (function () {\n\t        if ((new Map$1()).keys().next) {\n\t            return function _clearValues(m) {\n\t                var keyIterator = m.keys();\n\t                var k;\n\t                while (!((k = keyIterator.next()).done)) {\n\t                    m.set(k.value, null);\n\t                }\n\t            };\n\t        }\n\t        else {\n\t            return function _clearValuesWithForeEach(m) {\n\t                m.forEach(function (v, k) { m.set(k, null); });\n\t            };\n\t        }\n\t    })();\n\t    // Safari doesn't implement MapIterator.next(), which is used is Traceur's polyfill of Array.from\n\t    // TODO(mlaval): remove the work around once we have a working polyfill of Array.from\n\t    var _arrayFromMap = (function () {\n\t        try {\n\t            if ((new Map$1()).values().next) {\n\t                return function createArrayFromMap(m, getValues) {\n\t                    return getValues ? Array.from(m.values()) : Array.from(m.keys());\n\t                };\n\t            }\n\t        }\n\t        catch (e) {\n\t        }\n\t        return function createArrayFromMapWithForeach(m, getValues) {\n\t            var res = ListWrapper.createFixedSize(m.size), i = 0;\n\t            m.forEach(function (v, k) {\n\t                res[i] = getValues ? v : k;\n\t                i++;\n\t            });\n\t            return res;\n\t        };\n\t    })();\n\t    var MapWrapper = (function () {\n\t        function MapWrapper() {\n\t        }\n\t        MapWrapper.clone = function (m) { return createMapFromMap(m); };\n\t        MapWrapper.createFromStringMap = function (stringMap) {\n\t            var result = new Map$1();\n\t            for (var prop in stringMap) {\n\t                result.set(prop, stringMap[prop]);\n\t            }\n\t            return result;\n\t        };\n\t        MapWrapper.toStringMap = function (m) {\n\t            var r = {};\n\t            m.forEach(function (v, k) { return r[k] = v; });\n\t            return r;\n\t        };\n\t        MapWrapper.createFromPairs = function (pairs) { return createMapFromPairs(pairs); };\n\t        MapWrapper.clearValues = function (m) { _clearValues(m); };\n\t        MapWrapper.iterable = function (m) { return m; };\n\t        MapWrapper.keys = function (m) { return _arrayFromMap(m, false); };\n\t        MapWrapper.values = function (m) { return _arrayFromMap(m, true); };\n\t        return MapWrapper;\n\t    }());\n\t    /**\n\t     * Wraps Javascript Objects\n\t     */\n\t    var StringMapWrapper = (function () {\n\t        function StringMapWrapper() {\n\t        }\n\t        StringMapWrapper.create = function () {\n\t            // Note: We are not using Object.create(null) here due to\n\t            // performance!\n\t            // http://jsperf.com/ng2-object-create-null\n\t            return {};\n\t        };\n\t        StringMapWrapper.contains = function (map, key) {\n\t            return map.hasOwnProperty(key);\n\t        };\n\t        StringMapWrapper.get = function (map, key) {\n\t            return map.hasOwnProperty(key) ? map[key] : undefined;\n\t        };\n\t        StringMapWrapper.set = function (map, key, value) { map[key] = value; };\n\t        StringMapWrapper.keys = function (map) { return Object.keys(map); };\n\t        StringMapWrapper.values = function (map) {\n\t            return Object.keys(map).map(function (k) { return map[k]; });\n\t        };\n\t        StringMapWrapper.isEmpty = function (map) {\n\t            for (var prop in map) {\n\t                return false;\n\t            }\n\t            return true;\n\t        };\n\t        StringMapWrapper.delete = function (map, key) { delete map[key]; };\n\t        StringMapWrapper.forEach = function (map, callback) {\n\t            for (var _i = 0, _a = Object.keys(map); _i < _a.length; _i++) {\n\t                var k = _a[_i];\n\t                callback(map[k], k);\n\t            }\n\t        };\n\t        StringMapWrapper.merge = function (m1, m2) {\n\t            var m = {};\n\t            for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {\n\t                var k = _a[_i];\n\t                m[k] = m1[k];\n\t            }\n\t            for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {\n\t                var k = _c[_b];\n\t                m[k] = m2[k];\n\t            }\n\t            return m;\n\t        };\n\t        StringMapWrapper.equals = function (m1, m2) {\n\t            var k1 = Object.keys(m1);\n\t            var k2 = Object.keys(m2);\n\t            if (k1.length != k2.length) {\n\t                return false;\n\t            }\n\t            var key;\n\t            for (var i = 0; i < k1.length; i++) {\n\t                key = k1[i];\n\t                if (m1[key] !== m2[key]) {\n\t                    return false;\n\t                }\n\t            }\n\t            return true;\n\t        };\n\t        return StringMapWrapper;\n\t    }());\n\t    var ListWrapper = (function () {\n\t        function ListWrapper() {\n\t        }\n\t        // JS has no way to express a statically fixed size list, but dart does so we\n\t        // keep both methods.\n\t        ListWrapper.createFixedSize = function (size) { return new Array(size); };\n\t        ListWrapper.createGrowableSize = function (size) { return new Array(size); };\n\t        ListWrapper.clone = function (array) { return array.slice(0); };\n\t        ListWrapper.forEachWithIndex = function (array, fn) {\n\t            for (var i = 0; i < array.length; i++) {\n\t                fn(array[i], i);\n\t            }\n\t        };\n\t        ListWrapper.first = function (array) {\n\t            if (!array)\n\t                return null;\n\t            return array[0];\n\t        };\n\t        ListWrapper.last = function (array) {\n\t            if (!array || array.length == 0)\n\t                return null;\n\t            return array[array.length - 1];\n\t        };\n\t        ListWrapper.indexOf = function (array, value, startIndex) {\n\t            if (startIndex === void 0) { startIndex = 0; }\n\t            return array.indexOf(value, startIndex);\n\t        };\n\t        ListWrapper.contains = function (list, el) { return list.indexOf(el) !== -1; };\n\t        ListWrapper.reversed = function (array) {\n\t            var a = ListWrapper.clone(array);\n\t            return a.reverse();\n\t        };\n\t        ListWrapper.concat = function (a, b) { return a.concat(b); };\n\t        ListWrapper.insert = function (list, index, value) { list.splice(index, 0, value); };\n\t        ListWrapper.removeAt = function (list, index) {\n\t            var res = list[index];\n\t            list.splice(index, 1);\n\t            return res;\n\t        };\n\t        ListWrapper.removeAll = function (list, items) {\n\t            for (var i = 0; i < items.length; ++i) {\n\t                var index = list.indexOf(items[i]);\n\t                list.splice(index, 1);\n\t            }\n\t        };\n\t        ListWrapper.remove = function (list, el) {\n\t            var index = list.indexOf(el);\n\t            if (index > -1) {\n\t                list.splice(index, 1);\n\t                return true;\n\t            }\n\t            return false;\n\t        };\n\t        ListWrapper.clear = function (list) { list.length = 0; };\n\t        ListWrapper.isEmpty = function (list) { return list.length == 0; };\n\t        ListWrapper.fill = function (list, value, start, end) {\n\t            if (start === void 0) { start = 0; }\n\t            if (end === void 0) { end = null; }\n\t            list.fill(value, start, end === null ? list.length : end);\n\t        };\n\t        ListWrapper.equals = function (a, b) {\n\t            if (a.length != b.length)\n\t                return false;\n\t            for (var i = 0; i < a.length; ++i) {\n\t                if (a[i] !== b[i])\n\t                    return false;\n\t            }\n\t            return true;\n\t        };\n\t        ListWrapper.slice = function (l, from, to) {\n\t            if (from === void 0) { from = 0; }\n\t            if (to === void 0) { to = null; }\n\t            return l.slice(from, to === null ? undefined : to);\n\t        };\n\t        ListWrapper.splice = function (l, from, length) { return l.splice(from, length); };\n\t        ListWrapper.sort = function (l, compareFn) {\n\t            if (isPresent(compareFn)) {\n\t                l.sort(compareFn);\n\t            }\n\t            else {\n\t                l.sort();\n\t            }\n\t        };\n\t        ListWrapper.toString = function (l) { return l.toString(); };\n\t        ListWrapper.toJSON = function (l) { return JSON.stringify(l); };\n\t        ListWrapper.maximum = function (list, predicate) {\n\t            if (list.length == 0) {\n\t                return null;\n\t            }\n\t            var solution = null;\n\t            var maxValue = -Infinity;\n\t            for (var index = 0; index < list.length; index++) {\n\t                var candidate = list[index];\n\t                if (isBlank(candidate)) {\n\t                    continue;\n\t                }\n\t                var candidateValue = predicate(candidate);\n\t                if (candidateValue > maxValue) {\n\t                    solution = candidate;\n\t                    maxValue = candidateValue;\n\t                }\n\t            }\n\t            return solution;\n\t        };\n\t        ListWrapper.flatten = function (list) {\n\t            var target = [];\n\t            _flattenArray(list, target);\n\t            return target;\n\t        };\n\t        ListWrapper.addAll = function (list, source) {\n\t            for (var i = 0; i < source.length; i++) {\n\t                list.push(source[i]);\n\t            }\n\t        };\n\t        return ListWrapper;\n\t    }());\n\t    function _flattenArray(source, target) {\n\t        if (isPresent(source)) {\n\t            for (var i = 0; i < source.length; i++) {\n\t                var item = source[i];\n\t                if (isArray(item)) {\n\t                    _flattenArray(item, target);\n\t                }\n\t                else {\n\t                    target.push(item);\n\t                }\n\t            }\n\t        }\n\t        return target;\n\t    }\n\t    // Safari and Internet Explorer do not support the iterable parameter to the\n\t    // Set constructor.  We work around that by manually adding the items.\n\t    var createSetFromList = (function () {\n\t        var test = new Set([1, 2, 3]);\n\t        if (test.size === 3) {\n\t            return function createSetFromList(lst) { return new Set(lst); };\n\t        }\n\t        else {\n\t            return function createSetAndPopulateFromList(lst) {\n\t                var res = new Set(lst);\n\t                if (res.size !== lst.length) {\n\t                    for (var i = 0; i < lst.length; i++) {\n\t                        res.add(lst[i]);\n\t                    }\n\t                }\n\t                return res;\n\t            };\n\t        }\n\t    })();\n\t\n\t    /**\n\t     * Providers for validators to be used for {@link FormControl}s in a form.\n\t     *\n\t     * Provide this using `multi: true` to add validators.\n\t     *\n\t     * ### Example\n\t     *\n\t     * {@example core/forms/ts/ng_validators/ng_validators.ts region='ng_validators'}\n\t     * @stable\n\t     */\n\t    var NG_VALIDATORS = new _angular_core.OpaqueToken('NgValidators');\n\t    /**\n\t     * Providers for asynchronous validators to be used for {@link FormControl}s\n\t     * in a form.\n\t     *\n\t     * Provide this using `multi: true` to add validators.\n\t     *\n\t     * See {@link NG_VALIDATORS} for more details.\n\t     *\n\t     * @stable\n\t     */\n\t    var NG_ASYNC_VALIDATORS = new _angular_core.OpaqueToken('NgAsyncValidators');\n\t    /**\n\t     * Provides a set of validators used by form controls.\n\t     *\n\t     * A validator is a function that processes a {@link FormControl} or collection of\n\t     * controls and returns a map of errors. A null map means that validation has passed.\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```typescript\n\t     * var loginControl = new FormControl(\"\", Validators.required)\n\t     * ```\n\t     *\n\t     * @stable\n\t     */\n\t    var Validators = (function () {\n\t        function Validators() {\n\t        }\n\t        /**\n\t         * Validator that requires controls to have a non-empty value.\n\t         */\n\t        Validators.required = function (control) {\n\t            return isBlank(control.value) || (isString(control.value) && control.value == '') ?\n\t                { 'required': true } :\n\t                null;\n\t        };\n\t        /**\n\t         * Validator that requires controls to have a value of a minimum length.\n\t         */\n\t        Validators.minLength = function (minLength) {\n\t            return function (control) {\n\t                if (isPresent(Validators.required(control)))\n\t                    return null;\n\t                var v = control.value;\n\t                return v.length < minLength ?\n\t                    { 'minlength': { 'requiredLength': minLength, 'actualLength': v.length } } :\n\t                    null;\n\t            };\n\t        };\n\t        /**\n\t         * Validator that requires controls to have a value of a maximum length.\n\t         */\n\t        Validators.maxLength = function (maxLength) {\n\t            return function (control) {\n\t                if (isPresent(Validators.required(control)))\n\t                    return null;\n\t                var v = control.value;\n\t                return v.length > maxLength ?\n\t                    { 'maxlength': { 'requiredLength': maxLength, 'actualLength': v.length } } :\n\t                    null;\n\t            };\n\t        };\n\t        /**\n\t         * Validator that requires a control to match a regex to its value.\n\t         */\n\t        Validators.pattern = function (pattern) {\n\t            return function (control) {\n\t                if (isPresent(Validators.required(control)))\n\t                    return null;\n\t                var regex = new RegExp(\"^\" + pattern + \"$\");\n\t                var v = control.value;\n\t                return regex.test(v) ? null :\n\t                    { 'pattern': { 'requiredPattern': \"^\" + pattern + \"$\", 'actualValue': v } };\n\t            };\n\t        };\n\t        /**\n\t         * No-op validator.\n\t         */\n\t        Validators.nullValidator = function (c) { return null; };\n\t        /**\n\t         * Compose multiple validators into a single function that returns the union\n\t         * of the individual error maps.\n\t         */\n\t        Validators.compose = function (validators) {\n\t            if (isBlank(validators))\n\t                return null;\n\t            var presentValidators = validators.filter(isPresent);\n\t            if (presentValidators.length == 0)\n\t                return null;\n\t            return function (control) {\n\t                return _mergeErrors(_executeValidators(control, presentValidators));\n\t            };\n\t        };\n\t        Validators.composeAsync = function (validators) {\n\t            if (isBlank(validators))\n\t                return null;\n\t            var presentValidators = validators.filter(isPresent);\n\t            if (presentValidators.length == 0)\n\t                return null;\n\t            return function (control) {\n\t                var promises = _executeAsyncValidators(control, presentValidators).map(_convertToPromise);\n\t                return Promise.all(promises).then(_mergeErrors);\n\t            };\n\t        };\n\t        return Validators;\n\t    }());\n\t    function _convertToPromise(obj) {\n\t        return isPromise(obj) ? obj : rxjs_operator_toPromise.toPromise.call(obj);\n\t    }\n\t    function _executeValidators(control, validators) {\n\t        return validators.map(function (v) { return v(control); });\n\t    }\n\t    function _executeAsyncValidators(control, validators) {\n\t        return validators.map(function (v) { return v(control); });\n\t    }\n\t    function _mergeErrors(arrayOfErrors) {\n\t        var res = arrayOfErrors.reduce(function (res, errors) {\n\t            return isPresent(errors) ? StringMapWrapper.merge(res, errors) : res;\n\t        }, {});\n\t        return StringMapWrapper.isEmpty(res) ? null : res;\n\t    }\n\t\n\t    /**\n\t     * Used to provide a {@link ControlValueAccessor} for form controls.\n\t     *\n\t     * See {@link DefaultValueAccessor} for how to implement one.\n\t     * @stable\n\t     */\n\t    var NG_VALUE_ACCESSOR = new _angular_core.OpaqueToken('NgValueAccessor');\n\t\n\t    var CHECKBOX_VALUE_ACCESSOR = {\n\t        provide: NG_VALUE_ACCESSOR,\n\t        useExisting: _angular_core.forwardRef(function () { return CheckboxControlValueAccessor; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     * The accessor for writing a value and listening to changes on a checkbox input element.\n\t     *\n\t     *  ### Example\n\t     *  ```\n\t     *  <input type=\"checkbox\" name=\"rememberLogin\" ngModel>\n\t     *  ```\n\t     *\n\t     *  @stable\n\t     */\n\t    var CheckboxControlValueAccessor = (function () {\n\t        function CheckboxControlValueAccessor(_renderer, _elementRef) {\n\t            this._renderer = _renderer;\n\t            this._elementRef = _elementRef;\n\t            this.onChange = function (_) { };\n\t            this.onTouched = function () { };\n\t        }\n\t        CheckboxControlValueAccessor.prototype.writeValue = function (value) {\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', value);\n\t        };\n\t        CheckboxControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n\t        CheckboxControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n\t        CheckboxControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n\t        };\n\t        CheckboxControlValueAccessor.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',\n\t                        host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },\n\t                        providers: [CHECKBOX_VALUE_ACCESSOR]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        CheckboxControlValueAccessor.ctorParameters = [\n\t            { type: _angular_core.Renderer, },\n\t            { type: _angular_core.ElementRef, },\n\t        ];\n\t        return CheckboxControlValueAccessor;\n\t    }());\n\t\n\t    var DEFAULT_VALUE_ACCESSOR = {\n\t        provide: NG_VALUE_ACCESSOR,\n\t        useExisting: _angular_core.forwardRef(function () { return DefaultValueAccessor; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     * The default accessor for writing a value and listening to changes that is used by the\n\t     * {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName} directives.\n\t     *\n\t     *  ### Example\n\t     *  ```\n\t     *  <input type=\"text\" name=\"searchQuery\" ngModel>\n\t     *  ```\n\t     *\n\t     *  @stable\n\t     */\n\t    var DefaultValueAccessor = (function () {\n\t        function DefaultValueAccessor(_renderer, _elementRef) {\n\t            this._renderer = _renderer;\n\t            this._elementRef = _elementRef;\n\t            this.onChange = function (_) { };\n\t            this.onTouched = function () { };\n\t        }\n\t        DefaultValueAccessor.prototype.writeValue = function (value) {\n\t            var normalizedValue = isBlank(value) ? '' : value;\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n\t        };\n\t        DefaultValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n\t        DefaultValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n\t        DefaultValueAccessor.prototype.setDisabledState = function (isDisabled) {\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n\t        };\n\t        DefaultValueAccessor.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',\n\t                        // TODO: vsavkin replace the above selector with the one below it once\n\t                        // https://github.com/angular/angular/issues/3011 is implemented\n\t                        // selector: '[ngControl],[ngModel],[ngFormControl]',\n\t                        host: { '(input)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n\t                        providers: [DEFAULT_VALUE_ACCESSOR]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        DefaultValueAccessor.ctorParameters = [\n\t            { type: _angular_core.Renderer, },\n\t            { type: _angular_core.ElementRef, },\n\t        ];\n\t        return DefaultValueAccessor;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    function normalizeValidator(validator) {\n\t        if (validator.validate !== undefined) {\n\t            return function (c) { return validator.validate(c); };\n\t        }\n\t        else {\n\t            return validator;\n\t        }\n\t    }\n\t    function normalizeAsyncValidator(validator) {\n\t        if (validator.validate !== undefined) {\n\t            return function (c) { return validator.validate(c); };\n\t        }\n\t        else {\n\t            return validator;\n\t        }\n\t    }\n\t\n\t    var NUMBER_VALUE_ACCESSOR = {\n\t        provide: NG_VALUE_ACCESSOR,\n\t        useExisting: _angular_core.forwardRef(function () { return NumberValueAccessor; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     * The accessor for writing a number value and listening to changes that is used by the\n\t     * {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName} directives.\n\t     *\n\t     *  ### Example\n\t     *  ```\n\t     *  <input type=\"number\" [(ngModel)]=\"age\">\n\t     *  ```\n\t     */\n\t    var NumberValueAccessor = (function () {\n\t        function NumberValueAccessor(_renderer, _elementRef) {\n\t            this._renderer = _renderer;\n\t            this._elementRef = _elementRef;\n\t            this.onChange = function (_) { };\n\t            this.onTouched = function () { };\n\t        }\n\t        NumberValueAccessor.prototype.writeValue = function (value) {\n\t            // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n\t            var normalizedValue = isBlank(value) ? '' : value;\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n\t        };\n\t        NumberValueAccessor.prototype.registerOnChange = function (fn) {\n\t            this.onChange = function (value) { fn(value == '' ? null : NumberWrapper.parseFloat(value)); };\n\t        };\n\t        NumberValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n\t        NumberValueAccessor.prototype.setDisabledState = function (isDisabled) {\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n\t        };\n\t        NumberValueAccessor.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',\n\t                        host: {\n\t                            '(change)': 'onChange($event.target.value)',\n\t                            '(input)': 'onChange($event.target.value)',\n\t                            '(blur)': 'onTouched()'\n\t                        },\n\t                        providers: [NUMBER_VALUE_ACCESSOR]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        NumberValueAccessor.ctorParameters = [\n\t            { type: _angular_core.Renderer, },\n\t            { type: _angular_core.ElementRef, },\n\t        ];\n\t        return NumberValueAccessor;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$2 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    function unimplemented() {\n\t        throw new Error('unimplemented');\n\t    }\n\t    /**\n\t     * A base class that all control directive extend.\n\t     * It binds a {@link FormControl} object to a DOM element.\n\t     *\n\t     * Used internally by Angular forms.\n\t     *\n\t     * @stable\n\t     */\n\t    var NgControl = (function (_super) {\n\t        __extends$2(NgControl, _super);\n\t        function NgControl() {\n\t            _super.apply(this, arguments);\n\t            /** @internal */\n\t            this._parent = null;\n\t            this.name = null;\n\t            this.valueAccessor = null;\n\t            /** @internal */\n\t            this._rawValidators = [];\n\t            /** @internal */\n\t            this._rawAsyncValidators = [];\n\t        }\n\t        Object.defineProperty(NgControl.prototype, \"validator\", {\n\t            get: function () { return unimplemented(); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgControl.prototype, \"asyncValidator\", {\n\t            get: function () { return unimplemented(); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return NgControl;\n\t    }(AbstractControlDirective));\n\t\n\t    var RADIO_VALUE_ACCESSOR = {\n\t        provide: NG_VALUE_ACCESSOR,\n\t        useExisting: _angular_core.forwardRef(function () { return RadioControlValueAccessor; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     * Internal class used by Angular to uncheck radio buttons with the matching name.\n\t     */\n\t    var RadioControlRegistry = (function () {\n\t        function RadioControlRegistry() {\n\t            this._accessors = [];\n\t        }\n\t        RadioControlRegistry.prototype.add = function (control, accessor) {\n\t            this._accessors.push([control, accessor]);\n\t        };\n\t        RadioControlRegistry.prototype.remove = function (accessor) {\n\t            var indexToRemove = -1;\n\t            for (var i = 0; i < this._accessors.length; ++i) {\n\t                if (this._accessors[i][1] === accessor) {\n\t                    indexToRemove = i;\n\t                }\n\t            }\n\t            ListWrapper.removeAt(this._accessors, indexToRemove);\n\t        };\n\t        RadioControlRegistry.prototype.select = function (accessor) {\n\t            var _this = this;\n\t            this._accessors.forEach(function (c) {\n\t                if (_this._isSameGroup(c, accessor) && c[1] !== accessor) {\n\t                    c[1].fireUncheck(accessor.value);\n\t                }\n\t            });\n\t        };\n\t        RadioControlRegistry.prototype._isSameGroup = function (controlPair, accessor) {\n\t            if (!controlPair[0].control)\n\t                return false;\n\t            return controlPair[0]._parent === accessor._control._parent &&\n\t                controlPair[1].name === accessor.name;\n\t        };\n\t        RadioControlRegistry.decorators = [\n\t            { type: _angular_core.Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        RadioControlRegistry.ctorParameters = [];\n\t        return RadioControlRegistry;\n\t    }());\n\t    /**\n\t     * The accessor for writing a radio control value and listening to changes that is used by the\n\t     * {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName} directives.\n\t     *\n\t     *  ### Example\n\t     *  ```\n\t     *  @Component({\n\t     *    template: `\n\t     *      <input type=\"radio\" name=\"food\" [(ngModel)]=\"food\" value=\"chicken\">\n\t     *      <input type=\"radio\" name=\"food\" [(ngModel)]=\"food\" value=\"fish\">\n\t     *    `\n\t     *  })\n\t     *  class FoodCmp {\n\t     *    food = 'chicken';\n\t     *  }\n\t     *  ```\n\t     */\n\t    var RadioControlValueAccessor = (function () {\n\t        function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {\n\t            this._renderer = _renderer;\n\t            this._elementRef = _elementRef;\n\t            this._registry = _registry;\n\t            this._injector = _injector;\n\t            this.onChange = function () { };\n\t            this.onTouched = function () { };\n\t        }\n\t        RadioControlValueAccessor.prototype.ngOnInit = function () {\n\t            this._control = this._injector.get(NgControl);\n\t            this._checkName();\n\t            this._registry.add(this._control, this);\n\t        };\n\t        RadioControlValueAccessor.prototype.ngOnDestroy = function () { this._registry.remove(this); };\n\t        RadioControlValueAccessor.prototype.writeValue = function (value) {\n\t            this._state = value === this.value;\n\t            if (isPresent(value)) {\n\t                this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', this._state);\n\t            }\n\t        };\n\t        RadioControlValueAccessor.prototype.registerOnChange = function (fn) {\n\t            var _this = this;\n\t            this._fn = fn;\n\t            this.onChange = function () {\n\t                fn(_this.value);\n\t                _this._registry.select(_this);\n\t            };\n\t        };\n\t        RadioControlValueAccessor.prototype.fireUncheck = function (value) { this.writeValue(value); };\n\t        RadioControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n\t        RadioControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n\t        };\n\t        RadioControlValueAccessor.prototype._checkName = function () {\n\t            if (this.name && this.formControlName && this.name !== this.formControlName) {\n\t                this._throwNameError();\n\t            }\n\t            if (!this.name && this.formControlName)\n\t                this.name = this.formControlName;\n\t        };\n\t        RadioControlValueAccessor.prototype._throwNameError = function () {\n\t            throw new Error(\"\\n      If you define both a name and a formControlName attribute on your radio button, their values\\n      must match. Ex: <input type=\\\"radio\\\" formControlName=\\\"food\\\" name=\\\"food\\\">\\n    \");\n\t        };\n\t        RadioControlValueAccessor.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',\n\t                        host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },\n\t                        providers: [RADIO_VALUE_ACCESSOR]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        RadioControlValueAccessor.ctorParameters = [\n\t            { type: _angular_core.Renderer, },\n\t            { type: _angular_core.ElementRef, },\n\t            { type: RadioControlRegistry, },\n\t            { type: _angular_core.Injector, },\n\t        ];\n\t        RadioControlValueAccessor.propDecorators = {\n\t            'name': [{ type: _angular_core.Input },],\n\t            'formControlName': [{ type: _angular_core.Input },],\n\t            'value': [{ type: _angular_core.Input },],\n\t        };\n\t        return RadioControlValueAccessor;\n\t    }());\n\t\n\t    var SELECT_VALUE_ACCESSOR = {\n\t        provide: NG_VALUE_ACCESSOR,\n\t        useExisting: _angular_core.forwardRef(function () { return SelectControlValueAccessor; }),\n\t        multi: true\n\t    };\n\t    function _buildValueString(id, value) {\n\t        if (isBlank(id))\n\t            return \"\" + value;\n\t        if (!isPrimitive(value))\n\t            value = 'Object';\n\t        return StringWrapper.slice(id + \": \" + value, 0, 50);\n\t    }\n\t    function _extractId(valueString) {\n\t        return valueString.split(':')[0];\n\t    }\n\t    /**\n\t     * The accessor for writing a value and listening to changes on a select element.\n\t     *\n\t     * Note: We have to listen to the 'change' event because 'input' events aren't fired\n\t     * for selects in Firefox and IE:\n\t     * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350\n\t     * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/\n\t     *\n\t     * @stable\n\t     */\n\t    var SelectControlValueAccessor = (function () {\n\t        function SelectControlValueAccessor(_renderer, _elementRef) {\n\t            this._renderer = _renderer;\n\t            this._elementRef = _elementRef;\n\t            /** @internal */\n\t            this._optionMap = new Map();\n\t            /** @internal */\n\t            this._idCounter = 0;\n\t            this.onChange = function (_) { };\n\t            this.onTouched = function () { };\n\t        }\n\t        SelectControlValueAccessor.prototype.writeValue = function (value) {\n\t            this.value = value;\n\t            var valueString = _buildValueString(this._getOptionId(value), value);\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', valueString);\n\t        };\n\t        SelectControlValueAccessor.prototype.registerOnChange = function (fn) {\n\t            var _this = this;\n\t            this.onChange = function (valueString) {\n\t                _this.value = valueString;\n\t                fn(_this._getOptionValue(valueString));\n\t            };\n\t        };\n\t        SelectControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n\t        SelectControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n\t        };\n\t        /** @internal */\n\t        SelectControlValueAccessor.prototype._registerOption = function () { return (this._idCounter++).toString(); };\n\t        /** @internal */\n\t        SelectControlValueAccessor.prototype._getOptionId = function (value) {\n\t            for (var _i = 0, _a = MapWrapper.keys(this._optionMap); _i < _a.length; _i++) {\n\t                var id = _a[_i];\n\t                if (looseIdentical(this._optionMap.get(id), value))\n\t                    return id;\n\t            }\n\t            return null;\n\t        };\n\t        /** @internal */\n\t        SelectControlValueAccessor.prototype._getOptionValue = function (valueString) {\n\t            var value = this._optionMap.get(_extractId(valueString));\n\t            return isPresent(value) ? value : valueString;\n\t        };\n\t        SelectControlValueAccessor.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',\n\t                        host: { '(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n\t                        providers: [SELECT_VALUE_ACCESSOR]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        SelectControlValueAccessor.ctorParameters = [\n\t            { type: _angular_core.Renderer, },\n\t            { type: _angular_core.ElementRef, },\n\t        ];\n\t        return SelectControlValueAccessor;\n\t    }());\n\t    /**\n\t     * Marks `<option>` as dynamic, so Angular can be notified when options change.\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```\n\t     * <select name=\"city\" ngModel>\n\t     *   <option *ngFor=\"let c of cities\" [value]=\"c\"></option>\n\t     * </select>\n\t     * ```\n\t     *\n\t     * @stable\n\t     */\n\t    var NgSelectOption = (function () {\n\t        function NgSelectOption(_element, _renderer, _select) {\n\t            this._element = _element;\n\t            this._renderer = _renderer;\n\t            this._select = _select;\n\t            if (isPresent(this._select))\n\t                this.id = this._select._registerOption();\n\t        }\n\t        Object.defineProperty(NgSelectOption.prototype, \"ngValue\", {\n\t            set: function (value) {\n\t                if (this._select == null)\n\t                    return;\n\t                this._select._optionMap.set(this.id, value);\n\t                this._setElementValue(_buildValueString(this.id, value));\n\t                this._select.writeValue(this._select.value);\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgSelectOption.prototype, \"value\", {\n\t            set: function (value) {\n\t                this._setElementValue(value);\n\t                if (isPresent(this._select))\n\t                    this._select.writeValue(this._select.value);\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /** @internal */\n\t        NgSelectOption.prototype._setElementValue = function (value) {\n\t            this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n\t        };\n\t        NgSelectOption.prototype.ngOnDestroy = function () {\n\t            if (isPresent(this._select)) {\n\t                this._select._optionMap.delete(this.id);\n\t                this._select.writeValue(this._select.value);\n\t            }\n\t        };\n\t        NgSelectOption.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: 'option' },] },\n\t        ];\n\t        /** @nocollapse */\n\t        NgSelectOption.ctorParameters = [\n\t            { type: _angular_core.ElementRef, },\n\t            { type: _angular_core.Renderer, },\n\t            { type: SelectControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n\t        ];\n\t        NgSelectOption.propDecorators = {\n\t            'ngValue': [{ type: _angular_core.Input, args: ['ngValue',] },],\n\t            'value': [{ type: _angular_core.Input, args: ['value',] },],\n\t        };\n\t        return NgSelectOption;\n\t    }());\n\t\n\t    var SELECT_MULTIPLE_VALUE_ACCESSOR = {\n\t        provide: NG_VALUE_ACCESSOR,\n\t        useExisting: _angular_core.forwardRef(function () { return SelectMultipleControlValueAccessor; }),\n\t        multi: true\n\t    };\n\t    function _buildValueString$1(id, value) {\n\t        if (isBlank(id))\n\t            return \"\" + value;\n\t        if (isString(value))\n\t            value = \"'\" + value + \"'\";\n\t        if (!isPrimitive(value))\n\t            value = 'Object';\n\t        return StringWrapper.slice(id + \": \" + value, 0, 50);\n\t    }\n\t    function _extractId$1(valueString) {\n\t        return valueString.split(':')[0];\n\t    }\n\t    /**\n\t     * The accessor for writing a value and listening to changes on a select element.\n\t     *\n\t     * @stable\n\t     */\n\t    var SelectMultipleControlValueAccessor = (function () {\n\t        function SelectMultipleControlValueAccessor(_renderer, _elementRef) {\n\t            this._renderer = _renderer;\n\t            this._elementRef = _elementRef;\n\t            /** @internal */\n\t            this._optionMap = new Map();\n\t            /** @internal */\n\t            this._idCounter = 0;\n\t            this.onChange = function (_) { };\n\t            this.onTouched = function () { };\n\t        }\n\t        SelectMultipleControlValueAccessor.prototype.writeValue = function (value) {\n\t            var _this = this;\n\t            this.value = value;\n\t            if (value == null)\n\t                return;\n\t            var values = value;\n\t            // convert values to ids\n\t            var ids = values.map(function (v) { return _this._getOptionId(v); });\n\t            this._optionMap.forEach(function (opt, o) { opt._setSelected(ids.indexOf(o.toString()) > -1); });\n\t        };\n\t        SelectMultipleControlValueAccessor.prototype.registerOnChange = function (fn) {\n\t            var _this = this;\n\t            this.onChange = function (_) {\n\t                var selected = [];\n\t                if (_.hasOwnProperty('selectedOptions')) {\n\t                    var options = _.selectedOptions;\n\t                    for (var i = 0; i < options.length; i++) {\n\t                        var opt = options.item(i);\n\t                        var val = _this._getOptionValue(opt.value);\n\t                        selected.push(val);\n\t                    }\n\t                }\n\t                else {\n\t                    var options = _.options;\n\t                    for (var i = 0; i < options.length; i++) {\n\t                        var opt = options.item(i);\n\t                        if (opt.selected) {\n\t                            var val = _this._getOptionValue(opt.value);\n\t                            selected.push(val);\n\t                        }\n\t                    }\n\t                }\n\t                fn(selected);\n\t            };\n\t        };\n\t        SelectMultipleControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n\t        SelectMultipleControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n\t            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n\t        };\n\t        /** @internal */\n\t        SelectMultipleControlValueAccessor.prototype._registerOption = function (value) {\n\t            var id = (this._idCounter++).toString();\n\t            this._optionMap.set(id, value);\n\t            return id;\n\t        };\n\t        /** @internal */\n\t        SelectMultipleControlValueAccessor.prototype._getOptionId = function (value) {\n\t            for (var _i = 0, _a = MapWrapper.keys(this._optionMap); _i < _a.length; _i++) {\n\t                var id = _a[_i];\n\t                if (looseIdentical(this._optionMap.get(id)._value, value))\n\t                    return id;\n\t            }\n\t            return null;\n\t        };\n\t        /** @internal */\n\t        SelectMultipleControlValueAccessor.prototype._getOptionValue = function (valueString) {\n\t            var opt = this._optionMap.get(_extractId$1(valueString));\n\t            return isPresent(opt) ? opt._value : valueString;\n\t        };\n\t        SelectMultipleControlValueAccessor.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',\n\t                        host: { '(change)': 'onChange($event.target)', '(blur)': 'onTouched()' },\n\t                        providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        SelectMultipleControlValueAccessor.ctorParameters = [\n\t            { type: _angular_core.Renderer, },\n\t            { type: _angular_core.ElementRef, },\n\t        ];\n\t        return SelectMultipleControlValueAccessor;\n\t    }());\n\t    /**\n\t     * Marks `<option>` as dynamic, so Angular can be notified when options change.\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```\n\t     * <select multiple name=\"city\" ngModel>\n\t     *   <option *ngFor=\"let c of cities\" [value]=\"c\"></option>\n\t     * </select>\n\t     * ```\n\t     */\n\t    var NgSelectMultipleOption = (function () {\n\t        function NgSelectMultipleOption(_element, _renderer, _select) {\n\t            this._element = _element;\n\t            this._renderer = _renderer;\n\t            this._select = _select;\n\t            if (isPresent(this._select)) {\n\t                this.id = this._select._registerOption(this);\n\t            }\n\t        }\n\t        Object.defineProperty(NgSelectMultipleOption.prototype, \"ngValue\", {\n\t            set: function (value) {\n\t                if (this._select == null)\n\t                    return;\n\t                this._value = value;\n\t                this._setElementValue(_buildValueString$1(this.id, value));\n\t                this._select.writeValue(this._select.value);\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgSelectMultipleOption.prototype, \"value\", {\n\t            set: function (value) {\n\t                if (isPresent(this._select)) {\n\t                    this._value = value;\n\t                    this._setElementValue(_buildValueString$1(this.id, value));\n\t                    this._select.writeValue(this._select.value);\n\t                }\n\t                else {\n\t                    this._setElementValue(value);\n\t                }\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /** @internal */\n\t        NgSelectMultipleOption.prototype._setElementValue = function (value) {\n\t            this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n\t        };\n\t        /** @internal */\n\t        NgSelectMultipleOption.prototype._setSelected = function (selected) {\n\t            this._renderer.setElementProperty(this._element.nativeElement, 'selected', selected);\n\t        };\n\t        NgSelectMultipleOption.prototype.ngOnDestroy = function () {\n\t            if (isPresent(this._select)) {\n\t                this._select._optionMap.delete(this.id);\n\t                this._select.writeValue(this._select.value);\n\t            }\n\t        };\n\t        NgSelectMultipleOption.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: 'option' },] },\n\t        ];\n\t        /** @nocollapse */\n\t        NgSelectMultipleOption.ctorParameters = [\n\t            { type: _angular_core.ElementRef, },\n\t            { type: _angular_core.Renderer, },\n\t            { type: SelectMultipleControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n\t        ];\n\t        NgSelectMultipleOption.propDecorators = {\n\t            'ngValue': [{ type: _angular_core.Input, args: ['ngValue',] },],\n\t            'value': [{ type: _angular_core.Input, args: ['value',] },],\n\t        };\n\t        return NgSelectMultipleOption;\n\t    }());\n\t\n\t    function controlPath(name, parent) {\n\t        var p = ListWrapper.clone(parent.path);\n\t        p.push(name);\n\t        return p;\n\t    }\n\t    function setUpControl(control, dir) {\n\t        if (isBlank(control))\n\t            _throwError(dir, 'Cannot find control with');\n\t        if (isBlank(dir.valueAccessor))\n\t            _throwError(dir, 'No value accessor for form control with');\n\t        control.validator = Validators.compose([control.validator, dir.validator]);\n\t        control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n\t        dir.valueAccessor.writeValue(control.value);\n\t        // view -> model\n\t        dir.valueAccessor.registerOnChange(function (newValue) {\n\t            dir.viewToModelUpdate(newValue);\n\t            control.markAsDirty();\n\t            control.setValue(newValue, { emitModelToViewChange: false });\n\t        });\n\t        // touched\n\t        dir.valueAccessor.registerOnTouched(function () { return control.markAsTouched(); });\n\t        control.registerOnChange(function (newValue, emitModelEvent) {\n\t            // control -> view\n\t            dir.valueAccessor.writeValue(newValue);\n\t            // control -> ngModel\n\t            if (emitModelEvent)\n\t                dir.viewToModelUpdate(newValue);\n\t        });\n\t        if (dir.valueAccessor.setDisabledState) {\n\t            control.registerOnDisabledChange(function (isDisabled) { dir.valueAccessor.setDisabledState(isDisabled); });\n\t        }\n\t        // re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4\n\t        dir._rawValidators.forEach(function (validator) {\n\t            if (validator.registerOnChange)\n\t                validator.registerOnChange(function () { return control.updateValueAndValidity(); });\n\t        });\n\t        dir._rawAsyncValidators.forEach(function (validator) {\n\t            if (validator.registerOnChange)\n\t                validator.registerOnChange(function () { return control.updateValueAndValidity(); });\n\t        });\n\t    }\n\t    function cleanUpControl(control, dir) {\n\t        dir.valueAccessor.registerOnChange(function () { return _noControlError(dir); });\n\t        dir.valueAccessor.registerOnTouched(function () { return _noControlError(dir); });\n\t        dir._rawValidators.forEach(function (validator) { return validator.registerOnChange(null); });\n\t        dir._rawAsyncValidators.forEach(function (validator) { return validator.registerOnChange(null); });\n\t        if (control)\n\t            control._clearChangeFns();\n\t    }\n\t    function setUpFormContainer(control, dir) {\n\t        if (isBlank(control))\n\t            _throwError(dir, 'Cannot find control with');\n\t        control.validator = Validators.compose([control.validator, dir.validator]);\n\t        control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n\t    }\n\t    function _noControlError(dir) {\n\t        return _throwError(dir, 'There is no FormControl instance attached to form control element with');\n\t    }\n\t    function _throwError(dir, message) {\n\t        var messageEnd;\n\t        if (dir.path.length > 1) {\n\t            messageEnd = \"path: '\" + dir.path.join(' -> ') + \"'\";\n\t        }\n\t        else if (dir.path[0]) {\n\t            messageEnd = \"name: '\" + dir.path + \"'\";\n\t        }\n\t        else {\n\t            messageEnd = 'unspecified name attribute';\n\t        }\n\t        throw new Error(message + \" \" + messageEnd);\n\t    }\n\t    function composeValidators(validators) {\n\t        return isPresent(validators) ? Validators.compose(validators.map(normalizeValidator)) : null;\n\t    }\n\t    function composeAsyncValidators(validators) {\n\t        return isPresent(validators) ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) :\n\t            null;\n\t    }\n\t    function isPropertyUpdated(changes, viewModel) {\n\t        if (!StringMapWrapper.contains(changes, 'model'))\n\t            return false;\n\t        var change = changes['model'];\n\t        if (change.isFirstChange())\n\t            return true;\n\t        return !looseIdentical(viewModel, change.currentValue);\n\t    }\n\t    function isBuiltInAccessor(valueAccessor) {\n\t        return (hasConstructor(valueAccessor, CheckboxControlValueAccessor) ||\n\t            hasConstructor(valueAccessor, NumberValueAccessor) ||\n\t            hasConstructor(valueAccessor, SelectControlValueAccessor) ||\n\t            hasConstructor(valueAccessor, SelectMultipleControlValueAccessor) ||\n\t            hasConstructor(valueAccessor, RadioControlValueAccessor));\n\t    }\n\t    // TODO: vsavkin remove it once https://github.com/angular/angular/issues/3011 is implemented\n\t    function selectValueAccessor(dir, valueAccessors) {\n\t        if (isBlank(valueAccessors))\n\t            return null;\n\t        var defaultAccessor;\n\t        var builtinAccessor;\n\t        var customAccessor;\n\t        valueAccessors.forEach(function (v) {\n\t            if (hasConstructor(v, DefaultValueAccessor)) {\n\t                defaultAccessor = v;\n\t            }\n\t            else if (isBuiltInAccessor(v)) {\n\t                if (isPresent(builtinAccessor))\n\t                    _throwError(dir, 'More than one built-in value accessor matches form control with');\n\t                builtinAccessor = v;\n\t            }\n\t            else {\n\t                if (isPresent(customAccessor))\n\t                    _throwError(dir, 'More than one custom value accessor matches form control with');\n\t                customAccessor = v;\n\t            }\n\t        });\n\t        if (isPresent(customAccessor))\n\t            return customAccessor;\n\t        if (isPresent(builtinAccessor))\n\t            return builtinAccessor;\n\t        if (isPresent(defaultAccessor))\n\t            return defaultAccessor;\n\t        _throwError(dir, 'No valid value accessor for form control with');\n\t        return null;\n\t    }\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * This is a base class for code shared between {@link NgModelGroup} and {@link FormGroupName}.\n\t     *\n\t     * @stable\n\t     */\n\t    var AbstractFormGroupDirective = (function (_super) {\n\t        __extends(AbstractFormGroupDirective, _super);\n\t        function AbstractFormGroupDirective() {\n\t            _super.apply(this, arguments);\n\t        }\n\t        AbstractFormGroupDirective.prototype.ngOnInit = function () {\n\t            this._checkParentType();\n\t            this.formDirective.addFormGroup(this);\n\t        };\n\t        AbstractFormGroupDirective.prototype.ngOnDestroy = function () {\n\t            if (this.formDirective) {\n\t                this.formDirective.removeFormGroup(this);\n\t            }\n\t        };\n\t        Object.defineProperty(AbstractFormGroupDirective.prototype, \"control\", {\n\t            /**\n\t             * Get the {@link FormGroup} backing this binding.\n\t             */\n\t            get: function () { return this.formDirective.getFormGroup(this); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractFormGroupDirective.prototype, \"path\", {\n\t            /**\n\t             * Get the path to this control group.\n\t             */\n\t            get: function () { return controlPath(this.name, this._parent); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractFormGroupDirective.prototype, \"formDirective\", {\n\t            /**\n\t             * Get the {@link Form} to which this group belongs.\n\t             */\n\t            get: function () { return this._parent ? this._parent.formDirective : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractFormGroupDirective.prototype, \"validator\", {\n\t            get: function () { return composeValidators(this._validators); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractFormGroupDirective.prototype, \"asyncValidator\", {\n\t            get: function () { return composeAsyncValidators(this._asyncValidators); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /** @internal */\n\t        AbstractFormGroupDirective.prototype._checkParentType = function () { };\n\t        return AbstractFormGroupDirective;\n\t    }(ControlContainer));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$3 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var AbstractControlStatus = (function () {\n\t        function AbstractControlStatus(cd) {\n\t            this._cd = cd;\n\t        }\n\t        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassUntouched\", {\n\t            get: function () {\n\t                return isPresent(this._cd.control) ? this._cd.control.untouched : false;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassTouched\", {\n\t            get: function () {\n\t                return isPresent(this._cd.control) ? this._cd.control.touched : false;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassPristine\", {\n\t            get: function () {\n\t                return isPresent(this._cd.control) ? this._cd.control.pristine : false;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassDirty\", {\n\t            get: function () {\n\t                return isPresent(this._cd.control) ? this._cd.control.dirty : false;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassValid\", {\n\t            get: function () {\n\t                return isPresent(this._cd.control) ? this._cd.control.valid : false;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassInvalid\", {\n\t            get: function () {\n\t                return isPresent(this._cd.control) ? this._cd.control.invalid : false;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return AbstractControlStatus;\n\t    }());\n\t    var ngControlStatusHost = {\n\t        '[class.ng-untouched]': 'ngClassUntouched',\n\t        '[class.ng-touched]': 'ngClassTouched',\n\t        '[class.ng-pristine]': 'ngClassPristine',\n\t        '[class.ng-dirty]': 'ngClassDirty',\n\t        '[class.ng-valid]': 'ngClassValid',\n\t        '[class.ng-invalid]': 'ngClassInvalid'\n\t    };\n\t    /**\n\t     * Directive automatically applied to Angular form controls that sets CSS classes\n\t     * based on control status (valid/invalid/dirty/etc).\n\t     *\n\t     * @stable\n\t     */\n\t    var NgControlStatus = (function (_super) {\n\t        __extends$3(NgControlStatus, _super);\n\t        function NgControlStatus(cd) {\n\t            _super.call(this, cd);\n\t        }\n\t        NgControlStatus.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost },] },\n\t        ];\n\t        /** @nocollapse */\n\t        NgControlStatus.ctorParameters = [\n\t            { type: NgControl, decorators: [{ type: _angular_core.Self },] },\n\t        ];\n\t        return NgControlStatus;\n\t    }(AbstractControlStatus));\n\t    /**\n\t     * Directive automatically applied to Angular form groups that sets CSS classes\n\t     * based on control status (valid/invalid/dirty/etc).\n\t     *\n\t     * @stable\n\t     */\n\t    var NgControlStatusGroup = (function (_super) {\n\t        __extends$3(NgControlStatusGroup, _super);\n\t        function NgControlStatusGroup(cd) {\n\t            _super.call(this, cd);\n\t        }\n\t        NgControlStatusGroup.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',\n\t                        host: ngControlStatusHost\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        NgControlStatusGroup.ctorParameters = [\n\t            { type: ControlContainer, decorators: [{ type: _angular_core.Self },] },\n\t        ];\n\t        return NgControlStatusGroup;\n\t    }(AbstractControlStatus));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$5 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * Use by directives and components to emit custom Events.\n\t     *\n\t     * ### Examples\n\t     *\n\t     * In the following example, `Zippy` alternatively emits `open` and `close` events when its\n\t     * title gets clicked:\n\t     *\n\t     * ```\n\t     * @Component({\n\t     *   selector: 'zippy',\n\t     *   template: `\n\t     *   <div class=\"zippy\">\n\t     *     <div (click)=\"toggle()\">Toggle</div>\n\t     *     <div [hidden]=\"!visible\">\n\t     *       <ng-content></ng-content>\n\t     *     </div>\n\t     *  </div>`})\n\t     * export class Zippy {\n\t     *   visible: boolean = true;\n\t     *   @Output() open: EventEmitter<any> = new EventEmitter();\n\t     *   @Output() close: EventEmitter<any> = new EventEmitter();\n\t     *\n\t     *   toggle() {\n\t     *     this.visible = !this.visible;\n\t     *     if (this.visible) {\n\t     *       this.open.emit(null);\n\t     *     } else {\n\t     *       this.close.emit(null);\n\t     *     }\n\t     *   }\n\t     * }\n\t     * ```\n\t     *\n\t     * The events payload can be accessed by the parameter `$event` on the components output event\n\t     * handler:\n\t     *\n\t     * ```\n\t     * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n\t     * ```\n\t     *\n\t     * Uses Rx.Observable but provides an adapter to make it work as specified here:\n\t     * https://github.com/jhusain/observable-spec\n\t     *\n\t     * Once a reference implementation of the spec is available, switch to it.\n\t     * @stable\n\t     */\n\t    var EventEmitter = (function (_super) {\n\t        __extends$5(EventEmitter, _super);\n\t        /**\n\t         * Creates an instance of [EventEmitter], which depending on [isAsync],\n\t         * delivers events synchronously or asynchronously.\n\t         */\n\t        function EventEmitter(isAsync) {\n\t            if (isAsync === void 0) { isAsync = false; }\n\t            _super.call(this);\n\t            this.__isAsync = isAsync;\n\t        }\n\t        EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };\n\t        EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {\n\t            var schedulerFn;\n\t            var errorFn = function (err) { return null; };\n\t            var completeFn = function () { return null; };\n\t            if (generatorOrNext && typeof generatorOrNext === 'object') {\n\t                schedulerFn = this.__isAsync ? function (value /** TODO #9100 */) {\n\t                    setTimeout(function () { return generatorOrNext.next(value); });\n\t                } : function (value /** TODO #9100 */) { generatorOrNext.next(value); };\n\t                if (generatorOrNext.error) {\n\t                    errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :\n\t                        function (err) { generatorOrNext.error(err); };\n\t                }\n\t                if (generatorOrNext.complete) {\n\t                    completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :\n\t                        function () { generatorOrNext.complete(); };\n\t                }\n\t            }\n\t            else {\n\t                schedulerFn = this.__isAsync ? function (value /** TODO #9100 */) {\n\t                    setTimeout(function () { return generatorOrNext(value); });\n\t                } : function (value /** TODO #9100 */) { generatorOrNext(value); };\n\t                if (error) {\n\t                    errorFn =\n\t                        this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };\n\t                }\n\t                if (complete) {\n\t                    completeFn =\n\t                        this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };\n\t                }\n\t            }\n\t            return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);\n\t        };\n\t        return EventEmitter;\n\t    }(rxjs_Subject.Subject));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$6 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * Indicates that a FormControl is valid, i.e. that no errors exist in the input value.\n\t     */\n\t    var VALID = 'VALID';\n\t    /**\n\t     * Indicates that a FormControl is invalid, i.e. that an error exists in the input value.\n\t     */\n\t    var INVALID = 'INVALID';\n\t    /**\n\t     * Indicates that a FormControl is pending, i.e. that async validation is occurring and\n\t     * errors are not yet available for the input value.\n\t     */\n\t    var PENDING = 'PENDING';\n\t    /**\n\t     * Indicates that a FormControl is disabled, i.e. that the control is exempt from ancestor\n\t     * calculations of validity or value.\n\t     */\n\t    var DISABLED = 'DISABLED';\n\t    function _find(control, path, delimiter) {\n\t        if (isBlank(path))\n\t            return null;\n\t        if (!(path instanceof Array)) {\n\t            path = path.split(delimiter);\n\t        }\n\t        if (path instanceof Array && ListWrapper.isEmpty(path))\n\t            return null;\n\t        return path.reduce(function (v, name) {\n\t            if (v instanceof FormGroup) {\n\t                return isPresent(v.controls[name]) ? v.controls[name] : null;\n\t            }\n\t            else if (v instanceof FormArray) {\n\t                var index = name;\n\t                return isPresent(v.at(index)) ? v.at(index) : null;\n\t            }\n\t            else {\n\t                return null;\n\t            }\n\t        }, control);\n\t    }\n\t    function toObservable(r) {\n\t        return isPromise(r) ? rxjs_observable_fromPromise.fromPromise(r) : r;\n\t    }\n\t    function coerceToValidator(validator) {\n\t        return Array.isArray(validator) ? composeValidators(validator) : validator;\n\t    }\n\t    function coerceToAsyncValidator(asyncValidator) {\n\t        return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) : asyncValidator;\n\t    }\n\t    /**\n\t     * @stable\n\t     */\n\t    var AbstractControl = (function () {\n\t        function AbstractControl(validator, asyncValidator) {\n\t            this.validator = validator;\n\t            this.asyncValidator = asyncValidator;\n\t            this._pristine = true;\n\t            this._touched = false;\n\t        }\n\t        Object.defineProperty(AbstractControl.prototype, \"value\", {\n\t            get: function () { return this._value; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"status\", {\n\t            get: function () { return this._status; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"valid\", {\n\t            get: function () { return this._status === VALID; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"invalid\", {\n\t            get: function () { return this._status === INVALID; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"errors\", {\n\t            /**\n\t             * Returns the errors of this control.\n\t             */\n\t            get: function () { return this._errors; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"pristine\", {\n\t            get: function () { return this._pristine; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"dirty\", {\n\t            get: function () { return !this.pristine; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"touched\", {\n\t            get: function () { return this._touched; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"untouched\", {\n\t            get: function () { return !this._touched; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"valueChanges\", {\n\t            get: function () { return this._valueChanges; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"statusChanges\", {\n\t            get: function () { return this._statusChanges; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"pending\", {\n\t            get: function () { return this._status == PENDING; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"disabled\", {\n\t            get: function () { return this._status === DISABLED; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AbstractControl.prototype, \"enabled\", {\n\t            get: function () { return this._status !== DISABLED; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        AbstractControl.prototype.setAsyncValidators = function (newValidator) {\n\t            this.asyncValidator = coerceToAsyncValidator(newValidator);\n\t        };\n\t        AbstractControl.prototype.clearAsyncValidators = function () { this.asyncValidator = null; };\n\t        AbstractControl.prototype.setValidators = function (newValidator) {\n\t            this.validator = coerceToValidator(newValidator);\n\t        };\n\t        AbstractControl.prototype.clearValidators = function () { this.validator = null; };\n\t        AbstractControl.prototype.markAsTouched = function (_a) {\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            onlySelf = normalizeBool(onlySelf);\n\t            this._touched = true;\n\t            if (isPresent(this._parent) && !onlySelf) {\n\t                this._parent.markAsTouched({ onlySelf: onlySelf });\n\t            }\n\t        };\n\t        AbstractControl.prototype.markAsDirty = function (_a) {\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            onlySelf = normalizeBool(onlySelf);\n\t            this._pristine = false;\n\t            if (isPresent(this._parent) && !onlySelf) {\n\t                this._parent.markAsDirty({ onlySelf: onlySelf });\n\t            }\n\t        };\n\t        AbstractControl.prototype.markAsPristine = function (_a) {\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            this._pristine = true;\n\t            this._forEachChild(function (control) { control.markAsPristine({ onlySelf: true }); });\n\t            if (isPresent(this._parent) && !onlySelf) {\n\t                this._parent._updatePristine({ onlySelf: onlySelf });\n\t            }\n\t        };\n\t        AbstractControl.prototype.markAsUntouched = function (_a) {\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            this._touched = false;\n\t            this._forEachChild(function (control) { control.markAsUntouched({ onlySelf: true }); });\n\t            if (isPresent(this._parent) && !onlySelf) {\n\t                this._parent._updateTouched({ onlySelf: onlySelf });\n\t            }\n\t        };\n\t        AbstractControl.prototype.markAsPending = function (_a) {\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            onlySelf = normalizeBool(onlySelf);\n\t            this._status = PENDING;\n\t            if (isPresent(this._parent) && !onlySelf) {\n\t                this._parent.markAsPending({ onlySelf: onlySelf });\n\t            }\n\t        };\n\t        AbstractControl.prototype.disable = function (_a) {\n\t            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n\t            emitEvent = isPresent(emitEvent) ? emitEvent : true;\n\t            this._status = DISABLED;\n\t            this._forEachChild(function (control) { control.disable({ onlySelf: true }); });\n\t            this._updateValue();\n\t            if (emitEvent) {\n\t                this._valueChanges.emit(this._value);\n\t                this._statusChanges.emit(this._status);\n\t            }\n\t            this._updateAncestors(onlySelf);\n\t            this._onDisabledChange(true);\n\t        };\n\t        AbstractControl.prototype.enable = function (_a) {\n\t            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n\t            this._status = VALID;\n\t            this._forEachChild(function (control) { control.enable({ onlySelf: true }); });\n\t            this.updateValueAndValidity({ onlySelf: true, emitEvent: emitEvent });\n\t            this._updateAncestors(onlySelf);\n\t            this._onDisabledChange(false);\n\t        };\n\t        AbstractControl.prototype._updateAncestors = function (onlySelf) {\n\t            if (isPresent(this._parent) && !onlySelf) {\n\t                this._parent.updateValueAndValidity();\n\t                this._parent._updatePristine();\n\t                this._parent._updateTouched();\n\t            }\n\t        };\n\t        AbstractControl.prototype.setParent = function (parent) { this._parent = parent; };\n\t        AbstractControl.prototype.updateValueAndValidity = function (_a) {\n\t            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n\t            onlySelf = normalizeBool(onlySelf);\n\t            emitEvent = isPresent(emitEvent) ? emitEvent : true;\n\t            this._updateValue();\n\t            this._errors = this._runValidator();\n\t            var originalStatus = this._status;\n\t            this._status = this._calculateStatus();\n\t            if (this._status == VALID || this._status == PENDING) {\n\t                this._runAsyncValidator(emitEvent);\n\t            }\n\t            if (this._disabledChanged(originalStatus)) {\n\t                this._updateValue();\n\t            }\n\t            if (emitEvent) {\n\t                this._valueChanges.emit(this._value);\n\t                this._statusChanges.emit(this._status);\n\t            }\n\t            if (isPresent(this._parent) && !onlySelf) {\n\t                this._parent.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n\t            }\n\t        };\n\t        /** @internal */\n\t        AbstractControl.prototype._updateTreeValidity = function (_a) {\n\t            var emitEvent = (_a === void 0 ? { emitEvent: true } : _a).emitEvent;\n\t            this._forEachChild(function (ctrl) { return ctrl._updateTreeValidity({ emitEvent: emitEvent }); });\n\t            this.updateValueAndValidity({ onlySelf: true, emitEvent: emitEvent });\n\t        };\n\t        AbstractControl.prototype._runValidator = function () {\n\t            return isPresent(this.validator) ? this.validator(this) : null;\n\t        };\n\t        AbstractControl.prototype._runAsyncValidator = function (emitEvent) {\n\t            var _this = this;\n\t            if (isPresent(this.asyncValidator)) {\n\t                this._status = PENDING;\n\t                this._cancelExistingSubscription();\n\t                var obs = toObservable(this.asyncValidator(this));\n\t                this._asyncValidationSubscription = obs.subscribe({ next: function (res) { return _this.setErrors(res, { emitEvent: emitEvent }); } });\n\t            }\n\t        };\n\t        AbstractControl.prototype._cancelExistingSubscription = function () {\n\t            if (isPresent(this._asyncValidationSubscription)) {\n\t                this._asyncValidationSubscription.unsubscribe();\n\t            }\n\t        };\n\t        AbstractControl.prototype._disabledChanged = function (originalStatus) {\n\t            return this._status !== originalStatus &&\n\t                (this._status === DISABLED || originalStatus === DISABLED);\n\t        };\n\t        /**\n\t         * Sets errors on a form control.\n\t         *\n\t         * This is used when validations are run not automatically, but manually by the user.\n\t         *\n\t         * Calling `setErrors` will also update the validity of the parent control.\n\t         *\n\t         * ## Usage\n\t         *\n\t         * ```\n\t         * var login = new FormControl(\"someLogin\");\n\t         * login.setErrors({\n\t         *   \"notUnique\": true\n\t         * });\n\t         *\n\t         * expect(login.valid).toEqual(false);\n\t         * expect(login.errors).toEqual({\"notUnique\": true});\n\t         *\n\t         * login.updateValue(\"someOtherLogin\");\n\t         *\n\t         * expect(login.valid).toEqual(true);\n\t         * ```\n\t         */\n\t        AbstractControl.prototype.setErrors = function (errors, _a) {\n\t            var emitEvent = (_a === void 0 ? {} : _a).emitEvent;\n\t            emitEvent = isPresent(emitEvent) ? emitEvent : true;\n\t            this._errors = errors;\n\t            this._updateControlsErrors(emitEvent);\n\t        };\n\t        AbstractControl.prototype.get = function (path) { return _find(this, path, '.'); };\n\t        AbstractControl.prototype.getError = function (errorCode, path) {\n\t            if (path === void 0) { path = null; }\n\t            var control = isPresent(path) && !ListWrapper.isEmpty(path) ? this.get(path) : this;\n\t            if (isPresent(control) && isPresent(control._errors)) {\n\t                return StringMapWrapper.get(control._errors, errorCode);\n\t            }\n\t            else {\n\t                return null;\n\t            }\n\t        };\n\t        AbstractControl.prototype.hasError = function (errorCode, path) {\n\t            if (path === void 0) { path = null; }\n\t            return isPresent(this.getError(errorCode, path));\n\t        };\n\t        Object.defineProperty(AbstractControl.prototype, \"root\", {\n\t            get: function () {\n\t                var x = this;\n\t                while (isPresent(x._parent)) {\n\t                    x = x._parent;\n\t                }\n\t                return x;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /** @internal */\n\t        AbstractControl.prototype._updateControlsErrors = function (emitEvent) {\n\t            this._status = this._calculateStatus();\n\t            if (emitEvent) {\n\t                this._statusChanges.emit(this._status);\n\t            }\n\t            if (isPresent(this._parent)) {\n\t                this._parent._updateControlsErrors(emitEvent);\n\t            }\n\t        };\n\t        /** @internal */\n\t        AbstractControl.prototype._initObservables = function () {\n\t            this._valueChanges = new EventEmitter();\n\t            this._statusChanges = new EventEmitter();\n\t        };\n\t        AbstractControl.prototype._calculateStatus = function () {\n\t            if (isPresent(this._errors))\n\t                return INVALID;\n\t            if (this._anyControlsHaveStatus(PENDING))\n\t                return PENDING;\n\t            if (this._anyControlsHaveStatus(INVALID))\n\t                return INVALID;\n\t            if (this._allControlsDisabled())\n\t                return DISABLED;\n\t            return VALID;\n\t        };\n\t        /** @internal */\n\t        AbstractControl.prototype._anyControlsHaveStatus = function (status) {\n\t            return this._anyControls(function (control) { return control.status == status; });\n\t        };\n\t        /** @internal */\n\t        AbstractControl.prototype._anyControlsDirty = function () {\n\t            return this._anyControls(function (control) { return control.dirty; });\n\t        };\n\t        /** @internal */\n\t        AbstractControl.prototype._anyControlsTouched = function () {\n\t            return this._anyControls(function (control) { return control.touched; });\n\t        };\n\t        /** @internal */\n\t        AbstractControl.prototype._updatePristine = function (_a) {\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            this._pristine = !this._anyControlsDirty();\n\t            if (isPresent(this._parent) && !onlySelf) {\n\t                this._parent._updatePristine({ onlySelf: onlySelf });\n\t            }\n\t        };\n\t        /** @internal */\n\t        AbstractControl.prototype._updateTouched = function (_a) {\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            this._touched = this._anyControlsTouched();\n\t            if (isPresent(this._parent) && !onlySelf) {\n\t                this._parent._updateTouched({ onlySelf: onlySelf });\n\t            }\n\t        };\n\t        /** @internal */\n\t        AbstractControl.prototype._onDisabledChange = function (isDisabled) { };\n\t        /** @internal */\n\t        AbstractControl.prototype._isBoxedValue = function (formState) {\n\t            return isStringMap(formState) && Object.keys(formState).length === 2 && 'value' in formState &&\n\t                'disabled' in formState;\n\t        };\n\t        return AbstractControl;\n\t    }());\n\t    /**\n\t     * Defines a part of a form that cannot be divided into other controls. `FormControl`s have values\n\t     * and\n\t     * validation state, which is determined by an optional validation function.\n\t     *\n\t     * `FormControl` is one of the three fundamental building blocks used to define forms in Angular,\n\t     * along\n\t     * with {@link FormGroup} and {@link FormArray}.\n\t     *\n\t     * ## Usage\n\t     *\n\t     * By default, a `FormControl` is created for every `<input>` or other form component.\n\t     * With {@link FormControlDirective} or {@link FormGroupDirective} an existing {@link FormControl}\n\t     * can be bound to a DOM element instead. This `FormControl` can be configured with a custom\n\t     * validation function.\n\t     *\n\t     * @stable\n\t     */\n\t    var FormControl = (function (_super) {\n\t        __extends$6(FormControl, _super);\n\t        function FormControl(formState, validator, asyncValidator) {\n\t            if (formState === void 0) { formState = null; }\n\t            if (validator === void 0) { validator = null; }\n\t            if (asyncValidator === void 0) { asyncValidator = null; }\n\t            _super.call(this, coerceToValidator(validator), coerceToAsyncValidator(asyncValidator));\n\t            /** @internal */\n\t            this._onChange = [];\n\t            this._applyFormState(formState);\n\t            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n\t            this._initObservables();\n\t        }\n\t        /**\n\t         * Set the value of the form control to `value`.\n\t         *\n\t         * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`\n\t         * and not its parent component. If `emitEvent` is `true`, this change will cause a\n\t         * `valueChanges` event on the `FormControl` to be emitted. Both of these options default to\n\t         * `false`.\n\t         *\n\t         * If `emitModelToViewChange` is `true`, the view will be notified about the new value\n\t         * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not\n\t         * specified.\n\t         *\n\t         * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the\n\t         * model.  This is the default behavior if `emitViewToModelChange` is not specified.\n\t         */\n\t        FormControl.prototype.setValue = function (value, _a) {\n\t            var _this = this;\n\t            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent, emitModelToViewChange = _b.emitModelToViewChange, emitViewToModelChange = _b.emitViewToModelChange;\n\t            emitModelToViewChange = isPresent(emitModelToViewChange) ? emitModelToViewChange : true;\n\t            emitViewToModelChange = isPresent(emitViewToModelChange) ? emitViewToModelChange : true;\n\t            this._value = value;\n\t            if (this._onChange.length && emitModelToViewChange) {\n\t                this._onChange.forEach(function (changeFn) { return changeFn(_this._value, emitViewToModelChange); });\n\t            }\n\t            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n\t        };\n\t        /**\n\t         * This function is functionally the same as updateValue() at this level.  It exists for\n\t         * symmetry with patchValue() on FormGroups and FormArrays, where it does behave differently.\n\t         */\n\t        FormControl.prototype.patchValue = function (value, options) {\n\t            if (options === void 0) { options = {}; }\n\t            this.setValue(value, options);\n\t        };\n\t        FormControl.prototype.reset = function (formState, _a) {\n\t            if (formState === void 0) { formState = null; }\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            this._applyFormState(formState);\n\t            this.markAsPristine({ onlySelf: onlySelf });\n\t            this.markAsUntouched({ onlySelf: onlySelf });\n\t            this.setValue(this._value, { onlySelf: onlySelf });\n\t        };\n\t        /**\n\t         * @internal\n\t         */\n\t        FormControl.prototype._updateValue = function () { };\n\t        /**\n\t         * @internal\n\t         */\n\t        FormControl.prototype._anyControls = function (condition) { return false; };\n\t        /**\n\t         * @internal\n\t         */\n\t        FormControl.prototype._allControlsDisabled = function () { return this.disabled; };\n\t        /**\n\t         * Register a listener for change events.\n\t         */\n\t        FormControl.prototype.registerOnChange = function (fn) { this._onChange.push(fn); };\n\t        /**\n\t         * @internal\n\t         */\n\t        FormControl.prototype._clearChangeFns = function () {\n\t            this._onChange = [];\n\t            this._onDisabledChange = null;\n\t        };\n\t        /**\n\t         * Register a listener for disabled events.\n\t         */\n\t        FormControl.prototype.registerOnDisabledChange = function (fn) { this._onDisabledChange = fn; };\n\t        /**\n\t         * @internal\n\t         */\n\t        FormControl.prototype._forEachChild = function (cb) { };\n\t        FormControl.prototype._applyFormState = function (formState) {\n\t            if (this._isBoxedValue(formState)) {\n\t                this._value = formState.value;\n\t                formState.disabled ? this.disable({ onlySelf: true, emitEvent: false }) :\n\t                    this.enable({ onlySelf: true, emitEvent: false });\n\t            }\n\t            else {\n\t                this._value = formState;\n\t            }\n\t        };\n\t        return FormControl;\n\t    }(AbstractControl));\n\t    /**\n\t     * Defines a part of a form, of fixed length, that can contain other controls.\n\t     *\n\t     * A `FormGroup` aggregates the values of each {@link FormControl} in the group.\n\t     * The status of a `FormGroup` depends on the status of its children.\n\t     * If one of the controls in a group is invalid, the entire group is invalid.\n\t     * Similarly, if a control changes its value, the entire group changes as well.\n\t     *\n\t     * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\n\t     * along with {@link FormControl} and {@link FormArray}. {@link FormArray} can also contain other\n\t     * controls, but is of variable length.\n\t     *\n\t     *\n\t     * @stable\n\t     */\n\t    var FormGroup = (function (_super) {\n\t        __extends$6(FormGroup, _super);\n\t        function FormGroup(controls, validator, asyncValidator) {\n\t            if (validator === void 0) { validator = null; }\n\t            if (asyncValidator === void 0) { asyncValidator = null; }\n\t            _super.call(this, validator, asyncValidator);\n\t            this.controls = controls;\n\t            this._initObservables();\n\t            this._setParentForControls();\n\t            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n\t        }\n\t        /**\n\t         * Register a control with the group's list of controls.\n\t         */\n\t        FormGroup.prototype.registerControl = function (name, control) {\n\t            if (this.controls[name])\n\t                return this.controls[name];\n\t            this.controls[name] = control;\n\t            control.setParent(this);\n\t            return control;\n\t        };\n\t        /**\n\t         * Add a control to this group.\n\t         */\n\t        FormGroup.prototype.addControl = function (name, control) {\n\t            this.registerControl(name, control);\n\t            this.updateValueAndValidity();\n\t        };\n\t        /**\n\t         * Remove a control from this group.\n\t         */\n\t        FormGroup.prototype.removeControl = function (name) {\n\t            StringMapWrapper.delete(this.controls, name);\n\t            this.updateValueAndValidity();\n\t        };\n\t        /**\n\t         * Check whether there is a control with the given name in the group.\n\t         */\n\t        FormGroup.prototype.contains = function (controlName) {\n\t            var c = StringMapWrapper.contains(this.controls, controlName);\n\t            return c && this.get(controlName).enabled;\n\t        };\n\t        FormGroup.prototype.setValue = function (value, _a) {\n\t            var _this = this;\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            this._checkAllValuesPresent(value);\n\t            StringMapWrapper.forEach(value, function (newValue, name) {\n\t                _this._throwIfControlMissing(name);\n\t                _this.controls[name].setValue(newValue, { onlySelf: true });\n\t            });\n\t            this.updateValueAndValidity({ onlySelf: onlySelf });\n\t        };\n\t        FormGroup.prototype.patchValue = function (value, _a) {\n\t            var _this = this;\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            StringMapWrapper.forEach(value, function (newValue, name) {\n\t                if (_this.controls[name]) {\n\t                    _this.controls[name].patchValue(newValue, { onlySelf: true });\n\t                }\n\t            });\n\t            this.updateValueAndValidity({ onlySelf: onlySelf });\n\t        };\n\t        FormGroup.prototype.reset = function (value, _a) {\n\t            if (value === void 0) { value = {}; }\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            this._forEachChild(function (control, name) {\n\t                control.reset(value[name], { onlySelf: true });\n\t            });\n\t            this.updateValueAndValidity({ onlySelf: onlySelf });\n\t            this._updatePristine({ onlySelf: onlySelf });\n\t            this._updateTouched({ onlySelf: onlySelf });\n\t        };\n\t        FormGroup.prototype.getRawValue = function () {\n\t            return this._reduceChildren({}, function (acc, control, name) {\n\t                acc[name] = control.value;\n\t                return acc;\n\t            });\n\t        };\n\t        /** @internal */\n\t        FormGroup.prototype._throwIfControlMissing = function (name) {\n\t            if (!Object.keys(this.controls).length) {\n\t                throw new Error(\"\\n        There are no form controls registered with this group yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");\n\t            }\n\t            if (!this.controls[name]) {\n\t                throw new Error(\"Cannot find form control with name: \" + name + \".\");\n\t            }\n\t        };\n\t        /** @internal */\n\t        FormGroup.prototype._forEachChild = function (cb) {\n\t            StringMapWrapper.forEach(this.controls, cb);\n\t        };\n\t        /** @internal */\n\t        FormGroup.prototype._setParentForControls = function () {\n\t            var _this = this;\n\t            this._forEachChild(function (control, name) { control.setParent(_this); });\n\t        };\n\t        /** @internal */\n\t        FormGroup.prototype._updateValue = function () { this._value = this._reduceValue(); };\n\t        /** @internal */\n\t        FormGroup.prototype._anyControls = function (condition) {\n\t            var _this = this;\n\t            var res = false;\n\t            this._forEachChild(function (control, name) {\n\t                res = res || (_this.contains(name) && condition(control));\n\t            });\n\t            return res;\n\t        };\n\t        /** @internal */\n\t        FormGroup.prototype._reduceValue = function () {\n\t            var _this = this;\n\t            return this._reduceChildren({}, function (acc, control, name) {\n\t                if (control.enabled || _this.disabled) {\n\t                    acc[name] = control.value;\n\t                }\n\t                return acc;\n\t            });\n\t        };\n\t        /** @internal */\n\t        FormGroup.prototype._reduceChildren = function (initValue, fn) {\n\t            var res = initValue;\n\t            this._forEachChild(function (control, name) { res = fn(res, control, name); });\n\t            return res;\n\t        };\n\t        /** @internal */\n\t        FormGroup.prototype._allControlsDisabled = function () {\n\t            for (var _i = 0, _a = Object.keys(this.controls); _i < _a.length; _i++) {\n\t                var controlName = _a[_i];\n\t                if (this.controls[controlName].enabled) {\n\t                    return false;\n\t                }\n\t            }\n\t            return !StringMapWrapper.isEmpty(this.controls);\n\t        };\n\t        /** @internal */\n\t        FormGroup.prototype._checkAllValuesPresent = function (value) {\n\t            this._forEachChild(function (control, name) {\n\t                if (value[name] === undefined) {\n\t                    throw new Error(\"Must supply a value for form control with name: '\" + name + \"'.\");\n\t                }\n\t            });\n\t        };\n\t        return FormGroup;\n\t    }(AbstractControl));\n\t    /**\n\t     * Defines a part of a form, of variable length, that can contain other controls.\n\t     *\n\t     * A `FormArray` aggregates the values of each {@link FormControl} in the group.\n\t     * The status of a `FormArray` depends on the status of its children.\n\t     * If one of the controls in a group is invalid, the entire array is invalid.\n\t     * Similarly, if a control changes its value, the entire array changes as well.\n\t     *\n\t     * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,\n\t     * along with {@link FormControl} and {@link FormGroup}. {@link FormGroup} can also contain\n\t     * other controls, but is of fixed length.\n\t     *\n\t     * ## Adding or removing controls\n\t     *\n\t     * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods\n\t     * in `FormArray` itself. These methods ensure the controls are properly tracked in the\n\t     * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n\t     * the `FormArray` directly, as that will result in strange and unexpected behavior such\n\t     * as broken change detection.\n\t     *\n\t     *\n\t     * @stable\n\t     */\n\t    var FormArray = (function (_super) {\n\t        __extends$6(FormArray, _super);\n\t        function FormArray(controls, validator, asyncValidator) {\n\t            if (validator === void 0) { validator = null; }\n\t            if (asyncValidator === void 0) { asyncValidator = null; }\n\t            _super.call(this, validator, asyncValidator);\n\t            this.controls = controls;\n\t            this._initObservables();\n\t            this._setParentForControls();\n\t            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n\t        }\n\t        /**\n\t         * Get the {@link AbstractControl} at the given `index` in the array.\n\t         */\n\t        FormArray.prototype.at = function (index) { return this.controls[index]; };\n\t        /**\n\t         * Insert a new {@link AbstractControl} at the end of the array.\n\t         */\n\t        FormArray.prototype.push = function (control) {\n\t            this.controls.push(control);\n\t            control.setParent(this);\n\t            this.updateValueAndValidity();\n\t        };\n\t        /**\n\t         * Insert a new {@link AbstractControl} at the given `index` in the array.\n\t         */\n\t        FormArray.prototype.insert = function (index, control) {\n\t            ListWrapper.insert(this.controls, index, control);\n\t            control.setParent(this);\n\t            this.updateValueAndValidity();\n\t        };\n\t        /**\n\t         * Remove the control at the given `index` in the array.\n\t         */\n\t        FormArray.prototype.removeAt = function (index) {\n\t            ListWrapper.removeAt(this.controls, index);\n\t            this.updateValueAndValidity();\n\t        };\n\t        Object.defineProperty(FormArray.prototype, \"length\", {\n\t            /**\n\t             * Length of the control array.\n\t             */\n\t            get: function () { return this.controls.length; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        FormArray.prototype.setValue = function (value, _a) {\n\t            var _this = this;\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            this._checkAllValuesPresent(value);\n\t            value.forEach(function (newValue, index) {\n\t                _this._throwIfControlMissing(index);\n\t                _this.at(index).setValue(newValue, { onlySelf: true });\n\t            });\n\t            this.updateValueAndValidity({ onlySelf: onlySelf });\n\t        };\n\t        FormArray.prototype.patchValue = function (value, _a) {\n\t            var _this = this;\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            value.forEach(function (newValue, index) {\n\t                if (_this.at(index)) {\n\t                    _this.at(index).patchValue(newValue, { onlySelf: true });\n\t                }\n\t            });\n\t            this.updateValueAndValidity({ onlySelf: onlySelf });\n\t        };\n\t        FormArray.prototype.reset = function (value, _a) {\n\t            if (value === void 0) { value = []; }\n\t            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n\t            this._forEachChild(function (control, index) {\n\t                control.reset(value[index], { onlySelf: true });\n\t            });\n\t            this.updateValueAndValidity({ onlySelf: onlySelf });\n\t            this._updatePristine({ onlySelf: onlySelf });\n\t            this._updateTouched({ onlySelf: onlySelf });\n\t        };\n\t        FormArray.prototype.getRawValue = function () { return this.controls.map(function (control) { return control.value; }); };\n\t        /** @internal */\n\t        FormArray.prototype._throwIfControlMissing = function (index) {\n\t            if (!this.controls.length) {\n\t                throw new Error(\"\\n        There are no form controls registered with this array yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");\n\t            }\n\t            if (!this.at(index)) {\n\t                throw new Error(\"Cannot find form control at index \" + index);\n\t            }\n\t        };\n\t        /** @internal */\n\t        FormArray.prototype._forEachChild = function (cb) {\n\t            this.controls.forEach(function (control, index) { cb(control, index); });\n\t        };\n\t        /** @internal */\n\t        FormArray.prototype._updateValue = function () {\n\t            var _this = this;\n\t            this._value = this.controls.filter(function (control) { return control.enabled || _this.disabled; })\n\t                .map(function (control) { return control.value; });\n\t        };\n\t        /** @internal */\n\t        FormArray.prototype._anyControls = function (condition) {\n\t            return this.controls.some(function (control) { return control.enabled && condition(control); });\n\t        };\n\t        /** @internal */\n\t        FormArray.prototype._setParentForControls = function () {\n\t            var _this = this;\n\t            this._forEachChild(function (control) { control.setParent(_this); });\n\t        };\n\t        /** @internal */\n\t        FormArray.prototype._checkAllValuesPresent = function (value) {\n\t            this._forEachChild(function (control, i) {\n\t                if (value[i] === undefined) {\n\t                    throw new Error(\"Must supply a value for form control at index: \" + i + \".\");\n\t                }\n\t            });\n\t        };\n\t        /** @internal */\n\t        FormArray.prototype._allControlsDisabled = function () {\n\t            for (var _i = 0, _a = this.controls; _i < _a.length; _i++) {\n\t                var control = _a[_i];\n\t                if (control.enabled)\n\t                    return false;\n\t            }\n\t            return !!this.controls.length;\n\t        };\n\t        return FormArray;\n\t    }(AbstractControl));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$4 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var formDirectiveProvider = {\n\t        provide: ControlContainer,\n\t        useExisting: _angular_core.forwardRef(function () { return NgForm; })\n\t    };\n\t    var resolvedPromise = Promise.resolve(null);\n\t    /**\n\t     * If `NgForm` is bound in a component, `<form>` elements in that component will be\n\t     * upgraded to use the Angular form system.\n\t     *\n\t     * ### Typical Use\n\t     *\n\t     * Include `FORM_DIRECTIVES` in the `directives` section of a {@link Component} annotation\n\t     * to use `NgForm` and its associated controls.\n\t     *\n\t     * ### Structure\n\t     *\n\t     * An Angular form is a collection of `FormControl`s in some hierarchy.\n\t     * `FormControl`s can be at the top level or can be organized in `FormGroup`s\n\t     * or `FormArray`s. This hierarchy is reflected in the form's `value`, a\n\t     * JSON object that mirrors the form structure.\n\t     *\n\t     * ### Submission\n\t     *\n\t     * The `ngSubmit` event signals when the user triggers a form submission.\n\t     *\n\t     *  ```typescript\n\t     * @Component({\n\t     *   selector: 'my-app',\n\t     *   template: `\n\t     *     <div>\n\t     *       <p>Submit the form to see the data object Angular builds</p>\n\t     *       <h2>NgForm demo</h2>\n\t     *       <form #f=\"ngForm\" (ngSubmit)=\"onSubmit(f.value)\">\n\t     *         <h3>Control group: credentials</h3>\n\t     *         <div ngModelGroup=\"credentials\">\n\t     *           <p>Login: <input type=\"text\" name=\"login\" ngModel></p>\n\t     *           <p>Password: <input type=\"password\" name=\"password\" ngModel></p>\n\t     *         </div>\n\t     *         <h3>Control group: person</h3>\n\t     *         <div ngModelGroup=\"person\">\n\t     *           <p>First name: <input type=\"text\" name=\"firstName\" ngModel></p>\n\t     *           <p>Last name: <input type=\"text\" name=\"lastName\" ngModel></p>\n\t     *         </div>\n\t     *         <button type=\"submit\">Submit Form</button>\n\t     *       <p>Form data submitted:</p>\n\t     *       </form>\n\t     *       <pre>{{data}}</pre>\n\t     *     </div>\n\t     * `,\n\t     *   directives: []\n\t     * })\n\t     * export class App {\n\t     *   constructor() {}\n\t     *\n\t     *   data: string;\n\t     *\n\t     *   onSubmit(data) {\n\t     *     this.data = JSON.stringify(data, null, 2);\n\t     *   }\n\t     * }\n\t     *  ```\n\t     *\n\t     *  @stable\n\t     */\n\t    var NgForm = (function (_super) {\n\t        __extends$4(NgForm, _super);\n\t        function NgForm(validators, asyncValidators) {\n\t            _super.call(this);\n\t            this._submitted = false;\n\t            this.ngSubmit = new EventEmitter();\n\t            this.form =\n\t                new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\n\t        }\n\t        Object.defineProperty(NgForm.prototype, \"submitted\", {\n\t            get: function () { return this._submitted; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgForm.prototype, \"formDirective\", {\n\t            get: function () { return this; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgForm.prototype, \"control\", {\n\t            get: function () { return this.form; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgForm.prototype, \"path\", {\n\t            get: function () { return []; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgForm.prototype, \"controls\", {\n\t            get: function () { return this.form.controls; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        NgForm.prototype.addControl = function (dir) {\n\t            var _this = this;\n\t            resolvedPromise.then(function () {\n\t                var container = _this._findContainer(dir.path);\n\t                dir._control = container.registerControl(dir.name, dir.control);\n\t                setUpControl(dir.control, dir);\n\t                dir.control.updateValueAndValidity({ emitEvent: false });\n\t            });\n\t        };\n\t        NgForm.prototype.getControl = function (dir) { return this.form.get(dir.path); };\n\t        NgForm.prototype.removeControl = function (dir) {\n\t            var _this = this;\n\t            resolvedPromise.then(function () {\n\t                var container = _this._findContainer(dir.path);\n\t                if (isPresent(container)) {\n\t                    container.removeControl(dir.name);\n\t                }\n\t            });\n\t        };\n\t        NgForm.prototype.addFormGroup = function (dir) {\n\t            var _this = this;\n\t            resolvedPromise.then(function () {\n\t                var container = _this._findContainer(dir.path);\n\t                var group = new FormGroup({});\n\t                setUpFormContainer(group, dir);\n\t                container.registerControl(dir.name, group);\n\t                group.updateValueAndValidity({ emitEvent: false });\n\t            });\n\t        };\n\t        NgForm.prototype.removeFormGroup = function (dir) {\n\t            var _this = this;\n\t            resolvedPromise.then(function () {\n\t                var container = _this._findContainer(dir.path);\n\t                if (isPresent(container)) {\n\t                    container.removeControl(dir.name);\n\t                }\n\t            });\n\t        };\n\t        NgForm.prototype.getFormGroup = function (dir) { return this.form.get(dir.path); };\n\t        NgForm.prototype.updateModel = function (dir, value) {\n\t            var _this = this;\n\t            resolvedPromise.then(function () {\n\t                var ctrl = _this.form.get(dir.path);\n\t                ctrl.setValue(value);\n\t            });\n\t        };\n\t        NgForm.prototype.setValue = function (value) { this.control.setValue(value); };\n\t        NgForm.prototype.onSubmit = function () {\n\t            this._submitted = true;\n\t            this.ngSubmit.emit(null);\n\t            return false;\n\t        };\n\t        NgForm.prototype.onReset = function () { this.resetForm(); };\n\t        NgForm.prototype.resetForm = function (value) {\n\t            if (value === void 0) { value = undefined; }\n\t            this.form.reset(value);\n\t            this._submitted = false;\n\t        };\n\t        /** @internal */\n\t        NgForm.prototype._findContainer = function (path) {\n\t            path.pop();\n\t            return ListWrapper.isEmpty(path) ? this.form : this.form.get(path);\n\t        };\n\t        NgForm.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',\n\t                        providers: [formDirectiveProvider],\n\t                        host: { '(submit)': 'onSubmit()', '(reset)': 'onReset()' },\n\t                        outputs: ['ngSubmit'],\n\t                        exportAs: 'ngForm'\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        NgForm.ctorParameters = [\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n\t        ];\n\t        return NgForm;\n\t    }(ControlContainer));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var Examples = {\n\t        formControlName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <input formControlName=\\\"firstName\\\">\\n    </div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       firstName: new FormControl()\\n    });\",\n\t        formGroupName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <div formGroupName=\\\"person\\\">\\n          <input formControlName=\\\"firstName\\\">\\n       </div>\\n    </div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       person: new FormGroup({ firstName: new FormControl() })\\n    });\",\n\t        formArrayName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <div formArrayName=\\\"cities\\\">\\n        <div *ngFor=\\\"let city of cityArray.controls; let i=index\\\">\\n          <input [formControlName]=\\\"i\\\">\\n        </div>\\n      </div>\\n    </div>\\n\\n    In your class:\\n\\n    this.cityArray = new FormArray([new FormControl('SF')]);\\n    this.myGroup = new FormGroup({\\n      cities: this.cityArray\\n    });\",\n\t        ngModelGroup: \"\\n    <form>\\n       <div ngModelGroup=\\\"person\\\">\\n          <input [(ngModel)]=\\\"person.name\\\" name=\\\"firstName\\\">\\n       </div>\\n    </form>\",\n\t        ngModelWithFormGroup: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <input formControlName=\\\"firstName\\\">\\n       <input [(ngModel)]=\\\"showMoreControls\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n    </div>\\n  \"\n\t    };\n\t\n\t    var TemplateDrivenErrors = (function () {\n\t        function TemplateDrivenErrors() {\n\t        }\n\t        TemplateDrivenErrors.modelParentException = function () {\n\t            throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\\n      formGroup's partner directive \\\"formControlName\\\" instead.  Example:\\n\\n      \" + Examples.formControlName + \"\\n\\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\\n\\n      Example:\\n\\n      \" + Examples.ngModelWithFormGroup);\n\t        };\n\t        TemplateDrivenErrors.formGroupNameException = function () {\n\t            throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\\n\\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\\n\\n      \" + Examples.formGroupName + \"\\n\\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\\n\\n      \" + Examples.ngModelGroup);\n\t        };\n\t        TemplateDrivenErrors.missingNameException = function () {\n\t            throw new Error(\"If ngModel is used within a form tag, either the name attribute must be set or the form\\n      control must be defined as 'standalone' in ngModelOptions.\\n\\n      Example 1: <input [(ngModel)]=\\\"person.firstName\\\" name=\\\"first\\\">\\n      Example 2: <input [(ngModel)]=\\\"person.firstName\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\");\n\t        };\n\t        TemplateDrivenErrors.modelGroupParentException = function () {\n\t            throw new Error(\"\\n      ngModelGroup cannot be used with a parent formGroup directive.\\n\\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\\n\\n      \" + Examples.formGroupName + \"\\n\\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\\n\\n      \" + Examples.ngModelGroup);\n\t        };\n\t        return TemplateDrivenErrors;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$8 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var modelGroupProvider = {\n\t        provide: ControlContainer,\n\t        useExisting: _angular_core.forwardRef(function () { return NgModelGroup; })\n\t    };\n\t    /**\n\t     * Creates and binds a model group to a DOM element.\n\t     *\n\t     * This directive can only be used as a child of {@link NgForm}.\n\t     *\n\t     * ```typescript\n\t     * @Component({\n\t     *   selector: 'my-app',\n\t     *   template: `\n\t     *     <div>\n\t     *       <h2>Angular forms Example</h2>\n\t     *       <form #f=\"ngForm\">\n\t     *         <div ngModelGroup=\"name\" #mgName=\"ngModelGroup\">\n\t     *           <h3>Enter your name:</h3>\n\t     *           <p>First: <input name=\"first\" ngModel required></p>\n\t     *           <p>Middle: <input name=\"middle\" ngModel></p>\n\t     *           <p>Last: <input name=\"last\" ngModel required></p>\n\t     *         </div>\n\t     *         <h3>Name value:</h3>\n\t     *         <pre>{{ mgName.value | json }}</pre>\n\t     *         <p>Name is {{mgName?.valid ? \"valid\" : \"invalid\"}}</p>\n\t     *         <h3>What's your favorite food?</h3>\n\t     *         <p><input name=\"food\" ngModel></p>\n\t     *         <h3>Form value</h3>\n\t     *         <pre>{{ f.value | json }}</pre>\n\t     *       </form>\n\t     *     </div>\n\t     *   `\n\t     * })\n\t     * export class App {}\n\t     * ```\n\t     *\n\t     * This example declares a model group for a user's name. The value and validation state of\n\t     * this group can be accessed separately from the overall form.\n\t     *\n\t     * @stable\n\t     */\n\t    var NgModelGroup = (function (_super) {\n\t        __extends$8(NgModelGroup, _super);\n\t        function NgModelGroup(parent, validators, asyncValidators) {\n\t            _super.call(this);\n\t            this._parent = parent;\n\t            this._validators = validators;\n\t            this._asyncValidators = asyncValidators;\n\t        }\n\t        /** @internal */\n\t        NgModelGroup.prototype._checkParentType = function () {\n\t            if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n\t                TemplateDrivenErrors.modelGroupParentException();\n\t            }\n\t        };\n\t        NgModelGroup.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup' },] },\n\t        ];\n\t        /** @nocollapse */\n\t        NgModelGroup.ctorParameters = [\n\t            { type: ControlContainer, decorators: [{ type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n\t        ];\n\t        NgModelGroup.propDecorators = {\n\t            'name': [{ type: _angular_core.Input, args: ['ngModelGroup',] },],\n\t        };\n\t        return NgModelGroup;\n\t    }(AbstractFormGroupDirective));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$7 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var formControlBinding = {\n\t        provide: NgControl,\n\t        useExisting: _angular_core.forwardRef(function () { return NgModel; })\n\t    };\n\t    var resolvedPromise$1 = Promise.resolve(null);\n\t    /**\n\t     * Binds a domain model to a form control.\n\t     *\n\t     * ### Usage\n\t     *\n\t     * `ngModel` binds an existing domain model to a form control. For a\n\t     * two-way binding, use `[(ngModel)]` to ensure the model updates in\n\t     * both directions.\n\t     *\n\t     *  ```typescript\n\t     * @Component({\n\t     *      selector: \"search-comp\",\n\t     *      directives: [],\n\t     *      template: `<input type='text' [(ngModel)]=\"searchQuery\">`\n\t     *      })\n\t     * class SearchComp {\n\t     *  searchQuery: string;\n\t     * }\n\t     *  ```\n\t     *\n\t     *  @stable\n\t     */\n\t    var NgModel = (function (_super) {\n\t        __extends$7(NgModel, _super);\n\t        function NgModel(parent, validators, asyncValidators, valueAccessors) {\n\t            _super.call(this);\n\t            /** @internal */\n\t            this._control = new FormControl();\n\t            /** @internal */\n\t            this._registered = false;\n\t            this.update = new EventEmitter();\n\t            this._parent = parent;\n\t            this._rawValidators = validators || [];\n\t            this._rawAsyncValidators = asyncValidators || [];\n\t            this.valueAccessor = selectValueAccessor(this, valueAccessors);\n\t        }\n\t        NgModel.prototype.ngOnChanges = function (changes) {\n\t            this._checkForErrors();\n\t            if (!this._registered)\n\t                this._setUpControl();\n\t            if ('isDisabled' in changes) {\n\t                this._updateDisabled(changes);\n\t            }\n\t            if (isPropertyUpdated(changes, this.viewModel)) {\n\t                this._updateValue(this.model);\n\t                this.viewModel = this.model;\n\t            }\n\t        };\n\t        NgModel.prototype.ngOnDestroy = function () { this.formDirective && this.formDirective.removeControl(this); };\n\t        Object.defineProperty(NgModel.prototype, \"control\", {\n\t            get: function () { return this._control; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgModel.prototype, \"path\", {\n\t            get: function () {\n\t                return this._parent ? controlPath(this.name, this._parent) : [this.name];\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgModel.prototype, \"formDirective\", {\n\t            get: function () { return this._parent ? this._parent.formDirective : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgModel.prototype, \"validator\", {\n\t            get: function () { return composeValidators(this._rawValidators); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgModel.prototype, \"asyncValidator\", {\n\t            get: function () {\n\t                return composeAsyncValidators(this._rawAsyncValidators);\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        NgModel.prototype.viewToModelUpdate = function (newValue) {\n\t            this.viewModel = newValue;\n\t            this.update.emit(newValue);\n\t        };\n\t        NgModel.prototype._setUpControl = function () {\n\t            this._isStandalone() ? this._setUpStandalone() :\n\t                this.formDirective.addControl(this);\n\t            this._registered = true;\n\t        };\n\t        NgModel.prototype._isStandalone = function () {\n\t            return !this._parent || (this.options && this.options.standalone);\n\t        };\n\t        NgModel.prototype._setUpStandalone = function () {\n\t            setUpControl(this._control, this);\n\t            this._control.updateValueAndValidity({ emitEvent: false });\n\t        };\n\t        NgModel.prototype._checkForErrors = function () {\n\t            if (!this._isStandalone()) {\n\t                this._checkParentType();\n\t            }\n\t            this._checkName();\n\t        };\n\t        NgModel.prototype._checkParentType = function () {\n\t            if (!(this._parent instanceof NgModelGroup) &&\n\t                this._parent instanceof AbstractFormGroupDirective) {\n\t                TemplateDrivenErrors.formGroupNameException();\n\t            }\n\t            else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n\t                TemplateDrivenErrors.modelParentException();\n\t            }\n\t        };\n\t        NgModel.prototype._checkName = function () {\n\t            if (this.options && this.options.name)\n\t                this.name = this.options.name;\n\t            if (!this._isStandalone() && !this.name) {\n\t                TemplateDrivenErrors.missingNameException();\n\t            }\n\t        };\n\t        NgModel.prototype._updateValue = function (value) {\n\t            var _this = this;\n\t            resolvedPromise$1.then(function () { _this.control.setValue(value, { emitViewToModelChange: false }); });\n\t        };\n\t        NgModel.prototype._updateDisabled = function (changes) {\n\t            var _this = this;\n\t            var disabledValue = changes['isDisabled'].currentValue;\n\t            var isDisabled = disabledValue != null && disabledValue != false;\n\t            resolvedPromise$1.then(function () {\n\t                if (isDisabled && !_this.control.disabled) {\n\t                    _this.control.disable();\n\t                }\n\t                else if (!isDisabled && _this.control.disabled) {\n\t                    _this.control.enable();\n\t                }\n\t            });\n\t        };\n\t        NgModel.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: '[ngModel]:not([formControlName]):not([formControl])',\n\t                        providers: [formControlBinding],\n\t                        exportAs: 'ngModel'\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        NgModel.ctorParameters = [\n\t            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },\n\t        ];\n\t        NgModel.propDecorators = {\n\t            'name': [{ type: _angular_core.Input },],\n\t            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],\n\t            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],\n\t            'options': [{ type: _angular_core.Input, args: ['ngModelOptions',] },],\n\t            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],\n\t        };\n\t        return NgModel;\n\t    }(NgControl));\n\t\n\t    var ReactiveErrors = (function () {\n\t        function ReactiveErrors() {\n\t        }\n\t        ReactiveErrors.controlParentException = function () {\n\t            throw new Error(\"formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \" + Examples.formControlName);\n\t        };\n\t        ReactiveErrors.ngModelGroupException = function () {\n\t            throw new Error(\"formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\\n       that also have a \\\"form\\\" prefix: formGroupName, formArrayName, or formGroup.\\n\\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\\n\\n        \" + Examples.formGroupName + \"\\n\\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\\n\\n        \" + Examples.ngModelGroup);\n\t        };\n\t        ReactiveErrors.missingFormException = function () {\n\t            throw new Error(\"formGroup expects a FormGroup instance. Please pass one in.\\n\\n       Example:\\n\\n       \" + Examples.formControlName);\n\t        };\n\t        ReactiveErrors.groupParentException = function () {\n\t            throw new Error(\"formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n      directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \" + Examples.formGroupName);\n\t        };\n\t        ReactiveErrors.arrayParentException = function () {\n\t            throw new Error(\"formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n        Example:\\n\\n        \" + Examples.formArrayName);\n\t        };\n\t        ReactiveErrors.disabledAttrWarning = function () {\n\t            console.warn(\"\\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\\n      you. We recommend using this approach to avoid 'changed after checked' errors.\\n       \\n      Example: \\n      form = new FormGroup({\\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\\n        last: new FormControl('Drew', Validators.required)\\n      });\\n    \");\n\t        };\n\t        return ReactiveErrors;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$9 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var formControlBinding$1 = {\n\t        provide: NgControl,\n\t        useExisting: _angular_core.forwardRef(function () { return FormControlDirective; })\n\t    };\n\t    /**\n\t     * Binds an existing {@link FormControl} to a DOM element. It requires importing the {@link\n\t     * ReactiveFormsModule}.\n\t     *\n\t     * In this example, we bind the control to an input element. When the value of the input element\n\t     * changes, the value of the control will reflect that change. Likewise, if the value of the\n\t     * control changes, the input element reflects that change.\n\t     *\n\t     *  ```typescript\n\t     * @Component({\n\t     *   selector: 'my-app',\n\t     *   template: `\n\t     *     <div>\n\t     *       <h2>Bind existing control example</h2>\n\t     *       <form>\n\t     *         <p>Element with existing control: <input type=\"text\"\n\t     * [formControl]=\"loginControl\"></p>\n\t     *         <p>Value of existing control: {{loginControl.value}}</p>\n\t     *       </form>\n\t     *     </div>\n\t     *   `,\n\t     * })\n\t     * export class App {\n\t     *   loginControl: FormControl = new FormControl('');\n\t     * }\n\t     *  ```\n\t     *\n\t     * ### ngModel\n\t     *\n\t     * We can also set the value of the form programmatically with setValue().\n\t     **\n\t     *  ```typescript\n\t     * @Component({\n\t     *      selector: \"login-comp\",\n\t\n\t     *      template: \"<input type='text' [formControl]='loginControl'>\"\n\t     *      })\n\t     * class LoginComp {\n\t     *  loginControl: FormControl = new FormControl('');\n\t     *\n\t     *  populate() {\n\t     *    this.loginControl.setValue('some login');\n\t     *  }\n\t     *\n\t     * }\n\t     *  ```\n\t     *\n\t     *  @stable\n\t     */\n\t    var FormControlDirective = (function (_super) {\n\t        __extends$9(FormControlDirective, _super);\n\t        function FormControlDirective(validators, asyncValidators, valueAccessors) {\n\t            _super.call(this);\n\t            this.update = new EventEmitter();\n\t            this._rawValidators = validators || [];\n\t            this._rawAsyncValidators = asyncValidators || [];\n\t            this.valueAccessor = selectValueAccessor(this, valueAccessors);\n\t        }\n\t        Object.defineProperty(FormControlDirective.prototype, \"isDisabled\", {\n\t            set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        FormControlDirective.prototype.ngOnChanges = function (changes) {\n\t            if (this._isControlChanged(changes)) {\n\t                setUpControl(this.form, this);\n\t                if (this.control.disabled)\n\t                    this.valueAccessor.setDisabledState(true);\n\t                this.form.updateValueAndValidity({ emitEvent: false });\n\t            }\n\t            if (isPropertyUpdated(changes, this.viewModel)) {\n\t                this.form.setValue(this.model);\n\t                this.viewModel = this.model;\n\t            }\n\t        };\n\t        Object.defineProperty(FormControlDirective.prototype, \"path\", {\n\t            get: function () { return []; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormControlDirective.prototype, \"validator\", {\n\t            get: function () { return composeValidators(this._rawValidators); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormControlDirective.prototype, \"asyncValidator\", {\n\t            get: function () {\n\t                return composeAsyncValidators(this._rawAsyncValidators);\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormControlDirective.prototype, \"control\", {\n\t            get: function () { return this.form; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        FormControlDirective.prototype.viewToModelUpdate = function (newValue) {\n\t            this.viewModel = newValue;\n\t            this.update.emit(newValue);\n\t        };\n\t        FormControlDirective.prototype._isControlChanged = function (changes) {\n\t            return StringMapWrapper.contains(changes, 'form');\n\t        };\n\t        FormControlDirective.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: '[formControl]', providers: [formControlBinding$1], exportAs: 'ngForm' },] },\n\t        ];\n\t        /** @nocollapse */\n\t        FormControlDirective.ctorParameters = [\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },\n\t        ];\n\t        FormControlDirective.propDecorators = {\n\t            'form': [{ type: _angular_core.Input, args: ['formControl',] },],\n\t            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],\n\t            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],\n\t            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],\n\t        };\n\t        return FormControlDirective;\n\t    }(NgControl));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$11 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var formDirectiveProvider$1 = {\n\t        provide: ControlContainer,\n\t        useExisting: _angular_core.forwardRef(function () { return FormGroupDirective; })\n\t    };\n\t    /**\n\t     * Binds an existing form group to a DOM element.  It requires importing the {@link\n\t     * ReactiveFormsModule}.\n\t     *\n\t     * In this example, we bind the form group to the form element, and we bind the login and\n\t     * password controls to the login and password elements.\n\t     *\n\t     *  ```typescript\n\t     * @Component({\n\t     *   selector: 'my-app',\n\t     *   template: `\n\t     *     <div>\n\t     *       <h2>Binding an existing form group</h2>\n\t     *       <form [formGroup]=\"loginForm\">\n\t     *         <p>Login: <input type=\"text\" formControlName=\"login\"></p>\n\t     *         <p>Password: <input type=\"password\" formControlName=\"password\"></p>\n\t     *       </form>\n\t     *       <p>Value:</p>\n\t     *       <pre>{{ loginForm.value | json}}</pre>\n\t     *     </div>\n\t     *   `\n\t     * })\n\t     * export class App {\n\t     *   loginForm: FormGroup;\n\t     *\n\t     *   constructor() {\n\t     *     this.loginForm = new FormGroup({\n\t     *       login: new FormControl(\"\"),\n\t     *       password: new FormControl(\"\")\n\t     *     });\n\t     *   }\n\t     *\n\t     * }\n\t     *  ```\n\t     *\n\t     * We can also use setValue() to populate the form programmatically.\n\t     *\n\t     *  ```typescript\n\t     * @Component({\n\t     *      selector: \"login-comp\",\n\t     *      template: `\n\t     *        <form [formGroup]='loginForm'>\n\t     *          Login <input type='text' formControlName='login'>\n\t     *          Password <input type='password' formControlName='password'>\n\t     *          <button (click)=\"onLogin()\">Login</button>\n\t     *        </form>`\n\t     *      })\n\t     * class LoginComp {\n\t     *  loginForm: FormGroup;\n\t     *\n\t     *  constructor() {\n\t     *    this.loginForm = new FormGroup({\n\t     *      login: new FormControl(''),\n\t     *      password: new FormControl('')\n\t     *    });\n\t     *  }\n\t     *\n\t     *  populate() {\n\t     *    this.loginForm.setValue({ login: 'some login', password: 'some password'});\n\t     *  }\n\t     *\n\t     *  onLogin(): void {\n\t     *    // this.credentials.login === 'some login'\n\t     *    // this.credentials.password === 'some password'\n\t     *  }\n\t     * }\n\t     *  ```\n\t     *\n\t     *  @stable\n\t     */\n\t    var FormGroupDirective = (function (_super) {\n\t        __extends$11(FormGroupDirective, _super);\n\t        function FormGroupDirective(_validators, _asyncValidators) {\n\t            _super.call(this);\n\t            this._validators = _validators;\n\t            this._asyncValidators = _asyncValidators;\n\t            this._submitted = false;\n\t            this.directives = [];\n\t            this.form = null;\n\t            this.ngSubmit = new EventEmitter();\n\t        }\n\t        FormGroupDirective.prototype.ngOnChanges = function (changes) {\n\t            this._checkFormPresent();\n\t            if (StringMapWrapper.contains(changes, 'form')) {\n\t                var sync = composeValidators(this._validators);\n\t                this.form.validator = Validators.compose([this.form.validator, sync]);\n\t                var async = composeAsyncValidators(this._asyncValidators);\n\t                this.form.asyncValidator = Validators.composeAsync([this.form.asyncValidator, async]);\n\t                this._updateDomValue(changes);\n\t            }\n\t        };\n\t        Object.defineProperty(FormGroupDirective.prototype, \"submitted\", {\n\t            get: function () { return this._submitted; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormGroupDirective.prototype, \"formDirective\", {\n\t            get: function () { return this; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormGroupDirective.prototype, \"control\", {\n\t            get: function () { return this.form; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormGroupDirective.prototype, \"path\", {\n\t            get: function () { return []; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        FormGroupDirective.prototype.addControl = function (dir) {\n\t            var ctrl = this.form.get(dir.path);\n\t            setUpControl(ctrl, dir);\n\t            ctrl.updateValueAndValidity({ emitEvent: false });\n\t            this.directives.push(dir);\n\t        };\n\t        FormGroupDirective.prototype.getControl = function (dir) { return this.form.get(dir.path); };\n\t        FormGroupDirective.prototype.removeControl = function (dir) { ListWrapper.remove(this.directives, dir); };\n\t        FormGroupDirective.prototype.addFormGroup = function (dir) {\n\t            var ctrl = this.form.get(dir.path);\n\t            setUpFormContainer(ctrl, dir);\n\t            ctrl.updateValueAndValidity({ emitEvent: false });\n\t        };\n\t        FormGroupDirective.prototype.removeFormGroup = function (dir) { };\n\t        FormGroupDirective.prototype.getFormGroup = function (dir) { return this.form.get(dir.path); };\n\t        FormGroupDirective.prototype.addFormArray = function (dir) {\n\t            var ctrl = this.form.get(dir.path);\n\t            setUpFormContainer(ctrl, dir);\n\t            ctrl.updateValueAndValidity({ emitEvent: false });\n\t        };\n\t        FormGroupDirective.prototype.removeFormArray = function (dir) { };\n\t        FormGroupDirective.prototype.getFormArray = function (dir) { return this.form.get(dir.path); };\n\t        FormGroupDirective.prototype.updateModel = function (dir, value) {\n\t            var ctrl = this.form.get(dir.path);\n\t            ctrl.setValue(value);\n\t        };\n\t        FormGroupDirective.prototype.onSubmit = function () {\n\t            this._submitted = true;\n\t            this.ngSubmit.emit(null);\n\t            return false;\n\t        };\n\t        FormGroupDirective.prototype.onReset = function () { this.resetForm(); };\n\t        FormGroupDirective.prototype.resetForm = function (value) {\n\t            if (value === void 0) { value = undefined; }\n\t            this.form.reset(value);\n\t            this._submitted = false;\n\t        };\n\t        /** @internal */\n\t        FormGroupDirective.prototype._updateDomValue = function (changes) {\n\t            var _this = this;\n\t            var oldForm = changes['form'].previousValue;\n\t            this.directives.forEach(function (dir) {\n\t                var newCtrl = _this.form.get(dir.path);\n\t                var oldCtrl = oldForm.get(dir.path);\n\t                if (oldCtrl !== newCtrl) {\n\t                    cleanUpControl(oldCtrl, dir);\n\t                    if (newCtrl)\n\t                        setUpControl(newCtrl, dir);\n\t                }\n\t            });\n\t            this.form._updateTreeValidity({ emitEvent: false });\n\t        };\n\t        FormGroupDirective.prototype._checkFormPresent = function () {\n\t            if (isBlank(this.form)) {\n\t                ReactiveErrors.missingFormException();\n\t            }\n\t        };\n\t        FormGroupDirective.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: '[formGroup]',\n\t                        providers: [formDirectiveProvider$1],\n\t                        host: { '(submit)': 'onSubmit()', '(reset)': 'onReset()' },\n\t                        exportAs: 'ngForm'\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        FormGroupDirective.ctorParameters = [\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n\t        ];\n\t        FormGroupDirective.propDecorators = {\n\t            'form': [{ type: _angular_core.Input, args: ['formGroup',] },],\n\t            'ngSubmit': [{ type: _angular_core.Output },],\n\t        };\n\t        return FormGroupDirective;\n\t    }(ControlContainer));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$12 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var formGroupNameProvider = {\n\t        provide: ControlContainer,\n\t        useExisting: _angular_core.forwardRef(function () { return FormGroupName; })\n\t    };\n\t    /**\n\t     * Syncs an existing form group to a DOM element.\n\t     *\n\t     * This directive can only be used as a child of {@link FormGroupDirective}.  It also requires\n\t     * importing the {@link ReactiveFormsModule}.\n\t     *\n\t     * ```typescript\n\t     * @Component({\n\t     *   selector: 'my-app',\n\t     *   template: `\n\t     *     <div>\n\t     *       <h2>Angular FormGroup Example</h2>\n\t     *       <form [formGroup]=\"myForm\">\n\t     *         <div formGroupName=\"name\">\n\t     *           <h3>Enter your name:</h3>\n\t     *           <p>First: <input formControlName=\"first\"></p>\n\t     *           <p>Middle: <input formControlName=\"middle\"></p>\n\t     *           <p>Last: <input formControlName=\"last\"></p>\n\t     *         </div>\n\t     *         <h3>Name value:</h3>\n\t     *         <pre>{{ myForm.get('name') | json }}</pre>\n\t     *         <p>Name is {{myForm.get('name')?.valid ? \"valid\" : \"invalid\"}}</p>\n\t     *         <h3>What's your favorite food?</h3>\n\t     *         <p><input formControlName=\"food\"></p>\n\t     *         <h3>Form value</h3>\n\t     *         <pre> {{ myForm | json }} </pre>\n\t     *       </form>\n\t     *     </div>\n\t     *   `\n\t     * })\n\t     * export class App {\n\t     *   myForm = new FormGroup({\n\t     *     name: new FormGroup({\n\t     *       first: new FormControl('', Validators.required),\n\t     *       middle: new FormControl(''),\n\t     *       last: new FormControl('', Validators.required)\n\t     *     }),\n\t     *     food: new FormControl()\n\t     *   });\n\t     * }\n\t     * ```\n\t     *\n\t     * This example syncs the form group for the user's name. The value and validation state of\n\t     * this group can be accessed separately from the overall form.\n\t     *\n\t     * @stable\n\t     */\n\t    var FormGroupName = (function (_super) {\n\t        __extends$12(FormGroupName, _super);\n\t        function FormGroupName(parent, validators, asyncValidators) {\n\t            _super.call(this);\n\t            this._parent = parent;\n\t            this._validators = validators;\n\t            this._asyncValidators = asyncValidators;\n\t        }\n\t        /** @internal */\n\t        FormGroupName.prototype._checkParentType = function () {\n\t            if (_hasInvalidParent(this._parent)) {\n\t                ReactiveErrors.groupParentException();\n\t            }\n\t        };\n\t        FormGroupName.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: '[formGroupName]', providers: [formGroupNameProvider] },] },\n\t        ];\n\t        /** @nocollapse */\n\t        FormGroupName.ctorParameters = [\n\t            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n\t        ];\n\t        FormGroupName.propDecorators = {\n\t            'name': [{ type: _angular_core.Input, args: ['formGroupName',] },],\n\t        };\n\t        return FormGroupName;\n\t    }(AbstractFormGroupDirective));\n\t    var formArrayNameProvider = {\n\t        provide: ControlContainer,\n\t        useExisting: _angular_core.forwardRef(function () { return FormArrayName; })\n\t    };\n\t    /**\n\t     * Syncs an existing form array to a DOM element.\n\t     *\n\t     * This directive can only be used as a child of {@link FormGroupDirective}.  It also requires\n\t     * importing the {@link ReactiveFormsModule}.\n\t     *\n\t     * ```typescript\n\t     * @Component({\n\t     *   selector: 'my-app',\n\t     *   template: `\n\t     *     <div>\n\t     *       <h2>Angular FormArray Example</h2>\n\t     *       <form [formGroup]=\"myForm\">\n\t     *         <div formArrayName=\"cities\">\n\t     *           <div *ngFor=\"let city of cityArray.controls; let i=index\">\n\t     *             <input [formControlName]=\"i\">\n\t     *           </div>\n\t     *         </div>\n\t     *       </form>\n\t     *       {{ myForm.value | json }}     // {cities: ['SF', 'NY']}\n\t     *     </div>\n\t     *   `\n\t     * })\n\t     * export class App {\n\t     *   cityArray = new FormArray([\n\t     *     new FormControl('SF'),\n\t     *     new FormControl('NY')\n\t     *   ]);\n\t     *   myForm = new FormGroup({\n\t     *     cities: this.cityArray\n\t     *   });\n\t     * }\n\t     * ```\n\t     *\n\t     * @stable\n\t     */\n\t    var FormArrayName = (function (_super) {\n\t        __extends$12(FormArrayName, _super);\n\t        function FormArrayName(parent, validators, asyncValidators) {\n\t            _super.call(this);\n\t            this._parent = parent;\n\t            this._validators = validators;\n\t            this._asyncValidators = asyncValidators;\n\t        }\n\t        FormArrayName.prototype.ngOnInit = function () {\n\t            this._checkParentType();\n\t            this.formDirective.addFormArray(this);\n\t        };\n\t        FormArrayName.prototype.ngOnDestroy = function () {\n\t            if (this.formDirective) {\n\t                this.formDirective.removeFormArray(this);\n\t            }\n\t        };\n\t        Object.defineProperty(FormArrayName.prototype, \"control\", {\n\t            get: function () { return this.formDirective.getFormArray(this); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormArrayName.prototype, \"formDirective\", {\n\t            get: function () {\n\t                return this._parent ? this._parent.formDirective : null;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormArrayName.prototype, \"path\", {\n\t            get: function () { return controlPath(this.name, this._parent); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormArrayName.prototype, \"validator\", {\n\t            get: function () { return composeValidators(this._validators); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormArrayName.prototype, \"asyncValidator\", {\n\t            get: function () { return composeAsyncValidators(this._asyncValidators); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        FormArrayName.prototype._checkParentType = function () {\n\t            if (_hasInvalidParent(this._parent)) {\n\t                ReactiveErrors.arrayParentException();\n\t            }\n\t        };\n\t        FormArrayName.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: '[formArrayName]', providers: [formArrayNameProvider] },] },\n\t        ];\n\t        /** @nocollapse */\n\t        FormArrayName.ctorParameters = [\n\t            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n\t        ];\n\t        FormArrayName.propDecorators = {\n\t            'name': [{ type: _angular_core.Input, args: ['formArrayName',] },],\n\t        };\n\t        return FormArrayName;\n\t    }(ControlContainer));\n\t    function _hasInvalidParent(parent) {\n\t        return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&\n\t            !(parent instanceof FormArrayName);\n\t    }\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$10 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var controlNameBinding = {\n\t        provide: NgControl,\n\t        useExisting: _angular_core.forwardRef(function () { return FormControlName; })\n\t    };\n\t    /**\n\t     * Syncs an existing form control with the specified name to a DOM element.\n\t     *\n\t     * This directive can only be used as a child of {@link FormGroupDirective}.  It also requires\n\t     * importing the {@link ReactiveFormsModule}.\n\t\n\t     * ### Example\n\t     *\n\t     * In this example, we create the login and password controls.\n\t     * We can work with each control separately: check its validity, get its value, listen to its\n\t     * changes.\n\t     *\n\t     *  ```\n\t     * @Component({\n\t     *      selector: \"login-comp\",\n\t     *      template: `\n\t     *        <form [formGroup]=\"myForm\" (submit)=\"onLogIn()\">\n\t     *          Login <input type=\"text\" formControlName=\"login\">\n\t     *          <div *ngIf=\"!loginCtrl.valid\">Login is invalid</div>\n\t     *          Password <input type=\"password\" formControlName=\"password\">\n\t     *          <button type=\"submit\">Log in!</button>\n\t     *        </form>\n\t     *      `})\n\t     * class LoginComp {\n\t     *  loginCtrl = new FormControl();\n\t     *  passwordCtrl = new FormControl();\n\t     *  myForm = new FormGroup({\n\t     *     login: loginCtrl,\n\t     *     password: passwordCtrl\n\t     *  });\n\t     *  onLogIn(): void {\n\t     *    // value === {login: 'some login', password: 'some password'}\n\t     *  }\n\t     * }\n\t     *  ```\n\t     *\n\t     * We can also set the value of the form programmatically using setValue().\n\t     *\n\t     *  ```\n\t     * @Component({\n\t     *      selector: \"login-comp\",\n\t     *      template: `\n\t     *        <form [formGroup]=\"myForm\" (submit)='onLogIn()'>\n\t     *          Login <input type='text' formControlName='login'>\n\t     *          Password <input type='password' formControlName='password'>\n\t     *          <button type='submit'>Log in!</button>\n\t     *        </form>\n\t     *      `})\n\t     * class LoginComp {\n\t     *  myForm = new FormGroup({\n\t     *    login: new FormControl(),\n\t     *    password: new FormControl()\n\t     *  });\n\t     *\n\t     *  populate() {\n\t     *     this.myForm.setValue({login: 'some login', password: 'some password'});\n\t     *  }\n\t     *\n\t     *  onLogIn(): void {\n\t     *    // this.credentials.login === \"some login\"\n\t     *    // this.credentials.password === \"some password\"\n\t     *  }\n\t     * }\n\t     *  ```\n\t     *\n\t     *  @stable\n\t     */\n\t    var FormControlName = (function (_super) {\n\t        __extends$10(FormControlName, _super);\n\t        function FormControlName(parent, validators, asyncValidators, valueAccessors) {\n\t            _super.call(this);\n\t            this._added = false;\n\t            this.update = new EventEmitter();\n\t            this._parent = parent;\n\t            this._rawValidators = validators || [];\n\t            this._rawAsyncValidators = asyncValidators || [];\n\t            this.valueAccessor = selectValueAccessor(this, valueAccessors);\n\t        }\n\t        Object.defineProperty(FormControlName.prototype, \"isDisabled\", {\n\t            set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        FormControlName.prototype.ngOnChanges = function (changes) {\n\t            if (!this._added) {\n\t                this._checkParentType();\n\t                this.formDirective.addControl(this);\n\t                if (this.control.disabled)\n\t                    this.valueAccessor.setDisabledState(true);\n\t                this._added = true;\n\t            }\n\t            if (isPropertyUpdated(changes, this.viewModel)) {\n\t                this.viewModel = this.model;\n\t                this.formDirective.updateModel(this, this.model);\n\t            }\n\t        };\n\t        FormControlName.prototype.ngOnDestroy = function () {\n\t            if (this.formDirective) {\n\t                this.formDirective.removeControl(this);\n\t            }\n\t        };\n\t        FormControlName.prototype.viewToModelUpdate = function (newValue) {\n\t            this.viewModel = newValue;\n\t            this.update.emit(newValue);\n\t        };\n\t        Object.defineProperty(FormControlName.prototype, \"path\", {\n\t            get: function () { return controlPath(this.name, this._parent); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormControlName.prototype, \"formDirective\", {\n\t            get: function () { return this._parent ? this._parent.formDirective : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormControlName.prototype, \"validator\", {\n\t            get: function () { return composeValidators(this._rawValidators); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormControlName.prototype, \"asyncValidator\", {\n\t            get: function () {\n\t                return composeAsyncValidators(this._rawAsyncValidators);\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(FormControlName.prototype, \"control\", {\n\t            get: function () { return this.formDirective.getControl(this); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        FormControlName.prototype._checkParentType = function () {\n\t            if (!(this._parent instanceof FormGroupName) &&\n\t                this._parent instanceof AbstractFormGroupDirective) {\n\t                ReactiveErrors.ngModelGroupException();\n\t            }\n\t            else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&\n\t                !(this._parent instanceof FormArrayName)) {\n\t                ReactiveErrors.controlParentException();\n\t            }\n\t        };\n\t        FormControlName.decorators = [\n\t            { type: _angular_core.Directive, args: [{ selector: '[formControlName]', providers: [controlNameBinding] },] },\n\t        ];\n\t        /** @nocollapse */\n\t        FormControlName.ctorParameters = [\n\t            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n\t            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },\n\t        ];\n\t        FormControlName.propDecorators = {\n\t            'name': [{ type: _angular_core.Input, args: ['formControlName',] },],\n\t            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],\n\t            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],\n\t            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],\n\t        };\n\t        return FormControlName;\n\t    }(NgControl));\n\t\n\t    var REQUIRED_VALIDATOR = {\n\t        provide: NG_VALIDATORS,\n\t        useExisting: _angular_core.forwardRef(function () { return RequiredValidator; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     * A Directive that adds the `required` validator to any controls marked with the\n\t     * `required` attribute, via the {@link NG_VALIDATORS} binding.\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```\n\t     * <input name=\"fullName\" ngModel required>\n\t     * ```\n\t     *\n\t     * @stable\n\t     */\n\t    var RequiredValidator = (function () {\n\t        function RequiredValidator() {\n\t        }\n\t        Object.defineProperty(RequiredValidator.prototype, \"required\", {\n\t            get: function () { return this._required; },\n\t            set: function (value) {\n\t                this._required = isPresent(value) && \"\" + value !== 'false';\n\t                if (this._onChange)\n\t                    this._onChange();\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        RequiredValidator.prototype.validate = function (c) {\n\t            return this.required ? Validators.required(c) : null;\n\t        };\n\t        RequiredValidator.prototype.registerOnChange = function (fn) { this._onChange = fn; };\n\t        RequiredValidator.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: '[required][formControlName],[required][formControl],[required][ngModel]',\n\t                        providers: [REQUIRED_VALIDATOR],\n\t                        host: { '[attr.required]': 'required? \"\" : null' }\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        RequiredValidator.ctorParameters = [];\n\t        RequiredValidator.propDecorators = {\n\t            'required': [{ type: _angular_core.Input },],\n\t        };\n\t        return RequiredValidator;\n\t    }());\n\t    /**\n\t     * Provider which adds {@link MinLengthValidator} to {@link NG_VALIDATORS}.\n\t     *\n\t     * ## Example:\n\t     *\n\t     * {@example common/forms/ts/validators/validators.ts region='min'}\n\t     */\n\t    var MIN_LENGTH_VALIDATOR = {\n\t        provide: NG_VALIDATORS,\n\t        useExisting: _angular_core.forwardRef(function () { return MinLengthValidator; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     * A directive which installs the {@link MinLengthValidator} for any `formControlName`,\n\t     * `formControl`, or control with `ngModel` that also has a `minlength` attribute.\n\t     *\n\t     * @stable\n\t     */\n\t    var MinLengthValidator = (function () {\n\t        function MinLengthValidator() {\n\t        }\n\t        MinLengthValidator.prototype._createValidator = function () {\n\t            this._validator = Validators.minLength(parseInt(this.minlength, 10));\n\t        };\n\t        MinLengthValidator.prototype.ngOnChanges = function (changes) {\n\t            if (changes['minlength']) {\n\t                this._createValidator();\n\t                if (this._onChange)\n\t                    this._onChange();\n\t            }\n\t        };\n\t        MinLengthValidator.prototype.validate = function (c) {\n\t            return isPresent(this.minlength) ? this._validator(c) : null;\n\t        };\n\t        MinLengthValidator.prototype.registerOnChange = function (fn) { this._onChange = fn; };\n\t        MinLengthValidator.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n\t                        providers: [MIN_LENGTH_VALIDATOR],\n\t                        host: { '[attr.minlength]': 'minlength? minlength : null' }\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        MinLengthValidator.ctorParameters = [];\n\t        MinLengthValidator.propDecorators = {\n\t            'minlength': [{ type: _angular_core.Input },],\n\t        };\n\t        return MinLengthValidator;\n\t    }());\n\t    /**\n\t     * Provider which adds {@link MaxLengthValidator} to {@link NG_VALIDATORS}.\n\t     *\n\t     * ## Example:\n\t     *\n\t     * {@example common/forms/ts/validators/validators.ts region='max'}\n\t     */\n\t    var MAX_LENGTH_VALIDATOR = {\n\t        provide: NG_VALIDATORS,\n\t        useExisting: _angular_core.forwardRef(function () { return MaxLengthValidator; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     * A directive which installs the {@link MaxLengthValidator} for any `formControlName,\n\t     * `formControl`,\n\t     * or control with `ngModel` that also has a `maxlength` attribute.\n\t     *\n\t     * @stable\n\t     */\n\t    var MaxLengthValidator = (function () {\n\t        function MaxLengthValidator() {\n\t        }\n\t        MaxLengthValidator.prototype._createValidator = function () {\n\t            this._validator = Validators.maxLength(parseInt(this.maxlength, 10));\n\t        };\n\t        MaxLengthValidator.prototype.ngOnChanges = function (changes) {\n\t            if (changes['maxlength']) {\n\t                this._createValidator();\n\t                if (this._onChange)\n\t                    this._onChange();\n\t            }\n\t        };\n\t        MaxLengthValidator.prototype.validate = function (c) {\n\t            return isPresent(this.maxlength) ? this._validator(c) : null;\n\t        };\n\t        MaxLengthValidator.prototype.registerOnChange = function (fn) { this._onChange = fn; };\n\t        MaxLengthValidator.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n\t                        providers: [MAX_LENGTH_VALIDATOR],\n\t                        host: { '[attr.maxlength]': 'maxlength? maxlength : null' }\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        MaxLengthValidator.ctorParameters = [];\n\t        MaxLengthValidator.propDecorators = {\n\t            'maxlength': [{ type: _angular_core.Input },],\n\t        };\n\t        return MaxLengthValidator;\n\t    }());\n\t    var PATTERN_VALIDATOR = {\n\t        provide: NG_VALIDATORS,\n\t        useExisting: _angular_core.forwardRef(function () { return PatternValidator; }),\n\t        multi: true\n\t    };\n\t    /**\n\t     * A Directive that adds the `pattern` validator to any controls marked with the\n\t     * `pattern` attribute, via the {@link NG_VALIDATORS} binding. Uses attribute value\n\t     * as the regex to validate Control value against.  Follows pattern attribute\n\t     * semantics; i.e. regex must match entire Control value.\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```\n\t     * <input [name]=\"fullName\" pattern=\"[a-zA-Z ]*\" ngModel>\n\t     * ```\n\t     * @stable\n\t     */\n\t    var PatternValidator = (function () {\n\t        function PatternValidator() {\n\t        }\n\t        PatternValidator.prototype._createValidator = function () { this._validator = Validators.pattern(this.pattern); };\n\t        PatternValidator.prototype.ngOnChanges = function (changes) {\n\t            if (changes['pattern']) {\n\t                this._createValidator();\n\t                if (this._onChange)\n\t                    this._onChange();\n\t            }\n\t        };\n\t        PatternValidator.prototype.validate = function (c) {\n\t            return isPresent(this.pattern) ? this._validator(c) : null;\n\t        };\n\t        PatternValidator.prototype.registerOnChange = function (fn) { this._onChange = fn; };\n\t        PatternValidator.decorators = [\n\t            { type: _angular_core.Directive, args: [{\n\t                        selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n\t                        providers: [PATTERN_VALIDATOR],\n\t                        host: { '[attr.pattern]': 'pattern? pattern : null' }\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        PatternValidator.ctorParameters = [];\n\t        PatternValidator.propDecorators = {\n\t            'pattern': [{ type: _angular_core.Input },],\n\t        };\n\t        return PatternValidator;\n\t    }());\n\t\n\t    /**\n\t     * Creates a form object from a user-specified configuration.\n\t     *\n\t     * ```typescript\n\t     * @Component({\n\t     *   selector: 'my-app',\n\t     *   template: `\n\t     *     <form [formGroup]=\"loginForm\">\n\t     *       <p>Login <input formControlName=\"login\"></p>\n\t     *       <div formGroupName=\"passwordRetry\">\n\t     *         <p>Password <input type=\"password\" formControlName=\"password\"></p>\n\t     *         <p>Confirm password <input type=\"password\" formControlName=\"passwordConfirmation\"></p>\n\t     *       </div>\n\t     *     </form>\n\t     *     <h3>Form value:</h3>\n\t     *     <pre>{{value}}</pre>\n\t     *   `,\n\t     *   directives: [REACTIVE_FORM_DIRECTIVES]\n\t     * })\n\t     * export class App {\n\t     *   loginForm: FormGroup;\n\t     *\n\t     *   constructor(builder: FormBuilder) {\n\t     *     this.loginForm = builder.group({\n\t     *       login: [\"\", Validators.required],\n\t     *       passwordRetry: builder.group({\n\t     *         password: [\"\", Validators.required],\n\t     *         passwordConfirmation: [\"\", Validators.required, asyncValidator]\n\t     *       })\n\t     *     });\n\t     *   }\n\t     *\n\t     *   get value(): string {\n\t     *     return JSON.stringify(this.loginForm.value, null, 2);\n\t     *   }\n\t     * }\n\t     * ```\n\t     *\n\t     * @stable\n\t     */\n\t    var FormBuilder = (function () {\n\t        function FormBuilder() {\n\t        }\n\t        /**\n\t         * Construct a new {@link FormGroup} with the given map of configuration.\n\t         * Valid keys for the `extra` parameter map are `optionals` and `validator`.\n\t         *\n\t         * See the {@link FormGroup} constructor for more details.\n\t         */\n\t        FormBuilder.prototype.group = function (controlsConfig, extra) {\n\t            if (extra === void 0) { extra = null; }\n\t            var controls = this._reduceControls(controlsConfig);\n\t            var validator = isPresent(extra) ? StringMapWrapper.get(extra, 'validator') : null;\n\t            var asyncValidator = isPresent(extra) ? StringMapWrapper.get(extra, 'asyncValidator') : null;\n\t            return new FormGroup(controls, validator, asyncValidator);\n\t        };\n\t        /**\n\t         * Construct a new {@link FormControl} with the given `formState`,`validator`, and\n\t         * `asyncValidator`.\n\t         */\n\t        FormBuilder.prototype.control = function (formState, validator, asyncValidator) {\n\t            if (validator === void 0) { validator = null; }\n\t            if (asyncValidator === void 0) { asyncValidator = null; }\n\t            return new FormControl(formState, validator, asyncValidator);\n\t        };\n\t        /**\n\t         * Construct an array of {@link FormControl}s from the given `controlsConfig` array of\n\t         * configuration, with the given optional `validator` and `asyncValidator`.\n\t         */\n\t        FormBuilder.prototype.array = function (controlsConfig, validator, asyncValidator) {\n\t            var _this = this;\n\t            if (validator === void 0) { validator = null; }\n\t            if (asyncValidator === void 0) { asyncValidator = null; }\n\t            var controls = controlsConfig.map(function (c) { return _this._createControl(c); });\n\t            return new FormArray(controls, validator, asyncValidator);\n\t        };\n\t        /** @internal */\n\t        FormBuilder.prototype._reduceControls = function (controlsConfig) {\n\t            var _this = this;\n\t            var controls = {};\n\t            StringMapWrapper.forEach(controlsConfig, function (controlConfig, controlName) {\n\t                controls[controlName] = _this._createControl(controlConfig);\n\t            });\n\t            return controls;\n\t        };\n\t        /** @internal */\n\t        FormBuilder.prototype._createControl = function (controlConfig) {\n\t            if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||\n\t                controlConfig instanceof FormArray) {\n\t                return controlConfig;\n\t            }\n\t            else if (isArray(controlConfig)) {\n\t                var value = controlConfig[0];\n\t                var validator = controlConfig.length > 1 ? controlConfig[1] : null;\n\t                var asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;\n\t                return this.control(value, validator, asyncValidator);\n\t            }\n\t            else {\n\t                return this.control(controlConfig);\n\t            }\n\t        };\n\t        FormBuilder.decorators = [\n\t            { type: _angular_core.Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        FormBuilder.ctorParameters = [];\n\t        return FormBuilder;\n\t    }());\n\t\n\t    var SHARED_FORM_DIRECTIVES = [\n\t        NgSelectOption, NgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor,\n\t        CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor,\n\t        RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator,\n\t        MinLengthValidator, MaxLengthValidator, PatternValidator\n\t    ];\n\t    var TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];\n\t    var REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];\n\t    /**\n\t     * Internal module used for sharing directives between FormsModule and ReactiveFormsModule\n\t     */\n\t    var InternalFormsSharedModule = (function () {\n\t        function InternalFormsSharedModule() {\n\t        }\n\t        InternalFormsSharedModule.decorators = [\n\t            { type: _angular_core.NgModule, args: [{ declarations: SHARED_FORM_DIRECTIVES, exports: SHARED_FORM_DIRECTIVES },] },\n\t        ];\n\t        /** @nocollapse */\n\t        InternalFormsSharedModule.ctorParameters = [];\n\t        return InternalFormsSharedModule;\n\t    }());\n\t\n\t    /**\n\t     * The ng module for forms.\n\t     * @stable\n\t     */\n\t    var FormsModule = (function () {\n\t        function FormsModule() {\n\t        }\n\t        FormsModule.decorators = [\n\t            { type: _angular_core.NgModule, args: [{\n\t                        declarations: TEMPLATE_DRIVEN_DIRECTIVES,\n\t                        providers: [RadioControlRegistry],\n\t                        exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        FormsModule.ctorParameters = [];\n\t        return FormsModule;\n\t    }());\n\t    /**\n\t     * The ng module for reactive forms.\n\t     * @stable\n\t     */\n\t    var ReactiveFormsModule = (function () {\n\t        function ReactiveFormsModule() {\n\t        }\n\t        ReactiveFormsModule.decorators = [\n\t            { type: _angular_core.NgModule, args: [{\n\t                        declarations: [REACTIVE_DRIVEN_DIRECTIVES],\n\t                        providers: [FormBuilder, RadioControlRegistry],\n\t                        exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        ReactiveFormsModule.ctorParameters = [];\n\t        return ReactiveFormsModule;\n\t    }());\n\t\n\t    exports.AbstractControlDirective = AbstractControlDirective;\n\t    exports.AbstractFormGroupDirective = AbstractFormGroupDirective;\n\t    exports.CheckboxControlValueAccessor = CheckboxControlValueAccessor;\n\t    exports.ControlContainer = ControlContainer;\n\t    exports.NG_VALUE_ACCESSOR = NG_VALUE_ACCESSOR;\n\t    exports.DefaultValueAccessor = DefaultValueAccessor;\n\t    exports.NgControl = NgControl;\n\t    exports.NgControlStatus = NgControlStatus;\n\t    exports.NgControlStatusGroup = NgControlStatusGroup;\n\t    exports.NgForm = NgForm;\n\t    exports.NgModel = NgModel;\n\t    exports.NgModelGroup = NgModelGroup;\n\t    exports.FormControlDirective = FormControlDirective;\n\t    exports.FormControlName = FormControlName;\n\t    exports.FormGroupDirective = FormGroupDirective;\n\t    exports.FormArrayName = FormArrayName;\n\t    exports.FormGroupName = FormGroupName;\n\t    exports.NgSelectOption = NgSelectOption;\n\t    exports.SelectControlValueAccessor = SelectControlValueAccessor;\n\t    exports.SelectMultipleControlValueAccessor = SelectMultipleControlValueAccessor;\n\t    exports.MaxLengthValidator = MaxLengthValidator;\n\t    exports.MinLengthValidator = MinLengthValidator;\n\t    exports.PatternValidator = PatternValidator;\n\t    exports.RequiredValidator = RequiredValidator;\n\t    exports.FormBuilder = FormBuilder;\n\t    exports.AbstractControl = AbstractControl;\n\t    exports.FormArray = FormArray;\n\t    exports.FormControl = FormControl;\n\t    exports.FormGroup = FormGroup;\n\t    exports.NG_ASYNC_VALIDATORS = NG_ASYNC_VALIDATORS;\n\t    exports.NG_VALIDATORS = NG_VALIDATORS;\n\t    exports.Validators = Validators;\n\t    exports.FormsModule = FormsModule;\n\t    exports.ReactiveFormsModule = ReactiveFormsModule;\n\t\n\t}));\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n\n/***/ 387:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\n\t};\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n\t};\n\tvar core_1 = __webpack_require__(4);\n\tvar TimestampFormat = (function () {\n\t    function TimestampFormat() {\n\t    }\n\t    TimestampFormat.prototype.transform = function (value, args) {\n\t        if (value) {\n\t            var date = value instanceof Date ? value : new Date(value * 1000);\n\t            var formatted = this.strPad(\"00\", (date.getMonth() + 1), true) + '/' + this.strPad(\"00\", date.getDate(), true) + '/' + date.getFullYear() + ' - ' + this.strPad(\"00\", date.getHours(), true) + ':' + this.strPad(\"00\", date.getMinutes(), true) + ':' + this.strPad(\"00\", date.getSeconds(), true);\n\t            return formatted;\n\t        }\n\t    };\n\t    TimestampFormat.prototype.strPad = function (pad, str, padLeft) {\n\t        if (typeof str === 'undefined') {\n\t            return pad;\n\t        }\n\t        if (padLeft) {\n\t            return (pad + str).slice(-pad.length);\n\t        }\n\t        else {\n\t            return (str + pad).substring(0, pad.length);\n\t        }\n\t    };\n\t    TimestampFormat = __decorate([\n\t        core_1.Pipe({\n\t            name: 'timestampFormat'\n\t        }), \n\t        __metadata('design:paramtypes', [])\n\t    ], TimestampFormat);\n\t    return TimestampFormat;\n\t}());\n\texports.TimestampFormat = TimestampFormat;\n\n\n/***/ },\n\n/***/ 388:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tfunction __export(m) {\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t}\n\tvar charts_1 = __webpack_require__(389);\n\t__export(__webpack_require__(389));\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = {\n\t    directives: [\n\t        charts_1.CHART_DIRECTIVES\n\t    ]\n\t};\n\n\n/***/ },\n\n/***/ 389:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\n\t};\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n\t};\n\tvar core_1 = __webpack_require__(4);\n\tvar common_1 = __webpack_require__(24);\n\tvar BaseChartComponent = (function () {\n\t    function BaseChartComponent(element) {\n\t        this.labels = [];\n\t        this.options = { responsive: true };\n\t        this.chartClick = new core_1.EventEmitter();\n\t        this.chartHover = new core_1.EventEmitter();\n\t        this.initFlag = false;\n\t        this.element = element;\n\t    }\n\t    BaseChartComponent.prototype.ngOnInit = function () {\n\t        this.ctx = this.element.nativeElement.children[0].getContext('2d');\n\t        this.cvs = this.element.nativeElement.children[0];\n\t        this.parent = this.element.nativeElement;\n\t        this.initFlag = true;\n\t        if (this.data || this.datasets) {\n\t            this.refresh();\n\t        }\n\t    };\n\t    BaseChartComponent.prototype.ngOnChanges = function () {\n\t        if (this.initFlag) {\n\t            this.refresh();\n\t        }\n\t    };\n\t    BaseChartComponent.prototype.ngOnDestroy = function () {\n\t        if (this.chart) {\n\t            this.chart.destroy();\n\t            this.chart = void 0;\n\t        }\n\t    };\n\t    BaseChartComponent.prototype.getChartBuilder = function (ctx /*, data:Array<any>, options:any*/) {\n\t        var _this = this;\n\t        var datasets = void 0;\n\t        // in case if datasets is not provided, but data is present\n\t        if (!this.datasets || !this.datasets.length && (this.data && this.data.length)) {\n\t            if (Array.isArray(this.data[0])) {\n\t                datasets = this.data.map(function (data, index) {\n\t                    return { data: data, label: _this.labels[index] || \"Label \" + index };\n\t                });\n\t            }\n\t            else {\n\t                datasets = [{ data: this.data, label: \"Label 0\" }];\n\t            }\n\t        }\n\t        if (this.datasets && this.datasets.length ||\n\t            (datasets && datasets.length)) {\n\t            datasets = (this.datasets || datasets)\n\t                .map(function (elm, index) {\n\t                var newElm = Object.assign({}, elm);\n\t                if (_this.colors && _this.colors.length) {\n\t                    Object.assign(newElm, _this.colors[index]);\n\t                }\n\t                else {\n\t                    Object.assign(newElm, getColors(_this.chartType, index, newElm.data.length));\n\t                }\n\t                return newElm;\n\t            });\n\t        }\n\t        if (!datasets) {\n\t            throw new Error(\"ng-charts configuration error, \\n      data or datasets field are required to render char \" + this.chartType);\n\t        }\n\t        var options = Object.assign({}, this.options);\n\t        // hock for onHover and onClick events\n\t        options.hover = options.hover || {};\n\t        if (!options.hover.onHover) {\n\t            options.hover.onHover = function (active) {\n\t                if (active && !active.length) {\n\t                    return;\n\t                }\n\t                _this.chartHover.emit({ active: active });\n\t            };\n\t        }\n\t        if (!options.onClick) {\n\t            options.onClick = function (event, active) {\n\t                _this.chartClick.emit({ event: event, active: active });\n\t            };\n\t        }\n\t        var opts = {\n\t            type: this.chartType,\n\t            data: {\n\t                labels: this.labels,\n\t                datasets: datasets\n\t            },\n\t            options: options\n\t        };\n\t        if (typeof Chart === 'undefined') {\n\t            throw new Error('ng2-charts configuration issue: Embedding Chart.js lib is mandatory');\n\t        }\n\t        return new Chart(ctx, opts);\n\t    };\n\t    BaseChartComponent.prototype.refresh = function () {\n\t        var _this = this;\n\t        if (this.options && this.options.responsive && this.parent.clientHeight === 0) {\n\t            return setTimeout(function () { return _this.refresh(); }, 50);\n\t        }\n\t        // todo: remove this line, it is producing flickering\n\t        this.ngOnDestroy();\n\t        this.chart = this.getChartBuilder(this.ctx /*, data, this.options*/);\n\t    };\n\t    BaseChartComponent.defaultColors = [\n\t        [255, 99, 132],\n\t        [54, 162, 235],\n\t        [255, 206, 86],\n\t        [231, 233, 237],\n\t        [75, 192, 192],\n\t        [151, 187, 205],\n\t        [220, 220, 220],\n\t        [247, 70, 74],\n\t        [70, 191, 189],\n\t        [253, 180, 92],\n\t        [148, 159, 177],\n\t        [77, 83, 96]\n\t    ];\n\t    __decorate([\n\t        core_1.Input(), \n\t        __metadata('design:type', Object)\n\t    ], BaseChartComponent.prototype, \"data\", void 0);\n\t    __decorate([\n\t        core_1.Input(), \n\t        __metadata('design:type', Array)\n\t    ], BaseChartComponent.prototype, \"datasets\", void 0);\n\t    __decorate([\n\t        core_1.Input(), \n\t        __metadata('design:type', Array)\n\t    ], BaseChartComponent.prototype, \"labels\", void 0);\n\t    __decorate([\n\t        core_1.Input(), \n\t        __metadata('design:type', Object)\n\t    ], BaseChartComponent.prototype, \"options\", void 0);\n\t    __decorate([\n\t        core_1.Input(), \n\t        __metadata('design:type', String)\n\t    ], BaseChartComponent.prototype, \"chartType\", void 0);\n\t    __decorate([\n\t        core_1.Input(), \n\t        __metadata('design:type', Array)\n\t    ], BaseChartComponent.prototype, \"colors\", void 0);\n\t    __decorate([\n\t        core_1.Input(), \n\t        __metadata('design:type', Boolean)\n\t    ], BaseChartComponent.prototype, \"legend\", void 0);\n\t    __decorate([\n\t        core_1.Output(), \n\t        __metadata('design:type', core_1.EventEmitter)\n\t    ], BaseChartComponent.prototype, \"chartClick\", void 0);\n\t    __decorate([\n\t        core_1.Output(), \n\t        __metadata('design:type', core_1.EventEmitter)\n\t    ], BaseChartComponent.prototype, \"chartHover\", void 0);\n\t    BaseChartComponent = __decorate([\n\t        core_1.Component({\n\t            selector: 'base-chart',\n\t            template: \"<canvas style=\\\"width: 100%; height: 100%;\\\"></canvas>\",\n\t            directives: [common_1.CORE_DIRECTIVES, common_1.FORM_DIRECTIVES, common_1.NgClass]\n\t        }), \n\t        __metadata('design:paramtypes', [core_1.ElementRef])\n\t    ], BaseChartComponent);\n\t    return BaseChartComponent;\n\t}());\n\texports.BaseChartComponent = BaseChartComponent;\n\tfunction rgba(colour, alpha) {\n\t    return 'rgba(' + colour.concat(alpha).join(',') + ')';\n\t}\n\tfunction getRandomInt(min, max) {\n\t    return Math.floor(Math.random() * (max - min + 1)) + min;\n\t}\n\tfunction formatLineColor(colors) {\n\t    return {\n\t        backgroundColor: rgba(colors, 0.4),\n\t        borderColor: rgba(colors, 1),\n\t        pointBackgroundColor: rgba(colors, 1),\n\t        pointBorderColor: '#fff',\n\t        pointHoverBackgroundColor: '#fff',\n\t        pointHoverBorderColor: rgba(colors, 0.8)\n\t    };\n\t}\n\tfunction formatBarColor(colors) {\n\t    return {\n\t        backgroundColor: rgba(colors, 0.6),\n\t        borderColor: rgba(colors, 1),\n\t        hoverBackgroundColor: rgba(colors, 0.8),\n\t        hoverBorderColor: rgba(colors, 1)\n\t    };\n\t}\n\tfunction formatPieColors(colors) {\n\t    return {\n\t        backgroundColor: colors.map(function (color) { return rgba(color, 0.6); }),\n\t        borderColor: colors.map(function () { return '#fff'; }),\n\t        pointBackgroundColor: colors.map(function (color) { return rgba(color, 1); }),\n\t        pointBorderColor: colors.map(function () { return '#fff'; }),\n\t        pointHoverBackgroundColor: colors.map(function (color) { return rgba(color, 1); }),\n\t        pointHoverBorderColor: colors.map(function (color) { return rgba(color, 1); })\n\t    };\n\t}\n\tfunction formatPolarAreaColors(colors) {\n\t    return {\n\t        backgroundColor: colors.map(function (color) { return rgba(color, 0.6); }),\n\t        borderColor: colors.map(function (color) { return rgba(color, 1); }),\n\t        hoverBackgroundColor: colors.map(function (color) { return rgba(color, 0.8); }),\n\t        hoverBorderColor: colors.map(function (color) { return rgba(color, 1); })\n\t    };\n\t}\n\tfunction getRandomColor() {\n\t    return [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];\n\t}\n\t/**\n\t * Generate colors for line|bar charts\n\t * @param index\n\t * @returns {number[]|Color}\n\t */\n\tfunction generateColor(index) {\n\t    return BaseChartComponent.defaultColors[index] || getRandomColor();\n\t}\n\t/**\n\t * Generate colors for pie|doughnut charts\n\t * @param count\n\t * @returns {Colors}\n\t */\n\tfunction generateColors(count) {\n\t    var colorsArr = new Array(count);\n\t    for (var i = 0; i < count; i++) {\n\t        colorsArr[i] = BaseChartComponent.defaultColors[i] || getRandomColor();\n\t    }\n\t    return colorsArr;\n\t}\n\t/**\n\t * Generate colors by chart type\n\t * @param chartType\n\t * @param index\n\t * @param count\n\t * @returns {Color}\n\t */\n\tfunction getColors(chartType, index, count) {\n\t    if (chartType === 'pie' || chartType === 'doughnut') {\n\t        return formatPieColors(generateColors(count));\n\t    }\n\t    if (chartType === 'polarArea') {\n\t        return formatPolarAreaColors(generateColors(count));\n\t    }\n\t    if (chartType === 'line' || chartType === 'radar') {\n\t        return formatLineColor(generateColor(index));\n\t    }\n\t    if (chartType === 'bar') {\n\t        return formatBarColor(generateColor(index));\n\t    }\n\t    return generateColor(index);\n\t}\n\texports.CHART_DIRECTIVES = [BaseChartComponent];\n\n\n/***/ },\n\n/***/ 390:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(toastr) {\"use strict\";\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\n\t};\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n\t};\n\tvar core_1 = __webpack_require__(4);\n\tvar TaskService_1 = __webpack_require__(373);\n\tvar forms_1 = __webpack_require__(386);\n\tvar TaskOption_1 = __webpack_require__(391);\n\tvar Utils_1 = __webpack_require__(377);\n\tvar TaskOptionsComponent = (function () {\n\t    function TaskOptionsComponent(taskService) {\n\t        this.taskService = taskService;\n\t        this.form = new forms_1.FormGroup({});\n\t        this.taskRunWithSuccess = new core_1.EventEmitter();\n\t        this.taskRunWithError = new core_1.EventEmitter();\n\t        this.taskRunCancel = new core_1.EventEmitter();\n\t    }\n\t    TaskOptionsComponent.prototype.ngOnInit = function () {\n\t        this.load();\n\t    };\n\t    TaskOptionsComponent.prototype.load = function () {\n\t        var _this = this;\n\t        var controlList = {};\n\t        this.taskOptions = [];\n\t        if (this.options != null) {\n\t            this.options.forEach(function (option) {\n\t                controlList[option[\"id\"]] = new forms_1.FormControl(option[\"value\"]);\n\t                _this.taskOptions.push(new TaskOption_1.TaskOption({\n\t                    id: option['id'],\n\t                    type: option['type'],\n\t                    description: option['description'],\n\t                    value: option['value'],\n\t                    values: option['values']\n\t                }));\n\t            });\n\t        }\n\t        else {\n\t            this.showEmptyMessage = true;\n\t        }\n\t        this.form = new forms_1.FormGroup(controlList);\n\t    };\n\t    TaskOptionsComponent.prototype.run = function () {\n\t        var _this = this;\n\t        var formValues = this.form.value;\n\t        var formData = Utils_1.Utils.formValuesEncoded(formValues);\n\t        formData += \"&project=\" + this.projectId + \"&task=\" + this.taskId;\n\t        this.taskService.run(this.projectId, this.taskId, formData)\n\t            .then(function (response) {\n\t            if (response != null && response.success == true) {\n\t                toastr.success(\"Your task was added to queue with success!\");\n\t                _this.taskRunWithSuccess.emit();\n\t            }\n\t            else {\n\t                toastr.error(response.data.errors[0][1]);\n\t                _this.taskRunWithError.emit();\n\t            }\n\t        })\n\t            .catch(function (error) {\n\t            toastr.error(error);\n\t            _this.taskRunWithError.emit();\n\t        });\n\t    };\n\t    TaskOptionsComponent.prototype.cancel = function () {\n\t        this.taskRunCancel.emit();\n\t    };\n\t    __decorate([\n\t        core_1.Input(), \n\t        __metadata('design:type', String)\n\t    ], TaskOptionsComponent.prototype, \"projectId\", void 0);\n\t    __decorate([\n\t        core_1.Input(), \n\t        __metadata('design:type', String)\n\t    ], TaskOptionsComponent.prototype, \"projectName\", void 0);\n\t    __decorate([\n\t        core_1.Input(), \n\t        __metadata('design:type', String)\n\t    ], TaskOptionsComponent.prototype, \"taskId\", void 0);\n\t    __decorate([\n\t        core_1.Input(), \n\t        __metadata('design:type', String)\n\t    ], TaskOptionsComponent.prototype, \"taskName\", void 0);\n\t    __decorate([\n\t        core_1.Input(), \n\t        __metadata('design:type', String)\n\t    ], TaskOptionsComponent.prototype, \"taskDescription\", void 0);\n\t    __decorate([\n\t        core_1.Input(), \n\t        __metadata('design:type', Object)\n\t    ], TaskOptionsComponent.prototype, \"options\", void 0);\n\t    __decorate([\n\t        core_1.Output(), \n\t        __metadata('design:type', Object)\n\t    ], TaskOptionsComponent.prototype, \"taskRunWithSuccess\", void 0);\n\t    __decorate([\n\t        core_1.Output(), \n\t        __metadata('design:type', Object)\n\t    ], TaskOptionsComponent.prototype, \"taskRunWithError\", void 0);\n\t    __decorate([\n\t        core_1.Output(), \n\t        __metadata('design:type', Object)\n\t    ], TaskOptionsComponent.prototype, \"taskRunCancel\", void 0);\n\t    __decorate([\n\t        core_1.Input(), \n\t        __metadata('design:type', Array)\n\t    ], TaskOptionsComponent.prototype, \"taskOptions\", void 0);\n\t    TaskOptionsComponent = __decorate([\n\t        core_1.Component({\n\t            selector: 'task-options',\n\t            template: __webpack_require__(392)\n\t        }), \n\t        __metadata('design:paramtypes', [TaskService_1.TaskService])\n\t    ], TaskOptionsComponent);\n\t    return TaskOptionsComponent;\n\t}());\n\texports.TaskOptionsComponent = TaskOptionsComponent;\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26)))\n\n/***/ },\n\n/***/ 391:\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar TaskOption = (function () {\n\t    function TaskOption(options) {\n\t        if (options === void 0) { options = {}; }\n\t        this.id = options[\"id\"] || '';\n\t        this.type = options[\"type\"] || '';\n\t        this.description = options[\"description\"] || '';\n\t        this.value = options[\"value\"] || '';\n\t        this.values = options[\"values\"] || '';\n\t    }\n\t    return TaskOption;\n\t}());\n\texports.TaskOption = TaskOption;\n\n\n/***/ },\n\n/***/ 392:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=\\\"modal\\\" style=\\\"display: block\\\">\\n\\t<div class=\\\"modal-content\\\">\\n\\t\\t<div class=\\\"modal-body\\\">\\n\\n\\t\\t\\t<div style=\\\"padding: 12px 16px 2px 16px\\\">\\n\\t\\t\\t\\t<h4 style=\\\"width: 100%; text-align: right;\\\">RUN NOW</h4>\\n\\t\\t\\t\\t<div><strong>Project:</strong> {{projectName}}</div>\\n\\t\\t\\t\\t<div><strong>Task:</strong> {{taskName}}</div>\\n\\t\\t\\t\\t<div><strong>Description:</strong> {{taskDescription}}</div>\\n\\t\\t\\t</div>\\n\\n\\t\\t\\t<hr/>\\n\\n\\t\\t\\t<div *ngIf=\\\"showEmptyMessage\\\">\\n\\t\\t\\t\\t<h5 style=\\\"padding: 2px 16px; width: 100%; text-align: center;\\\">No options are required for this task, click on RUN button to start the task</h5>\\n\\t\\t\\t</div>\\n\\n\\t\\t\\t<form *ngIf=\\\"form\\\" (ngSubmit)=\\\"run()\\\" [formGroup]=\\\"form\\\" autocomplete=\\\"off\\\">\\n\\n\\t\\t\\t\\t<div *ngFor=\\\"let taskOption of taskOptions\\\" style=\\\"padding: 2px 16px;\\\">\\n\\n\\t\\t\\t\\t\\t<div [ngSwitch]=\\\"taskOption.type\\\">\\n\\n\\t\\t\\t\\t\\t\\t<div *ngSwitchCase=\\\"'text'\\\" class=\\\"form-group\\\">\\n\\t\\t\\t\\t\\t\\t\\t<label [attr.for]=\\\"taskOption.id\\\">{{taskOption.description}}</label>\\n\\t\\t\\t\\t\\t\\t\\t<input [formControlName]=\\\"taskOption.id\\\" [id]=\\\"taskOption.id\\\" type=\\\"text\\\" class=\\\"form-control\\\" autocomplete=\\\"off\\\">\\n\\t\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t\\t<div *ngSwitchCase=\\\"'password'\\\" class=\\\"form-group\\\">\\n\\t\\t\\t\\t\\t\\t\\t<label [attr.for]=\\\"taskOption.id\\\">{{taskOption.description}}</label>\\n\\t\\t\\t\\t\\t\\t\\t<input [formControlName]=\\\"taskOption.id\\\" [id]=\\\"taskOption.id\\\" type=\\\"password\\\" class=\\\"form-control\\\" autocomplete=\\\"off\\\">\\n\\t\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t\\t<div *ngSwitchCase=\\\"'hidden'\\\" class=\\\"form-group\\\">\\n\\t\\t\\t\\t\\t\\t\\t<input [formControlName]=\\\"taskOption.id\\\" [id]=\\\"taskOption.id\\\" type=\\\"hidden\\\" class=\\\"form-control\\\" autocomplete=\\\"off\\\">\\n\\t\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t\\t<div *ngSwitchCase=\\\"'select'\\\" class=\\\"form-group\\\">\\n\\t\\t\\t\\t\\t\\t\\t<label [attr.for]=\\\"taskOption.id\\\">{{taskOption.description}}</label>\\n\\n\\t\\t\\t\\t\\t\\t\\t<select [id]=\\\"taskOption.id\\\" [formControlName]=\\\"taskOption.id\\\" class=\\\"form-control\\\" autocomplete=\\\"off\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<option *ngFor=\\\"let selectOption of taskOption.values\\\" [value]=\\\"selectOption.value\\\">{{selectOption.text}}</option>\\n\\t\\t\\t\\t\\t\\t\\t</select>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t\\t<div *ngSwitchCase=\\\"'checkbox'\\\" class=\\\"checkbox\\\">\\n\\t\\t\\t\\t\\t\\t\\t<label [attr.for]=\\\"taskOption.id\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<input [formControlName]=\\\"taskOption.id\\\" [id]=\\\"taskOption.id\\\" type=\\\"checkbox\\\" autocomplete=\\\"off\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t{{taskOption.description}}\\n\\t\\t\\t\\t\\t\\t\\t</label>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t\\t<div *ngSwitchCase=\\\"'textarea'\\\" class=\\\"form-group\\\">\\n\\t\\t\\t\\t\\t\\t\\t<label [attr.for]=\\\"taskOption.id\\\">{{taskOption.description}}</label>\\n\\t\\t\\t\\t\\t\\t\\t<textarea [formControlName]=\\\"taskOption.id\\\" [id]=\\\"taskOption.id\\\" type=\\\"text\\\" class=\\\"form-control\\\" rows=\\\"5\\\" autocomplete=\\\"off\\\"></textarea>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t<hr/>\\n\\n\\t\\t\\t\\t<div style=\\\"text-align: right; padding: 12px 16px;\\\">\\n\\t\\t\\t\\t\\t<button type=\\\"button\\\" (click)=\\\"cancel()\\\" class=\\\"btn btn-default\\\">Cancel</button>\\n\\t\\t\\t\\t\\t<button type=\\\"submit\\\" class=\\\"btn btn-success\\\" style=\\\"margin-left: 10px\\\">Run</button>\\n\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t</form>\\n\\t\\t</div>\\n\\t</div>\\n</div>\";\n\n/***/ }\n\n});\n\n\n/** WEBPACK FOOTER **\n ** app.bundle.js\n **/","import {platformBrowserDynamic} from \"@angular/platform-browser-dynamic\";\nimport {AppModule} from \"./app/modules/app.module\";\nimport {enableProdMode} from \"@angular/core\";\n\nif (process.env.ENV === 'production') {\n\tenableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./src/main.ts\n **/","import {NgModule} from \"@angular/core\";\nimport {BrowserModule} from \"@angular/platform-browser\";\nimport {AppMainComponent} from \"../app-main/app-main.component\";\nimport {routing} from \"../app-routes/app.routes\";\nimport {GlobalService} from \"../services/GlobalService\";\nimport {JobService} from \"../services/JobService\";\nimport {RouterModule} from \"@angular/router\";\nimport {HomeComponent} from \"../home/home.component\";\nimport {AppHeaderComponent} from \"../app-header/app-header.component\";\nimport {AppFooterComponent} from \"../app-footer/app-footer.component\";\nimport {JobListComponent} from \"../job-list/job-list.component\";\nimport {ProjectListComponent} from \"../project-list/project-list.component\";\nimport {ProjectViewComponent} from \"../project-view/project-view.component\";\nimport {NotFoundComponent} from \"../not-found/not-found.component\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport {HttpModule} from \"@angular/http\";\nimport {TaskService} from \"../services/TaskService\";\nimport {ProjectService} from \"../services/ProjectService\";\nimport {TaskViewComponent} from \"../task-view/task-view.component\";\nimport {TimestampFormat} from \"../pipes/timestampFormat\";\nimport {CHART_DIRECTIVES} from \"ng2-charts/ng2-charts\";\nimport {TaskOptionsComponent} from \"../task-options/task-options.component\";\n\ntoastr.options = {timeOut: 5000, progressBar: true, hideDuration: 300, positionClass: 'toast-top-center'};\n\n@NgModule({\n\tdeclarations: [\n\t\tAppMainComponent,\n\t\tHomeComponent,\n\t\tAppHeaderComponent,\n\t\tAppFooterComponent,\n\t\tJobListComponent,\n\t\tProjectListComponent,\n\t\tProjectViewComponent,\n\t\tNotFoundComponent,\n\t\tTaskViewComponent,\n\t\tTaskOptionsComponent,\n\t\tTimestampFormat,\n\t\tCHART_DIRECTIVES\n\t],\n\timports: [\n\t\trouting,\n\t\tBrowserModule,\n\t\tFormsModule,\n\t\tReactiveFormsModule,\n\t\tHttpModule,\n\t\tRouterModule\n\t],\n\tbootstrap: [\n\t\tAppMainComponent\n\t],\n\tproviders: [\n\t\tGlobalService,\n\t\tJobService,\n\t\tTaskService,\n\t\tProjectService\n\t]\n})\n\nexport class AppModule {\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./src/app/modules/app.module.ts\n **/","import {Component, OnInit} from \"@angular/core\";\nimport {GlobalService} from \"../services/GlobalService\";\nimport {JobService} from \"../services/JobService\";\nimport {Observable} from \"rxjs/Rx\";\n\n@Component({\n    selector: 'app-main',\n    template: require('./app-main.component.html')\n})\n\nexport class AppMainComponent implements OnInit {\n\n    constructor(private globalService: GlobalService, private jobService: JobService) {\n\n    }\n\n    ngOnInit(): any {\n        let jobsCountTimer = Observable.timer(1000, 1000);\n        jobsCountTimer.subscribe(() => this.setJobCount());\n    }\n\n    setJobCount() {\n        this.jobService.getRunningList()\n            .then(res => {\n                this.globalService.jobsCount = res.data.count;\n                this.globalService.jobList = res.data.jobs;\n                this.globalService.emitJobsCount();\n                this.globalService.emitJobList();\n            })\n            .catch(() => {\n                this.globalService.jobsCount = 0;\n                this.globalService.jobList = null;\n                this.globalService.emitJobsCount();\n                this.globalService.emitJobList();\n            });\n    }\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./src/app/app-main/app-main.component.ts\n **/","import {Injectable, EventEmitter} from \"@angular/core\";\n\n@Injectable()\nexport class GlobalService {\n\n\tpublic jobsCount: number = 0;\n\tpublic jobList: any;\n\tpublic jobsCountEmitter = new EventEmitter<number>();\n\tpublic jobListEmitter = new EventEmitter<any>();\n\n\tpublic loadingDelayTime: number = 0;\n\n\tconstructor() {\n\n\t}\n\n\temitJobsCount() {\n\t\tthis.jobsCountEmitter.emit(this.jobsCount);\n\t}\n\n\temitJobList() {\n\t\tthis.jobListEmitter.emit(this.jobList);\n\t}\n\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./src/app/services/GlobalService.ts\n **/","import {Injectable} from \"@angular/core\";\nimport {Http} from \"@angular/http\";\nimport \"rxjs/add/operator/toPromise\";\n\n@Injectable()\nexport class JobService {\n\n\tconstructor(private http: Http) {\n\n\t}\n\n\tgetRunningList() {\n\t\treturn this.http.get('/api/job/runningList')\n\t\t\t.toPromise()\n\t\t\t.then(response => response.json())\n\t\t\t.catch(this.handleError);\n\t}\n\n\tlast(projectId: string, taskId: string) {\n\t\treturn this.http.get('/api/job/last?project=' + projectId + '&task=' + taskId)\n\t\t\t.toPromise()\n\t\t\t.then(response => response.json())\n\t\t\t.catch(this.handleError);\n\t}\n\n\tprivate handleError(error: any) {\n\t\treturn Promise.reject(error.message || error);\n\t}\n\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./src/app/services/JobService.ts\n **/","module.exports = \"<div class=\\\"wrap\\\">\\n\\t<app-header></app-header>\\n\\n\\t<div class=\\\"container\\\">\\n\\t\\t<router-outlet></router-outlet>\\n\\t</div>\\n</div>\\n\\n<app-footer></app-footer>\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/app/app-main/app-main.component.html\n ** module id = 357\n ** module chunks = 0\n **/","import {RouterModule, Routes} from \"@angular/router\";\nimport {HomeComponent} from \"../home/home.component\";\nimport {JobListComponent} from \"../job-list/job-list.component\";\nimport {ProjectListComponent} from \"../project-list/project-list.component\";\nimport {NotFoundComponent} from \"../not-found/not-found.component\";\nimport {ProjectViewComponent} from \"../project-view/project-view.component\";\nimport {TaskViewComponent} from \"../task-view/task-view.component\";\n\nconst appRoutes: Routes = [\n\t//{ path: '**', component: PageNotFoundComponent },\n\t{\n\t\tpath: '',\n\t\tredirectTo: '/home',\n\t\tpathMatch: 'full'\n\t},\n\t{\n\t\tpath: 'home', component: HomeComponent\n\t},\n\t{\n\t\tpath: 'job/list', component: JobListComponent\n\t},\n\t{\n\t\tpath: 'project/list', component: ProjectListComponent\n\t},\n\t{\n\t\tpath: 'project/view/:project', component: ProjectViewComponent\n\t},\n\t{\n\t\tpath: 'task/view/:project/:task', component: TaskViewComponent\n\t},\n\t{\n\t\tpath: '**',\n\t\tcomponent: NotFoundComponent\n\t}\n];\n\nexport const routing = RouterModule.forRoot(appRoutes);\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./src/app/app-routes/app.routes.ts\n **/","import {Component} from \"@angular/core\";\n\n@Component({\n\tselector: 'home',\n\ttemplate: require('./home.component.html'),\n\tstyles: [require('./home.component.css')]\n})\n\nexport class HomeComponent {\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./src/app/home/home.component.ts\n **/","module.exports = \"<div class=\\\"home-index\\\">\\n\\n\\t<div class=\\\"jumbotron\\\">\\n\\t\\t<h1>GoCI</h1>\\n\\n\\t\\t<p class=\\\"lead\\\">\\n\\t\\t\\t<img src=\\\"\" + require(\"/Users/paulo/Documents/workspaces/go/src/github.com/prsolucoes/goci/web-app/src/static/images/logo.png\") + \"\\\" border=\\\"0\\\" alt=\\\"\\\" class=\\\"logo\\\"/>\\n\\t\\t</p>\\n\\n\\t\\t<p class=\\\"lead\\\">Welcome! Click on button below to start!.</p>\\n\\n\\t\\t<p>\\n\\t\\t\\t<a class=\\\"btn btn-lg btn-success\\\" routerLink=\\\"/project/list\\\">Start</a>\\n\\t\\t</p>\\n\\t</div>\\n\\n\\t<div class=\\\"body-content\\\">\\n\\n\\t\\t<div class=\\\"row\\\">\\n\\t\\t\\t<div class=\\\"col-lg-4\\\">\\n\\t\\t\\t\\t<h2>Simple structure</h2>\\n\\t\\t\\t\\t<p>With a file based structure you can easily versioning all project files</p>\\n\\t\\t\\t</div>\\n\\t\\t\\t<div class=\\\"col-lg-4\\\">\\n\\t\\t\\t\\t<h2>Simple API</h2>\\n\\t\\t\\t\\t<p>It works with a simple API, using HTTP requests to make everything - if you want</p>\\n\\t\\t\\t</div>\\n\\t\\t\\t<div class=\\\"col-lg-4\\\">\\n\\t\\t\\t\\t<h2>Friendly Interface</h2>\\n\\t\\t\\t\\t<p>You can see your logs with a nice and friendly web responsive interface</p>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\n\\t</div>\\n</div>\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/app/home/home.component.html\n ** module id = 361\n ** module chunks = 0\n **/","module.exports = __webpack_public_path__ + \"assets/logo.638d4c934da96a3d88f77760d2ed7b88.png\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/static/images/logo.png\n ** module id = 362\n ** module chunks = 0\n **/","module.exports = \".home-index .logo {\\n\\twidth: 200px;\\n}\\n\\n.jumbotron {\\n\\ttext-align: center;\\n\\tbackground-color: transparent;\\n}\\n\\n.jumbotron .btn {\\n\\tfont-size: 21px;\\n\\tpadding: 14px 24px;\\n}\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/app/home/home.component.css\n ** module id = 363\n ** module chunks = 0\n **/","import {Component, OnInit} from \"@angular/core\";\nimport {Router} from \"@angular/router\";\nimport {GlobalService} from \"../services/GlobalService\";\n\n@Component({\n\tselector: 'job-list',\n\ttemplate: require('./job-list.component.html'),\n\tstyles: [require('./job-list.component.css')]\n})\n\nexport class JobListComponent implements OnInit {\n\n\tprivate showData: boolean;\n\tprivate showEmptyData: boolean;\n\tprivate showError: boolean;\n\tprivate showLoading: boolean;\n\n\tprivate jobList: Array<any>;\n\n\tprivate chartData: any;\n\tprivate chartDataDatasets: any[];\n\tprivate chartDataLabels: string[] = [];\n\tprivate chartDataOptions: any = {};\n\tprivate chartDataColors: string[] = [];\n\n\tconstructor(private globalService: GlobalService, private router: Router) {\n\t\tthis.hideAll();\n\t\tthis.showLoading = true;\n\t}\n\n\tngOnInit(): any {\n\t\tthis.globalService.jobListEmitter.subscribe((value: any) => {\n\t\t\tthis.jobList = value;\n\n\t\t\tif (this.jobList == null) {\n\t\t\t\tthis.hideAll();\n\t\t\t\tthis.showError = true;\n\t\t\t} else if (this.jobList.length == 0) {\n\t\t\t\tthis.hideAll();\n\t\t\t\tthis.showEmptyData = true;\n\t\t\t} else {\n\t\t\t\t// job list data\n\t\t\t\tthis.hideAll();\n\t\t\t\tthis.showData = true;\n\n\t\t\t\t// chart data\n\t\t\t\tvar chartLabels: string[] = [];\n\t\t\t\tvar chartColors: string[] = [];\n\t\t\t\tvar chartDataset: number[] = [];\n\t\t\t\tvar chartOptions: any = {\n\t\t\t\t\tanimation: false\n\t\t\t\t};\n\n\t\t\t\tvar chartDataForOnQueue = 0;\n\t\t\t\tvar chartDataForRunning = 0;\n\t\t\t\tvar chartDataForError = 0;\n\t\t\t\tvar chartDataForSuccess = 0;\n\n\t\t\t\tfor (let jobIndex in this.jobList) {\n\t\t\t\t\tlet job = this.jobList[jobIndex];\n\t\t\t\t\tlet jobStatus = job[\"status\"];\n\n\t\t\t\t\tswitch (jobStatus) {\n\t\t\t\t\t\tcase 'onqueue':\n\t\t\t\t\t\t\tchartDataForOnQueue += 1;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'running':\n\t\t\t\t\t\t\tchartDataForRunning += 1;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'error':\n\t\t\t\t\t\t\tchartDataForError += 1;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'success':\n\t\t\t\t\t\t\tchartDataForSuccess += 1;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (chartDataForOnQueue > 0) {\n\t\t\t\t\tchartLabels.push(\"On Queue\");\n\t\t\t\t\tchartColors.push(\"#08b4fa\");\n\t\t\t\t\tchartDataset.push(chartDataForOnQueue);\n\t\t\t\t}\n\n\t\t\t\tif (chartDataForSuccess > 0) {\n\t\t\t\t\tchartLabels.push(\"Success\");\n\t\t\t\t\tchartColors.push(\"#39c558\");\n\t\t\t\t\tchartDataset.push(chartDataForSuccess);\n\t\t\t\t}\n\n\t\t\t\tif (chartDataForError > 0) {\n\t\t\t\t\tchartLabels.push(\"Error\");\n\t\t\t\t\tchartColors.push(\"#ff3e43\");\n\t\t\t\t\tchartDataset.push(chartDataForError);\n\t\t\t\t}\n\n\t\t\t\tif (chartDataForRunning > 0) {\n\t\t\t\t\tchartLabels.push(\"Running\");\n\t\t\t\t\tchartColors.push(\"#ffbe41\");\n\t\t\t\t\tchartDataset.push(chartDataForRunning);\n\t\t\t\t}\n\n\t\t\t\tthis.chartData = {\n\t\t\t\t\ttype: 'doughnut',\n\t\t\t\t\tanimation: {\n\t\t\t\t\t\tanimateScale: false,\n\t\t\t\t\t\tanimateRotate: false\n\t\t\t\t\t},\n\t\t\t\t\tlabels: chartLabels,\n\t\t\t\t\tdatasets: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdata: chartDataset,\n\t\t\t\t\t\t\tbackgroundColor: chartColors,\n\t\t\t\t\t\t\thoverBackgroundColor: chartColors\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\tgraphOptions: {\n\t\t\t\t\t\tanimation: false\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tthis.chartDataDatasets = [{\n\t\t\t\t\tdata: chartDataset,\n\t\t\t\t\tbackgroundColor: chartColors,\n\t\t\t\t\thoverBackgroundColor: chartColors\n\t\t\t\t}];\n\n\t\t\t\tthis.chartDataLabels = chartLabels;\n\t\t\t\tthis.chartDataOptions = chartOptions;\n\t\t\t\tthis.chartDataColors = chartColors;\n\t\t\t}\n\t\t});\n\t}\n\n\thideAll() {\n\t\tthis.showData = false;\n\t\tthis.showEmptyData = false;\n\t\tthis.showLoading = false;\n\t\tthis.showError = false;\n\t}\n\n\tview(projectId: string, taskId: string) {\n\t\tthis.router.navigate(['/task/view', projectId, taskId]);\n\t}\n\n\tback() {\n\t\tthis.router.navigate(['/project/list']);\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./src/app/job-list/job-list.component.ts\n **/","module.exports = \"<div class=\\\"job-list\\\">\\n\\n\\t<div class=\\\"col-md-8 col-lg-8\\\">\\n\\t\\t<!-- OPTIONS -->\\n\\t\\t<div id=\\\"options-container\\\" class=\\\"panel panel-default\\\">\\n\\t\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t\\t<h3 class=\\\"options-container-title\\\">Job List</h3>\\n\\t\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"back()\\\">Back</button>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\n\\t\\t<!-- DATA -->\\n\\t\\t<div id=\\\"data\\\" *ngIf=\\\"showData\\\">\\n\\t\\t\\t<div id=\\\"job-list\\\" class=\\\"list-group\\\">\\n\\t\\t\\t\\t<div *ngFor=\\\"let job of jobList\\\" id=\\\"job-row-{{job.id}}\\\" class=\\\"job-row list-group-item\\\">\\n\\t\\t\\t\\t\\t<h4 class=\\\"list-group-item-heading\\\">\\n\\t\\t\\t\\t\\t\\t<a href=\\\"javascript:void(0);\\\" (click)=\\\"view(job.projectId, job.taskId)\\\">{{job.task.name}}</a>\\n\\t\\t\\t\\t\\t</h4>\\n\\t\\t\\t\\t\\t<div class=\\\"list-group-item-text\\\">\\n\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t<strong>Job: </strong> {{job.id}}\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t<strong>Created at:</strong> {{job.createdAt | timestampFormat}}\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t<strong>Started at:</strong> {{job.startedAt | timestampFormat}}\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t<strong>Duration:</strong> {{job.duration}}s\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t<strong>Status:</strong>\\n\\t\\t\\t\\t\\t\\t\\t<span [ngSwitch]=\\\"job?.status\\\">\\n\\t\\t\\t\\t\\t\\t\\t<span *ngSwitchCase=\\\"'onqueue'\\\" class=\\\"label label-primary\\\">{{job.status}}</span>\\n\\t\\t\\t\\t\\t\\t\\t<span *ngSwitchCase=\\\"'running'\\\" class=\\\"label label-warning\\\">{{job.status}}</span>\\n\\t\\t\\t\\t\\t\\t\\t<span *ngSwitchCase=\\\"'success'\\\" class=\\\"label label-success\\\">{{job.status}}</span>\\n\\t\\t\\t\\t\\t\\t\\t<span *ngSwitchCase=\\\"'error'\\\" class=\\\"label label-danger\\\">{{job.status}}</span>\\n\\t\\t\\t\\t\\t\\t\\t<span *ngSwitchDefault class=\\\"label label-success\\\">{{job.status}}</span>\\n\\t\\t\\t\\t\\t\\t</span>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t\\t<strong>Progress:</strong>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"progress\\\">\\n\\t\\t\\t\\t\\t\\t\\t<span [ngSwitch]=\\\"job.status\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<div *ngSwitchCase=\\\"'onqueue'\\\" class=\\\"active progress-bar progress-bar-info\\\" role=\\\"progressbar\\\" [attr.aria-valuenow]=\\\"job.progress\\\" aria-valuemin=\\\"0\\\" aria-valuemax=\\\"100\\\" [style.width]=\\\"job.progress + '%'\\\" style=\\\"min-width: 2em\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{{job.progress}}%\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t<div *ngSwitchCase=\\\"'success'\\\" class=\\\"active progress-bar progress-bar-success\\\" role=\\\"progressbar\\\" [attr.aria-valuenow]=\\\"job.progress\\\" aria-valuemin=\\\"0\\\" aria-valuemax=\\\"100\\\" [style.width]=\\\"job.progress + '%'\\\" style=\\\"min-width: 2em\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{{job.progress}}%\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t<div *ngSwitchCase=\\\"'running'\\\" class=\\\"active progress-bar progress-bar-striped progress-bar-warning\\\" role=\\\"progressbar\\\" [attr.aria-valuenow]=\\\"job.progress\\\" aria-valuemin=\\\"0\\\" aria-valuemax=\\\"100\\\" [style.width]=\\\"job.progress + '%'\\\" style=\\\"min-width: 2em\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{{job.progress}}%\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t<div *ngSwitchCase=\\\"'error'\\\" class=\\\"active progress-bar progress-bar-danger\\\" role=\\\"progressbar\\\" [attr.aria-valuenow]=\\\"job.progress\\\" aria-valuemin=\\\"0\\\" aria-valuemax=\\\"100\\\" [style.width]=\\\"job.progress + '%'\\\" style=\\\"min-width: 2em\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{{job.progress}}%\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t<div *ngSwitchDefault class=\\\"active progress-bar progress-bar-success\\\" role=\\\"progressbar\\\" [attr.aria-valuenow]=\\\"job.progress\\\" aria-valuemin=\\\"0\\\" aria-valuemax=\\\"100\\\" [style.width]=\\\"job.progress + '%'\\\" style=\\\"min-width: 2em\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{{job.progress}}%\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t</span>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\n\\t\\t<div id=\\\"no-data\\\" *ngIf=\\\"showEmptyData\\\">\\n\\t\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t\\t\\t<div>No jobs found</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\n\\t\\t<div id=\\\"error-data\\\" *ngIf=\\\"showError\\\">\\n\\t\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t\\t\\t<h3>Problem while loading job list</h3>\\n\\t\\t\\t\\t\\t<p id=\\\"error-data-message\\\"></p>\\n\\t\\t\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"load()\\\">Try again</button>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\n\\t\\t<div id=\\\"loading-data\\\" *ngIf=\\\"showLoading\\\">\\n\\t\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t\\t<div class=\\\"panel-body\\\">Loading...</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<div class=\\\"col-md-4 col-lg-4\\\">\\n\\t\\t<div id=\\\"graph-data\\\" *ngIf=\\\"showData\\\">\\n\\t\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t\\t\\t<h3>Job graph</h3>\\n\\t\\t\\t\\t\\t<br/>\\n\\t\\t\\t\\t\\t<base-chart\\n\\t\\t\\t\\t\\t\\tclass=\\\"chart\\\"\\n\\t\\t\\t\\t\\t\\t[datasets]=\\\"chartDataDatasets\\\"\\n\\t\\t\\t\\t\\t\\t[labels]=\\\"chartDataLabels\\\"\\n\\t\\t\\t\\t\\t\\t[options]=\\\"chartDataOptions\\\"\\n\\t\\t\\t\\t\\t\\t[colors]=\\\"chartDataColors\\\"\\n\\t\\t\\t\\t\\t\\t[chartType]=\\\"'doughnut'\\\">\\n\\t\\t\\t\\t\\t</base-chart>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\n\\t\\t<div id=\\\"graph-no-data\\\" *ngIf=\\\"showEmptyData\\\">\\n\\t\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t\\t\\t<div>No jobs for graph</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\n\\t\\t<div id=\\\"graph-error-data\\\" *ngIf=\\\"showError\\\">\\n\\t\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t\\t\\t<div>Problem while loading job list</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\n\\t\\t<div id=\\\"graph-loading-data\\\" *ngIf=\\\"showLoading\\\">\\n\\t\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t\\t<div class=\\\"panel-body\\\">Loading...</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t</div>\\n\\n</div>\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/app/job-list/job-list.component.html\n ** module id = 365\n ** module chunks = 0\n **/","module.exports = \"h4.list-group-item-heading a {\\n\\ttext-decoration: none;\\n\\tcolor: #000;\\n}\\n\\nh4.list-group-item-heading a:focus {\\n\\ttext-decoration: none;\\n\\tcolor: #000;\\n}\\n\\nh4.list-group-item-heading a:hover {\\n\\ttext-decoration: none;\\n\\tcolor: #6e6e6e;\\n}\\n\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/app/job-list/job-list.component.css\n ** module id = 366\n ** module chunks = 0\n **/","import {Component, OnInit} from \"@angular/core\";\nimport {ProjectService} from \"../services/ProjectService\";\nimport {Router} from \"@angular/router\";\nimport {Observable} from \"rxjs/Rx\";\nimport {GlobalService} from \"../services/GlobalService\";\n\n@Component({\n\tselector: 'project-list',\n\ttemplate: require('./project-list.component.html')\n})\n\nexport class ProjectListComponent implements OnInit {\n\n\tprivate list: Array<any>;\n\n\tprivate showList: boolean;\n\tprivate showEmptyList: boolean;\n\tprivate showError: boolean;\n\tprivate showLoading: boolean;\n\n\tconstructor(private globalService: GlobalService, private projectService: ProjectService, private router: Router) {\n\n\t}\n\n\tngOnInit(): any {\n\t\tthis.load();\n\t}\n\n\tload() {\n\t\tthis.hideAll();\n\n\t\tif (this.globalService.loadingDelayTime > 0) {\n\t\t\tthis.showLoading = true;\n\t\t}\n\n\t\tObservable.empty().delay(this.globalService.loadingDelayTime).subscribe(null, null, () => {\n\t\t\tthis.getData();\n\t\t});\n\t}\n\n\tgetData() {\n\t\tthis.projectService.list()\n\t\t\t.then(response => {\n\t\t\t\tif (response != null && response.success == true) {\n\t\t\t\t\tthis.list = response.data.list;\n\n\t\t\t\t\tthis.hideAll();\n\n\t\t\t\t\tif (this.list.length > 0) {\n\t\t\t\t\t\tthis.showList = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.showEmptyList = true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.onError();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(() => {\n\t\t\t\tthis.onError();\n\t\t\t});\n\t}\n\n\tback() {\n\t\tthis.router.navigate(['/']);\n\t}\n\n\thideAll() {\n\t\tthis.showList = false;\n\t\tthis.showEmptyList = false;\n\t\tthis.showLoading = false;\n\t\tthis.showError = false;\n\t}\n\n\tonError() {\n\t\tthis.hideAll();\n\t\tthis.showError = true;\n\t\tthis.list = [];\n\t}\n\n\tview(projectId: string) {\n\t\tthis.router.navigate(['/project/view', projectId]);\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./src/app/project-list/project-list.component.ts\n **/","import {Injectable} from \"@angular/core\";\nimport {Http} from \"@angular/http\";\nimport \"rxjs/add/operator/toPromise\";\n\n@Injectable()\nexport class ProjectService {\n\n\tconstructor(private http: Http) {\n\n\t}\n\n\tlist() {\n\t\treturn this.http.get('/api/project/list')\n\t\t\t.toPromise()\n\t\t\t.then(response => response.json())\n\t\t\t.catch(this.handleError);\n\t}\n\n\tview(projectId:String) {\n\t\treturn this.http.get('/api/project/view?project=' + projectId)\n\t\t\t.toPromise()\n\t\t\t.then(response => response.json())\n\t\t\t.catch(this.handleError);\n\t}\n\n\tprivate handleError(error: any) {\n\t\treturn Promise.reject(error.message || error);\n\t}\n\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./src/app/services/ProjectService.ts\n **/","module.exports = \"<div class=\\\"project-index\\\">\\n\\n\\t<!-- OPTIONS -->\\n\\t<div id=\\\"options-container\\\" class=\\\"panel panel-default hiddenContent\\\">\\n\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t<h3 class=\\\"options-container-title\\\">Project List</h3>\\n\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"load()\\\">Refresh</button>\\n\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"back()\\\">Back</button>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<!-- DATA -->\\n\\t<div id=\\\"data\\\" *ngIf=\\\"showList\\\">\\n\\t\\t<div id=\\\"project-list\\\" class=\\\"list-group\\\">\\n\\t\\t\\t<a *ngFor=\\\"let item of list\\\" href=\\\"javascript: void(0);\\\" (click)=\\\"view(item.id)\\\" class=\\\"project-row list-group-item\\\">\\n\\t\\t\\t\\t<h4 class=\\\"list-group-item-heading\\\">{{item.name}}</h4>\\n\\t\\t\\t\\t<p class=\\\"list-group-item-text\\\">{{item.description}}</p>\\n\\t\\t\\t</a>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<div id=\\\"no-data\\\" *ngIf=\\\"showEmptyList\\\">\\n\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t\\t<div>No projects found</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<div id=\\\"error-data\\\" *ngIf=\\\"showError\\\">\\n\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t\\t<h3>Problem while loading project list</h3>\\n\\t\\t\\t\\t<p id=\\\"error-data-message\\\"></p>\\n\\t\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"load()\\\">Try again</button>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<div id=\\\"loading-data\\\" *ngIf=\\\"showLoading\\\">\\n\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t<div class=\\\"panel-body\\\">Loading...</div>\\n\\t\\t</div>\\n\\t</div>\\n\\n</div>\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/app/project-list/project-list.component.html\n ** module id = 369\n ** module chunks = 0\n **/","import {Component} from \"@angular/core\";\n\n@Component({\n\tselector: 'not-found',\n\ttemplate: require('./not-found.component.html')\n})\n\nexport class NotFoundComponent {\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./src/app/not-found/not-found.component.ts\n **/","module.exports = \"<div style=\\\"width: 100%; text-align: center;\\\">\\n\\t<h1>\\n\\t\\tOops!</h1>\\n\\t<h2>\\n\\t\\t404 Not Found</h2>\\n\\t<div class=\\\"error-details\\\">\\n\\t\\tSorry, an error has occured, Requested page not found!\\n\\t</div>\\n</div>\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/app/not-found/not-found.component.html\n ** module id = 371\n ** module chunks = 0\n **/","import {Component, OnInit} from \"@angular/core\";\nimport {ProjectService} from \"../services/ProjectService\";\nimport {Router, ActivatedRoute} from \"@angular/router\";\nimport {Observable} from \"rxjs/Rx\";\nimport {TaskService} from \"../services/TaskService\";\nimport {GlobalService} from \"../services/GlobalService\";\n\n@Component({\n\tselector: 'project-view',\n\ttemplate: require('./project-view.component.html')\n})\n\nexport class ProjectViewComponent implements OnInit {\n\n\tprivate projectId: string;\n\tprivate project: any;\n\n\tprivate showData: boolean;\n\tprivate showEmptyData: boolean;\n\tprivate showError: boolean;\n\tprivate showLoading: boolean;\n\n\tprivate runTaskOptions: any;\n\tprivate runProjectId: string;\n\tprivate runProjectName: string;\n\tprivate runTaskId: string;\n\tprivate runTaskName: string;\n\tprivate runTaskDescription: string;\n\tprivate showTaskOptionsForm: boolean;\n\n\tconstructor(private globalService: GlobalService, private projectService: ProjectService, private taskService: TaskService, private router: Router, private route: ActivatedRoute) {\n\n\t}\n\n\tngOnInit(): any {\n\t\tthis.route.params.subscribe(params => {\n\t\t\tthis.projectId = params['project'];\n\t\t});\n\n\t\tthis.load();\n\t}\n\n\tload() {\n\t\tthis.hideAll();\n\n\t\tif (this.globalService.loadingDelayTime > 0) {\n\t\t\tthis.showLoading = true;\n\t\t}\n\n\t\tObservable.empty().delay(this.globalService.loadingDelayTime).subscribe(null, null, () => {\n\t\t\tthis.getData();\n\t\t});\n\t}\n\n\tgetData() {\n\t\tthis.projectService.view(this.projectId)\n\t\t\t.then(response => {\n\t\t\t\tif (response != null && response.success == true) {\n\t\t\t\t\tthis.project = response.data.project;\n\n\t\t\t\t\tthis.hideAll();\n\n\t\t\t\t\tif (this.project != null) {\n\t\t\t\t\t\tthis.showData = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.showEmptyData = true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.onError();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(() => {\n\t\t\t\tthis.onError();\n\t\t\t});\n\t}\n\n\tback() {\n\t\tthis.router.navigate(['/project/list']);\n\t}\n\n\thideAll() {\n\t\tthis.showData = false;\n\t\tthis.showEmptyData = false;\n\t\tthis.showLoading = false;\n\t\tthis.showError = false;\n\t\tthis.showTaskOptionsForm = false;\n\t}\n\n\tonError() {\n\t\tthis.hideAll();\n\t\tthis.showError = true;\n\t\tthis.project = null;\n\t}\n\n\tview(projectId: string, taskId: string) {\n\t\tthis.router.navigate(['/task/view', projectId, taskId]);\n\t}\n\n\tshowTaskOptions(projectId: string, projectName: string, taskId: string, taskName: string, taskDescription: string) {\n\t\tthis.showTaskOptionsForm = false;\n\t\tthis.runProjectId = projectId;\n\t\tthis.runProjectName = projectName;\n\t\tthis.runTaskId = taskId;\n\t\tthis.runTaskName = taskName;\n\t\tthis.runTaskDescription = taskDescription;\n\t\tthis.runTaskOptions = null;\n\n\t\tthis.taskService.options(projectId, taskId)\n\t\t\t.then(response => {\n\t\t\t\tif (response != null && response.success == true) {\n\t\t\t\t\tthis.hideAll();\n\t\t\t\t\tthis.runTaskOptions = response.data.options;\n\t\t\t\t\tthis.showTaskOptionsForm = true;\n\t\t\t\t} else {\n\t\t\t\t\ttoastr.error('Error when get task options, try again');\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\ttoastr.error(error);\n\t\t\t});\n\t}\n\n\ttaskRunWithSuccess($event: any) {\n\t\tthis.hideAll();\n\t\tthis.showData = true;\n\t}\n\n\ttaskRunWithError($event: any) {\n\n\t}\n\n\ttaskRunCancel($event: any) {\n\t\tthis.hideAll();\n\t\tthis.showData = true;\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./src/app/project-view/project-view.component.ts\n **/","import {Injectable} from \"@angular/core\";\nimport {Http, Headers} from \"@angular/http\";\nimport \"rxjs/add/operator/toPromise\";\n\n@Injectable()\nexport class TaskService {\n\n\tconstructor(private http: Http) {\n\n\t}\n\n\toptions(projectId: string, taskId: string) {\n\t\treturn this.http.get('/api/task/options?project=' + projectId + '&task=' + taskId)\n\t\t\t.toPromise()\n\t\t\t.then(response => response.json())\n\t\t\t.catch(this.handleError);\n\t}\n\n\tview(projectId: string, taskId: string) {\n\t\treturn this.http.get('/api/task/view?project=' + projectId + '&task=' + taskId)\n\t\t\t.toPromise()\n\t\t\t.then(response => response.json())\n\t\t\t.catch(this.handleError);\n\t}\n\n\trun(projectId: string, taskId: string, options: any) {\n\t\tlet headers:Headers = new Headers({\n\t\t\t'Content-Type': 'application/x-www-form-urlencoded'\n\t\t});\n\n\t\treturn this.http.post('/api/task/run', options, {headers: headers})\n\t\t\t.toPromise()\n\t\t\t.then(response => response.json())\n\t\t\t.catch(this.handleError);\n\t}\n\n\tprivate handleError(error: any) {\n\t\treturn Promise.reject(error.message || error);\n\t}\n\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./src/app/services/TaskService.ts\n **/","module.exports = \"<div class=\\\"project-view\\\">\\n\\n\\t<!-- OPTIONS -->\\n\\t<div id=\\\"options-container\\\" class=\\\"panel panel-default\\\">\\n\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t<h3 class=\\\"options-container-title\\\">Project {{project?.name}}</h3>\\n\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"load()\\\">Refresh</button>\\n\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"back()\\\">Back</button>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<!-- DATA -->\\n\\t<div id=\\\"data\\\" *ngIf=\\\"showData\\\">\\n\\t\\t<h5>Details</h5>\\n\\n\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t\\t<div><strong>Name:</strong> {{project.name}}</div>\\n\\t\\t\\t\\t<div><strong>Description:</strong> {{project.description}}</div>\\n\\t\\t\\t\\t<div><strong>Tasks:</strong> {{project.tasks?.length}}</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\n\\t\\t<h5 *ngIf=\\\"project.tasks?.length > 0\\\">Tasks</h5>\\n\\n\\t\\t<div id=\\\"project-task-list\\\" class=\\\"list-group\\\" *ngIf=\\\"project.tasks?.length > 0\\\">\\n\\t\\t\\t<div *ngFor=\\\"let task of project.tasks\\\" class=\\\"project-task-row list-group-item\\\">\\n\\t\\t\\t\\t<h4 class=\\\"list-group-item-heading\\\">{{task.name}}</h4>\\n\\t\\t\\t\\t<div class=\\\"list-group-item-text\\\">\\n\\t\\t\\t\\t\\t<p>\\n\\t\\t\\t\\t\\t\\t<strong>Description:</strong>{{task.description}}\\n\\t\\t\\t\\t\\t\\t<br/>\\n\\t\\t\\t\\t\\t\\t<strong>Steps:</strong>{{task.steps?.length}}\\n\\t\\t\\t\\t\\t</p>\\n\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-success\\\" (click)=\\\"showTaskOptions(project.id, project.name, task.id, task.name, task.description)\\\">Run</button>\\n\\t\\t\\t\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"view(project.id, task.id)\\\">View</button>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<div id=\\\"no-data\\\" *ngIf=\\\"showEmptyData\\\">\\n\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t\\t<div>Project not found</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<div id=\\\"error-data\\\" *ngIf=\\\"showError\\\">\\n\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t\\t<h3>Problem while loading project</h3>\\n\\t\\t\\t\\t<p id=\\\"error-data-message\\\"></p>\\n\\t\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"back()\\\">Back</button>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<div id=\\\"loading-data\\\" *ngIf=\\\"showLoading\\\">\\n\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t<div class=\\\"panel-body\\\">Loading...</div>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<task-options *ngIf=\\\"showTaskOptionsForm\\\" [projectId]=\\\"runProjectId\\\" [projectName]=\\\"runProjectName\\\" [taskId]=\\\"runTaskId\\\" [taskName]=\\\"runTaskName\\\" [taskDescription]=\\\"runTaskDescription\\\" [options]=\\\"runTaskOptions\\\" (taskRunWithSuccess)=\\\"taskRunWithSuccess($event)\\\" (taskRunWithError)=\\\"taskRunWithError($event)\\\" (taskRunCancel)=\\\"taskRunCancel($event)\\\"></task-options>\\n\\n</div>\\n\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/app/project-view/project-view.component.html\n ** module id = 374\n ** module chunks = 0\n **/","import {Component, OnInit} from \"@angular/core\";\nimport {Router, ActivatedRoute} from \"@angular/router\";\nimport {Observable} from \"rxjs/Rx\";\nimport {TaskService} from \"../services/TaskService\";\nimport {JobService} from \"../services/JobService\";\nimport {OutputGroup} from \"../domain/OutputGroup\";\nimport {Utils} from \"../domain/Utils\";\nimport {GlobalService} from \"../services/GlobalService\";\n\n@Component({\n\tselector: 'task-view',\n\ttemplate: require('./task-view.component.html')\n})\n\nexport class TaskViewComponent implements OnInit {\n\n\tprivate projectId: string;\n\tprivate taskId: string;\n\tprivate project: any;\n\tprivate task: any;\n\tprivate lastJob: any;\n\n\tprivate showData: boolean;\n\tprivate showEmptyData: boolean;\n\tprivate showError: boolean;\n\tprivate showLoading: boolean;\n\n\tprivate showLastJobData: boolean;\n\tprivate showLastJobEmptyData: boolean;\n\tprivate showLastJobError: boolean;\n\tprivate showLastJobLoading: boolean;\n\n\tprivate showTaskOptionsForm: boolean;\n\n\tprivate runTaskOptions: any;\n\tprivate runProjectId: string;\n\tprivate runProjectName: string;\n\tprivate runTaskId: string;\n\tprivate runTaskName: string;\n\tprivate runTaskDescription: string;\n\n\tprivate outputGroupList: Array<OutputGroup>;\n\tprivate lastJobId: string;\n\n\tconstructor(private globalService: GlobalService, private taskService: TaskService, private jobService: JobService, private router: Router, private route: ActivatedRoute) {\n\n\t}\n\n\tngOnInit(): any {\n\t\tthis.route.params.subscribe(params => {\n\t\t\tthis.projectId = params['project'];\n\t\t\tthis.taskId = params['task'];\n\t\t});\n\n\t\tthis.load();\n\n\t\tlet lastJobTimer = Observable.timer(1000, 1000);\n\t\tlastJobTimer.subscribe(() => this.getLastJobData());\n\t}\n\n\tload() {\n\t\tthis.hideAll();\n\n\t\tif (this.globalService.loadingDelayTime > 0) {\n\t\t\tthis.showLoading = true;\n\t\t}\n\n\t\tObservable.empty().delay(this.globalService.loadingDelayTime).subscribe(null, null, () => {\n\t\t\tthis.getData();\n\t\t});\n\t}\n\n\tgetData() {\n\t\tthis.taskService.view(this.projectId, this.taskId)\n\t\t\t.then(response => {\n\t\t\t\tif (response != null && response.success == true) {\n\t\t\t\t\tthis.project = response.data.project;\n\t\t\t\t\tthis.task = response.data.task;\n\n\t\t\t\t\tthis.hideAll();\n\n\t\t\t\t\tif (this.project != null && this.task != null) {\n\t\t\t\t\t\tthis.showData = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.showEmptyData = true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.onError();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(() => {\n\t\t\t\tthis.onError();\n\t\t\t});\n\t}\n\n\tback() {\n\t\tthis.router.navigate(['/project/view', this.projectId]);\n\t}\n\n\thideAll() {\n\t\tthis.showData = false;\n\t\tthis.showEmptyData = false;\n\t\tthis.showLoading = false;\n\t\tthis.showError = false;\n\t\tthis.showTaskOptionsForm = false;\n\t}\n\n\thideAllForLastJob() {\n\t\tthis.showLastJobData = false;\n\t\tthis.showLastJobEmptyData = false;\n\t\tthis.showLastJobLoading = false;\n\t\tthis.showLastJobError = false;\n\t}\n\n\tonError() {\n\t\tthis.hideAll();\n\t\tthis.showError = true;\n\t\tthis.project = null;\n\t}\n\n\tonErrorForLastJob() {\n\t\tthis.hideAllForLastJob();\n\t\tthis.showLastJobError = true;\n\t\tthis.lastJob = null;\n\t}\n\n\tview(projectId: string, taskId: string) {\n\t\tthis.router.navigate(['/task/view', projectId, taskId]);\n\t}\n\n\tshowTaskOptions(projectId: string, projectName: string, taskId: string, taskName: string, taskDescription: string) {\n\t\tthis.showTaskOptionsForm = false;\n\t\tthis.runProjectId = projectId;\n\t\tthis.runProjectName = projectName;\n\t\tthis.runTaskId = taskId;\n\t\tthis.runTaskName = taskName;\n\t\tthis.runTaskDescription = taskDescription;\n\t\tthis.runTaskOptions = null;\n\n\t\tthis.taskService.options(projectId, taskId)\n\t\t\t.then(response => {\n\t\t\t\tif (response != null && response.success == true) {\n\t\t\t\t\tthis.hideAll();\n\t\t\t\t\tthis.runTaskOptions = response.data.options;\n\t\t\t\t\tthis.showTaskOptionsForm = true;\n\t\t\t\t} else {\n\t\t\t\t\ttoastr.error('Error when get task options, try again');\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\ttoastr.error(error);\n\t\t\t});\n\t}\n\n\ttaskRunWithSuccess($event: any) {\n\t\tthis.hideAll();\n\t\tthis.showData = true;\n\t}\n\n\ttaskRunWithError($event: any) {\n\n\t}\n\n\ttaskRunCancel($event: any) {\n\t\tthis.hideAll();\n\t\tthis.showData = true;\n\t}\n\n\tgetLastJobData() {\n\t\tthis.jobService.last(this.projectId, this.taskId)\n\t\t\t.then(response => {\n\t\t\t\t\tif (response != null && response.success == true) {\n\t\t\t\t\t\tthis.lastJob = response.data.job;\n\n\t\t\t\t\t\tif (this.lastJob[\"id\"] != this.lastJobId) {\n\t\t\t\t\t\t\tthis.lastJobId = this.lastJob[\"id\"];\n\t\t\t\t\t\t\tthis.outputGroupList = [];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet newOutputGroupList: any[] = this.lastJob.outputGroup;\n\t\t\t\t\t\tlet activeTabId = \"console\";\n\n\t\t\t\t\t\t// add new tabs\n\t\t\t\t\t\tif (newOutputGroupList) {\n\t\t\t\t\t\t\tfor (let newOutputGroupKey in newOutputGroupList) {\n\t\t\t\t\t\t\t\tlet newOutputGroup = newOutputGroupList[newOutputGroupKey];\n\t\t\t\t\t\t\t\tlet hasOutputGroup = false;\n\n\t\t\t\t\t\t\t\tfor (let outputGroupKey in this.outputGroupList) {\n\t\t\t\t\t\t\t\t\tlet outputGroup = this.outputGroupList[outputGroupKey];\n\n\t\t\t\t\t\t\t\t\tif (outputGroup.name == newOutputGroup[\"name\"]) {\n\t\t\t\t\t\t\t\t\t\thasOutputGroup = true;\n\n\t\t\t\t\t\t\t\t\t\tif (outputGroup.updatedAt != newOutputGroup[\"updatedAt\"]) {\n\t\t\t\t\t\t\t\t\t\t\toutputGroup.updatedAt = newOutputGroup[\"updatedAt\"];\n\t\t\t\t\t\t\t\t\t\t\toutputGroup.output = newOutputGroup[\"output\"];\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (!hasOutputGroup) {\n\t\t\t\t\t\t\t\t\tlet outputGroup = new OutputGroup();\n\n\t\t\t\t\t\t\t\t\toutputGroup.id = Utils.slugify(newOutputGroup[\"name\"]);\n\t\t\t\t\t\t\t\t\toutputGroup.name = newOutputGroup[\"name\"];\n\t\t\t\t\t\t\t\t\toutputGroup.output = newOutputGroup[\"output\"];\n\t\t\t\t\t\t\t\t\toutputGroup.updatedAt = newOutputGroup[\"updatedAt\"];\n\n\t\t\t\t\t\t\t\t\tthis.outputGroupList.push(outputGroup);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// select tab\n\t\t\t\t\t\tfor (let outputGroupKey in this.outputGroupList) {\n\t\t\t\t\t\t\tlet outputGroup = this.outputGroupList[outputGroupKey];\n\n\t\t\t\t\t\t\tif (outputGroup.id == activeTabId) {\n\t\t\t\t\t\t\t\toutputGroup.active = true;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\toutputGroup.active = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.hideAllForLastJob();\n\n\t\t\t\t\t\tif (this.lastJob != null) {\n\t\t\t\t\t\t\tthis.showLastJobData = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.showLastJobEmptyData = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.onErrorForLastJob();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t)\n\t\t\t.catch(() => {\n\t\t\t\tthis.onErrorForLastJob();\n\t\t\t});\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./src/app/task-view/task-view.component.ts\n **/","export class OutputGroup {\n\n\tpublic id: string;\n\tpublic name: string;\n\tpublic output: string;\n\tpublic updatedAt: number;\n\tpublic active: boolean;\n\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./src/app/domain/OutputGroup.ts\n **/","export class Utils {\n\n\tstatic formValuesEncoded(formValues: any) {\n\t\tlet formData = '';\n\n\t\tif (formValues != null) {\n\t\t\tfor (var formKey in formValues) {\n\t\t\t\tvar formValue = formValues[formKey];\n\n\t\t\t\tif (formData == '') {\n\t\t\t\t\tformData += `${formKey}=${formValue}`;\n\t\t\t\t} else {\n\t\t\t\t\tformData += `&${formKey}=${formValue}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn formData;\n\t}\n\n\tstatic slugify(text: string) {\n\t\treturn text.toString().toLowerCase()\n\t\t\t.replace(/\\s+/g, '-')           // Replace spaces with -\n\t\t\t.replace(/[^\\w\\-]+/g, '')       // Remove all non-word chars\n\t\t\t.replace(/\\-\\-+/g, '-')         // Replace multiple - with single -\n\t\t\t.replace(/^-+/, '')             // Trim - from start of text\n\t\t\t.replace(/-+$/, '');            // Trim - from end of text\n\t}\n\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./src/app/domain/Utils.ts\n **/","module.exports = \"<div class=\\\"task-view\\\">\\n\\n\\t<!-- OPTIONS -->\\n\\t<div id=\\\"options-container\\\" class=\\\"panel panel-default\\\">\\n\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t<h3 class=\\\"options-container-title\\\">Task {{task?.name}}</h3>\\n\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-success\\\" (click)=\\\"showTaskOptions(project.id, project.name, task.id, task.name, task.description)\\\">Run</button>\\n\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"load()\\\">Refresh</button>\\n\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"back()\\\">Back</button>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<!-- DATA -->\\n\\t<div id=\\\"data\\\" *ngIf=\\\"showData\\\">\\n\\t\\t<h5>Details</h5>\\n\\n\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t\\t<div><strong>Project:</strong> {{project.name}}</div>\\n\\t\\t\\t\\t<div><strong>Task:</strong> {{task.name}}</div>\\n\\t\\t\\t\\t<div><strong>Description:</strong> {{task.description}}</div>\\n\\t\\t\\t\\t<div><strong>Steps:</strong> {{task.steps?.length}}</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\n\\t\\t<h5 *ngIf=\\\"project.tasks?.length > 0\\\">Tasks</h5>\\n\\n\\t\\t<div id=\\\"project-task-list\\\" class=\\\"list-group\\\" *ngIf=\\\"project.tasks?.length > 0\\\">\\n\\t\\t\\t<div *ngFor=\\\"let task of project.tasks\\\" class=\\\"project-task-row list-group-item\\\">\\n\\t\\t\\t\\t<h4 class=\\\"list-group-item-heading\\\">{{task.name}}</h4>\\n\\t\\t\\t\\t<div class=\\\"list-group-item-text\\\">\\n\\t\\t\\t\\t\\t<p>\\n\\t\\t\\t\\t\\t\\t<strong>Description:</strong>{{task.description}}\\n\\t\\t\\t\\t\\t\\t<br/>\\n\\t\\t\\t\\t\\t\\t<strong>Steps:</strong>{{task.steps?.length}}\\n\\t\\t\\t\\t\\t</p>\\n\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-success\\\" (click)=\\\"showTaskOptions(project.id, project.name, task.id, task.name, task.description)\\\">Run</button>\\n\\t\\t\\t\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"view(project.id, task.id)\\\">View</button>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<div id=\\\"no-data\\\" *ngIf=\\\"showEmptyData\\\">\\n\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t\\t<div>Project not found</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<div id=\\\"error-data\\\" *ngIf=\\\"showError\\\">\\n\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t\\t<h3>Problem while loading project</h3>\\n\\t\\t\\t\\t<p id=\\\"error-data-message\\\"></p>\\n\\t\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"back()\\\">Back</button>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<div id=\\\"loading-data\\\" *ngIf=\\\"showLoading\\\">\\n\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t<div class=\\\"panel-body\\\">Loading...</div>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<div id=\\\"ph-project-task-last-job-data\\\" *ngIf=\\\"showLastJobData\\\">\\n\\t\\t<h5>Last job data</h5>\\n\\n\\t\\t<div class=\\\"ph-project-task-last-job-details\\\">\\n\\t\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t<strong>Job: </strong> {{lastJob.id}}\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t<strong>Created at:</strong> {{lastJob.createdAt | timestampFormat}}\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t<strong>Started at:</strong> {{lastJob.startedAt | timestampFormat}}\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t<strong>Finished at:</strong> {{lastJob.finishedAt | timestampFormat}}\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t<strong>Duration:</strong> {{lastJob.duration}}s\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t<strong>Status:</strong>\\n\\t\\t\\t\\t\\t\\t<span [ngSwitch]=\\\"lastJob?.status\\\">\\n\\t\\t\\t\\t\\t\\t\\t<span *ngSwitchCase=\\\"'onqueue'\\\" class=\\\"label label-primary\\\">{{lastJob.status}}</span>\\n\\t\\t\\t\\t\\t\\t\\t<span *ngSwitchCase=\\\"'running'\\\" class=\\\"label label-warning\\\">{{lastJob.status}}</span>\\n\\t\\t\\t\\t\\t\\t\\t<span *ngSwitchCase=\\\"'success'\\\" class=\\\"label label-success\\\">{{lastJob.status}}</span>\\n\\t\\t\\t\\t\\t\\t\\t<span *ngSwitchCase=\\\"'error'\\\" class=\\\"label label-danger\\\">{{lastJob.status}}</span>\\n\\t\\t\\t\\t\\t\\t\\t<span *ngSwitchDefault class=\\\"label label-success\\\">{{lastJob.status}}</span>\\n\\t\\t\\t\\t\\t\\t</span>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t<strong>Progress:</strong>\\n\\t\\t\\t\\t\\t\\t<div class=\\\"progress\\\">\\n\\t\\t\\t\\t\\t\\t\\t<span [ngSwitch]=\\\"lastJob.status\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<div *ngSwitchCase=\\\"'onqueue'\\\" class=\\\"active progress-bar progress-bar-info\\\" role=\\\"progressbar\\\" [attr.aria-valuenow]=\\\"lastJob.progress\\\" aria-valuemin=\\\"0\\\" aria-valuemax=\\\"100\\\" [style.width]=\\\"lastJob.progress + '%'\\\" style=\\\"min-width: 2em\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{{lastJob.progress}}%\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t<div *ngSwitchCase=\\\"'success'\\\" class=\\\"active progress-bar progress-bar-success\\\" role=\\\"progressbar\\\" [attr.aria-valuenow]=\\\"lastJob.progress\\\" aria-valuemin=\\\"0\\\" aria-valuemax=\\\"100\\\" [style.width]=\\\"lastJob.progress + '%'\\\" style=\\\"min-width: 2em\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{{lastJob.progress}}%\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t<div *ngSwitchCase=\\\"'running'\\\" class=\\\"active progress-bar progress-bar-striped progress-bar-warning\\\" role=\\\"progressbar\\\" [attr.aria-valuenow]=\\\"lastJob.progress\\\" aria-valuemin=\\\"0\\\" aria-valuemax=\\\"100\\\" [style.width]=\\\"lastJob.progress + '%'\\\" style=\\\"min-width: 2em\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{{lastJob.progress}}%\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t<div *ngSwitchCase=\\\"'error'\\\" class=\\\"active progress-bar progress-bar-danger\\\" role=\\\"progressbar\\\" [attr.aria-valuenow]=\\\"lastJob.progress\\\" aria-valuemin=\\\"0\\\" aria-valuemax=\\\"100\\\" [style.width]=\\\"lastJob.progress + '%'\\\" style=\\\"min-width: 2em\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{{lastJob.progress}}%\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t<div *ngSwitchDefault class=\\\"active progress-bar progress-bar-success\\\" role=\\\"progressbar\\\" [attr.aria-valuenow]=\\\"lastJob.progress\\\" aria-valuemin=\\\"0\\\" aria-valuemax=\\\"100\\\" [style.width]=\\\"lastJob.progress + '%'\\\" style=\\\"min-width: 2em\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{{lastJob.progress}}%\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t</span>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t\\t<div>\\n\\t\\t\\t<ul class=\\\"ph-project-task-last-job-tabs nav nav-tabs\\\" role=\\\"tablist\\\">\\n\\t\\t\\t\\t<li role=\\\"presentation\\\" *ngFor=\\\"let outputGroup of outputGroupList\\\" [class.active]=\\\"outputGroup.active\\\">\\n\\t\\t\\t\\t\\t<a id=\\\"tab-{{outputGroup.id}}\\\" href=\\\"#tab-content-{{outputGroup.id}}\\\" [attr.aria-controls]=\\\"'tab-content-'+ outputGroup.id\\\" role=\\\"tab\\\" data-toggle=\\\"tab\\\">{{outputGroup.name}}</a>\\n\\t\\t\\t\\t</li>\\n\\t\\t\\t</ul>\\n\\t\\t\\t<div class=\\\"tab-content ph-project-task-last-job-tab-contents\\\">\\n\\t\\t\\t\\t<div role=\\\"tabpanel\\\" class=\\\"tab-pane tab-pane-output-group\\\" id=\\\"tab-content-{{outputGroup.id}}\\\" *ngFor=\\\"let outputGroup of outputGroupList\\\" [class.active]=\\\"outputGroup.active\\\">\\n\\t\\t\\t\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t\\t\\t\\t<div id=\\\"tab-content-body-{{outputGroup.id}}\\\" class=\\\"panel-body\\\" [innerHTML]=\\\"outputGroup.output\\\"></div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<div id=\\\"ph-project-task-last-job-no-data\\\" *ngIf=\\\"showLastJobEmptyData\\\">\\n\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t\\t<div>Last job not found</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<div id=\\\"ph-project-task-last-job-error-data\\\" *ngIf=\\\"showLastJobError\\\">\\n\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t<div class=\\\"panel-body\\\">\\n\\t\\t\\t\\t<h3>Problem while loading last job data</h3>\\n\\t\\t\\t\\t<p id=\\\"ph-project-task-last-job-error-data-message\\\"></p>\\n\\t\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"getLastJobData()\\\">Try again</button>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<div id=\\\"ph-project-task-last-job-loading-data\\\" *ngIf=\\\"showLastJobLoading\\\">\\n\\t\\t<div class=\\\"panel panel-default\\\">\\n\\t\\t\\t<div class=\\\"panel-body\\\">Loading last job data...</div>\\n\\t\\t</div>\\n\\t</div>\\n\\n\\t<task-options *ngIf=\\\"showTaskOptionsForm\\\" [projectId]=\\\"runProjectId\\\" [projectName]=\\\"runProjectName\\\" [taskId]=\\\"runTaskId\\\" [taskName]=\\\"runTaskName\\\" [taskDescription]=\\\"runTaskDescription\\\" [options]=\\\"runTaskOptions\\\" (taskRunWithSuccess)=\\\"taskRunWithSuccess($event)\\\" (taskRunWithError)=\\\"taskRunWithError($event)\\\" (taskRunCancel)=\\\"taskRunCancel($event)\\\"></task-options>\\n\\n</div>\\n\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/app/task-view/task-view.component.html\n ** module id = 378\n ** module chunks = 0\n **/","import {Component} from \"@angular/core\";\nimport {GlobalService} from \"../services/GlobalService\";\n\n@Component({\n\tselector: 'app-header',\n\ttemplate: require('./app-header.component.html'),\n\tstyles: [require('./app-header.component.css')]\n})\n\nexport class AppHeaderComponent {\n\n\tprivate jobs: number = 0;\n\n\tconstructor(private globalService: GlobalService) {\n\t\tglobalService.jobsCountEmitter.subscribe((value: any) => {\n\t\t\tthis.jobs = value;\n\t\t});\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./src/app/app-header/app-header.component.ts\n **/","module.exports = \"<nav class=\\\"navbar navbar-default navbar-fixed-top\\\">\\n\\t<div class=\\\"container-fluid\\\">\\n\\t\\t<div class=\\\"navbar-header\\\">\\n\\t\\t\\t<button type=\\\"button\\\" class=\\\"navbar-toggle collapsed\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#nav-collapse\\\" aria-expanded=\\\"false\\\" aria-controls=\\\"navbar\\\">\\n\\t\\t\\t\\t<span class=\\\"sr-only\\\">Toggle navigation</span>\\n\\t\\t\\t\\t<span class=\\\"icon-bar\\\"></span>\\n\\t\\t\\t\\t<span class=\\\"icon-bar\\\"></span>\\n\\t\\t\\t\\t<span class=\\\"icon-bar\\\"></span>\\n\\t\\t\\t</button>\\n\\t\\t\\t<a class=\\\"navbar-brand\\\" routerLink=\\\"/home\\\" href=\\\"javascript: void(0);\\\">\\n\\t\\t\\t\\t<img src=\\\"\" + require(\"/Users/paulo/Documents/workspaces/go/src/github.com/prsolucoes/goci/web-app/src/static/images/logo-header.png\") + \"\\\" border=\\\"0\\\" alt=\\\"\\\" class=\\\"logo pull-left\\\"/>\\n\\t\\t\\t\\tGoCI\\n\\t\\t\\t</a>\\n\\t\\t</div>\\n\\t\\t<div id=\\\"nav-collapse\\\" class=\\\"collapse navbar-collapse\\\">\\n\\n\\t\\t\\t<ul class=\\\"nav navbar-nav navbar-right\\\">\\n\\t\\t\\t\\t<li>\\n\\t\\t\\t\\t\\t<a routerLink=\\\"/job/list\\\" href=\\\"javascript: void(0);\\\">\\n\\t\\t\\t\\t\\t\\t<span class=\\\"ph-job-running-list-count\\\">{{jobs}}</span>\\n\\t\\t\\t\\t\\t\\t<span class=\\\"ph-job-running-list-text\\\">jobs</span>\\n\\t\\t\\t\\t\\t</a>\\n\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t<li>\\n\\t\\t\\t\\t\\t<a routerLink=\\\"/home\\\" href=\\\"javascript: void(0);\\\">Home</a>\\n\\t\\t\\t\\t</li>\\n\\t\\t\\t</ul>\\n\\n\\t\\t</div>\\n\\t</div>\\n</nav>\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/app/app-header/app-header.component.html\n ** module id = 380\n ** module chunks = 0\n **/","module.exports = __webpack_public_path__ + \"assets/logo-header.80fc2d1dfb692e9d0fdaeedf027bec3c.png\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/static/images/logo-header.png\n ** module id = 381\n ** module chunks = 0\n **/","module.exports = \".navbar {\\n\\tbackground-color: #205081;\\n}\\n\\n.navbar .container-fluid {\\n\\tbackground-color: #205081;\\n}\\n\\n.navbar-default {\\n\\tborder-bottom: 2px #3d96f3;\\n\\tcolor: #fff;\\n}\\n\\n.navbar-default .navbar-nav > li > a,\\n.navbar-default .navbar-brand {\\n\\tcolor: #fff;\\n}\\n\\n.navbar-default .navbar-toggle {\\n\\tborder-color: #fff;\\n}\\n\\n.navbar-default .navbar-toggle .icon-bar {\\n\\tbackground-color: #fff;\\n}\\n\\n.navbar-default .navbar-brand:hover {\\n\\tcolor: #3d96f3;\\n}\\n.navbar-default .navbar-brand:focus {\\n\\tcolor: #fff;\\n}\\n\\n.navbar .brand, .navbar .nav > li > a:hover {\\n\\tcolor: #3d96f3;\\n}\\n\\n.navbar .brand, .navbar .nav > li > a:focus {\\n\\tcolor: #fff;\\n}\\n\\n.navbar-default .navbar-collapse, .navbar-default .navbar-form {\\n\\tborder: 0 transparent;\\n\\tbox-shadow: none;\\n}\\n\\n.navbar-brand .logo {\\n\\twidth: 28px;\\n\\tmargin-top: -5px;\\n\\tmargin-right: 10px;\\n}\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/app/app-header/app-header.component.css\n ** module id = 382\n ** module chunks = 0\n **/","import {Component} from '@angular/core';\n\n@Component({\n\tselector: 'app-footer',\n\ttemplate: require('./app-footer.component.html'),\n\tstyles: [require('./app-footer.component.css')]\n})\n\nexport class AppFooterComponent {\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./src/app/app-footer/app-footer.component.ts\n **/","module.exports = \"<footer class=\\\"footer\\\">\\n\\t<div class=\\\"container\\\">\\n\\t\\t<p class=\\\"pull-left\\\">&copy; GoCI</p>\\n\\t\\t<p class=\\\"pull-right\\\">Created By:\\n\\t\\t\\t<a href=\\\"http://www.pcoutinho.com\\\" title=\\\"Paulo Coutinho\\\" target=\\\"_blank\\\">Paulo Coutinho</a>\\n\\t\\t</p>\\n\\t</div>\\n</footer>\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/app/app-footer/app-footer.component.html\n ** module id = 384\n ** module chunks = 0\n **/","module.exports = \".footer {\\n\\theight: 60px;\\n\\tbackground-color: #f5f5f5;\\n\\tborder-top: 1px solid #ddd;\\n\\tpadding-top: 20px;\\n}\\n\\n.no-footer {\\n\\tdisplay: none;\\n}\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/app/app-footer/app-footer.component.css\n ** module id = 385\n ** module chunks = 0\n **/","/**\n * @license Angular v2.0.0-rc.6\n * (c) 2010-2016 Google, Inc. https://angular.io/\n * License: MIT\n */\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs/operator/toPromise'), require('rxjs/Subject'), require('rxjs/Observable'), require('rxjs/observable/fromPromise')) :\n    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'rxjs/operator/toPromise', 'rxjs/Subject', 'rxjs/Observable', 'rxjs/observable/fromPromise'], factory) :\n    (factory((global.ng = global.ng || {}, global.ng.forms = global.ng.forms || {}),global.ng.core,global.Rx.Observable.prototype,global.Rx,global.Rx,global.Rx.Observable));\n}(this, function (exports,_angular_core,rxjs_operator_toPromise,rxjs_Subject,rxjs_Observable,rxjs_observable_fromPromise) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var globalScope;\n    if (typeof window === 'undefined') {\n        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {\n            // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492\n            globalScope = self;\n        }\n        else {\n            globalScope = global;\n        }\n    }\n    else {\n        globalScope = window;\n    }\n    // Need to declare a new variable for global here since TypeScript\n    // exports the original value of the symbol.\n    var global$1 = globalScope;\n    // TODO: remove calls to assert in production environment\n    // Note: Can't just export this and import in in other files\n    // as `assert` is a reserved keyword in Dart\n    global$1.assert = function assert(condition) {\n        // TODO: to be fixed properly via #2830, noop for now\n    };\n    function isPresent(obj) {\n        return obj !== undefined && obj !== null;\n    }\n    function isBlank(obj) {\n        return obj === undefined || obj === null;\n    }\n    function isString(obj) {\n        return typeof obj === 'string';\n    }\n    function isFunction(obj) {\n        return typeof obj === 'function';\n    }\n    function isStringMap(obj) {\n        return typeof obj === 'object' && obj !== null;\n    }\n    function isPromise(obj) {\n        // allow any Promise/A+ compliant thenable.\n        // It's up to the caller to ensure that obj.then conforms to the spec\n        return isPresent(obj) && isFunction(obj.then);\n    }\n    function isArray(obj) {\n        return Array.isArray(obj);\n    }\n    var StringWrapper = (function () {\n        function StringWrapper() {\n        }\n        StringWrapper.fromCharCode = function (code) { return String.fromCharCode(code); };\n        StringWrapper.charCodeAt = function (s, index) { return s.charCodeAt(index); };\n        StringWrapper.split = function (s, regExp) { return s.split(regExp); };\n        StringWrapper.equals = function (s, s2) { return s === s2; };\n        StringWrapper.stripLeft = function (s, charVal) {\n            if (s && s.length) {\n                var pos = 0;\n                for (var i = 0; i < s.length; i++) {\n                    if (s[i] != charVal)\n                        break;\n                    pos++;\n                }\n                s = s.substring(pos);\n            }\n            return s;\n        };\n        StringWrapper.stripRight = function (s, charVal) {\n            if (s && s.length) {\n                var pos = s.length;\n                for (var i = s.length - 1; i >= 0; i--) {\n                    if (s[i] != charVal)\n                        break;\n                    pos--;\n                }\n                s = s.substring(0, pos);\n            }\n            return s;\n        };\n        StringWrapper.replace = function (s, from, replace) {\n            return s.replace(from, replace);\n        };\n        StringWrapper.replaceAll = function (s, from, replace) {\n            return s.replace(from, replace);\n        };\n        StringWrapper.slice = function (s, from, to) {\n            if (from === void 0) { from = 0; }\n            if (to === void 0) { to = null; }\n            return s.slice(from, to === null ? undefined : to);\n        };\n        StringWrapper.replaceAllMapped = function (s, from, cb) {\n            return s.replace(from, function () {\n                var matches = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    matches[_i - 0] = arguments[_i];\n                }\n                // Remove offset & string from the result array\n                matches.splice(-2, 2);\n                // The callback receives match, p1, ..., pn\n                return cb(matches);\n            });\n        };\n        StringWrapper.contains = function (s, substr) { return s.indexOf(substr) != -1; };\n        StringWrapper.compare = function (a, b) {\n            if (a < b) {\n                return -1;\n            }\n            else if (a > b) {\n                return 1;\n            }\n            else {\n                return 0;\n            }\n        };\n        return StringWrapper;\n    }());\n    var NumberWrapper = (function () {\n        function NumberWrapper() {\n        }\n        NumberWrapper.toFixed = function (n, fractionDigits) { return n.toFixed(fractionDigits); };\n        NumberWrapper.equal = function (a, b) { return a === b; };\n        NumberWrapper.parseIntAutoRadix = function (text) {\n            var result = parseInt(text);\n            if (isNaN(result)) {\n                throw new Error('Invalid integer literal when parsing ' + text);\n            }\n            return result;\n        };\n        NumberWrapper.parseInt = function (text, radix) {\n            if (radix == 10) {\n                if (/^(\\-|\\+)?[0-9]+$/.test(text)) {\n                    return parseInt(text, radix);\n                }\n            }\n            else if (radix == 16) {\n                if (/^(\\-|\\+)?[0-9ABCDEFabcdef]+$/.test(text)) {\n                    return parseInt(text, radix);\n                }\n            }\n            else {\n                var result = parseInt(text, radix);\n                if (!isNaN(result)) {\n                    return result;\n                }\n            }\n            throw new Error('Invalid integer literal when parsing ' + text + ' in base ' + radix);\n        };\n        // TODO: NaN is a valid literal but is returned by parseFloat to indicate an error.\n        NumberWrapper.parseFloat = function (text) { return parseFloat(text); };\n        Object.defineProperty(NumberWrapper, \"NaN\", {\n            get: function () { return NaN; },\n            enumerable: true,\n            configurable: true\n        });\n        NumberWrapper.isNumeric = function (value) { return !isNaN(value - parseFloat(value)); };\n        NumberWrapper.isNaN = function (value) { return isNaN(value); };\n        NumberWrapper.isInteger = function (value) { return Number.isInteger(value); };\n        return NumberWrapper;\n    }());\n    // JS has NaN !== NaN\n    function looseIdentical(a, b) {\n        return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n    }\n    function normalizeBool(obj) {\n        return isBlank(obj) ? false : obj;\n    }\n    function isJsObject(o) {\n        return o !== null && (typeof o === 'function' || typeof o === 'object');\n    }\n    function isPrimitive(obj) {\n        return !isJsObject(obj);\n    }\n    function hasConstructor(value, type) {\n        return value.constructor === type;\n    }\n\n    /**\n     * Base class for control directives.\n     *\n     * Only used internally in the forms module.\n     *\n     * @stable\n     */\n    var AbstractControlDirective = (function () {\n        function AbstractControlDirective() {\n        }\n        Object.defineProperty(AbstractControlDirective.prototype, \"control\", {\n            get: function () { throw new Error('unimplemented'); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"value\", {\n            get: function () { return isPresent(this.control) ? this.control.value : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"valid\", {\n            get: function () { return isPresent(this.control) ? this.control.valid : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"invalid\", {\n            get: function () { return isPresent(this.control) ? this.control.invalid : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"pending\", {\n            get: function () { return isPresent(this.control) ? this.control.pending : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"errors\", {\n            get: function () {\n                return isPresent(this.control) ? this.control.errors : null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"pristine\", {\n            get: function () { return isPresent(this.control) ? this.control.pristine : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"dirty\", {\n            get: function () { return isPresent(this.control) ? this.control.dirty : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"touched\", {\n            get: function () { return isPresent(this.control) ? this.control.touched : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"untouched\", {\n            get: function () { return isPresent(this.control) ? this.control.untouched : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"disabled\", {\n            get: function () { return isPresent(this.control) ? this.control.disabled : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"enabled\", {\n            get: function () { return isPresent(this.control) ? this.control.enabled : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"statusChanges\", {\n            get: function () {\n                return isPresent(this.control) ? this.control.statusChanges : null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"valueChanges\", {\n            get: function () {\n                return isPresent(this.control) ? this.control.valueChanges : null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"path\", {\n            get: function () { return null; },\n            enumerable: true,\n            configurable: true\n        });\n        AbstractControlDirective.prototype.reset = function (value) {\n            if (value === void 0) { value = undefined; }\n            if (isPresent(this.control))\n                this.control.reset(value);\n        };\n        return AbstractControlDirective;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$1 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * A directive that contains multiple {@link NgControl}s.\n     *\n     * Only used by the forms module.\n     *\n     * @stable\n     */\n    var ControlContainer = (function (_super) {\n        __extends$1(ControlContainer, _super);\n        function ControlContainer() {\n            _super.apply(this, arguments);\n        }\n        Object.defineProperty(ControlContainer.prototype, \"formDirective\", {\n            /**\n             * Get the form to which this container belongs.\n             */\n            get: function () { return null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ControlContainer.prototype, \"path\", {\n            /**\n             * Get the path to this container.\n             */\n            get: function () { return null; },\n            enumerable: true,\n            configurable: true\n        });\n        return ControlContainer;\n    }(AbstractControlDirective));\n\n    var Map$1 = global$1.Map;\n    var Set = global$1.Set;\n    // Safari and Internet Explorer do not support the iterable parameter to the\n    // Map constructor.  We work around that by manually adding the items.\n    var createMapFromPairs = (function () {\n        try {\n            if (new Map$1([[1, 2]]).size === 1) {\n                return function createMapFromPairs(pairs) { return new Map$1(pairs); };\n            }\n        }\n        catch (e) {\n        }\n        return function createMapAndPopulateFromPairs(pairs) {\n            var map = new Map$1();\n            for (var i = 0; i < pairs.length; i++) {\n                var pair = pairs[i];\n                map.set(pair[0], pair[1]);\n            }\n            return map;\n        };\n    })();\n    var createMapFromMap = (function () {\n        try {\n            if (new Map$1(new Map$1())) {\n                return function createMapFromMap(m) { return new Map$1(m); };\n            }\n        }\n        catch (e) {\n        }\n        return function createMapAndPopulateFromMap(m) {\n            var map = new Map$1();\n            m.forEach(function (v, k) { map.set(k, v); });\n            return map;\n        };\n    })();\n    var _clearValues = (function () {\n        if ((new Map$1()).keys().next) {\n            return function _clearValues(m) {\n                var keyIterator = m.keys();\n                var k;\n                while (!((k = keyIterator.next()).done)) {\n                    m.set(k.value, null);\n                }\n            };\n        }\n        else {\n            return function _clearValuesWithForeEach(m) {\n                m.forEach(function (v, k) { m.set(k, null); });\n            };\n        }\n    })();\n    // Safari doesn't implement MapIterator.next(), which is used is Traceur's polyfill of Array.from\n    // TODO(mlaval): remove the work around once we have a working polyfill of Array.from\n    var _arrayFromMap = (function () {\n        try {\n            if ((new Map$1()).values().next) {\n                return function createArrayFromMap(m, getValues) {\n                    return getValues ? Array.from(m.values()) : Array.from(m.keys());\n                };\n            }\n        }\n        catch (e) {\n        }\n        return function createArrayFromMapWithForeach(m, getValues) {\n            var res = ListWrapper.createFixedSize(m.size), i = 0;\n            m.forEach(function (v, k) {\n                res[i] = getValues ? v : k;\n                i++;\n            });\n            return res;\n        };\n    })();\n    var MapWrapper = (function () {\n        function MapWrapper() {\n        }\n        MapWrapper.clone = function (m) { return createMapFromMap(m); };\n        MapWrapper.createFromStringMap = function (stringMap) {\n            var result = new Map$1();\n            for (var prop in stringMap) {\n                result.set(prop, stringMap[prop]);\n            }\n            return result;\n        };\n        MapWrapper.toStringMap = function (m) {\n            var r = {};\n            m.forEach(function (v, k) { return r[k] = v; });\n            return r;\n        };\n        MapWrapper.createFromPairs = function (pairs) { return createMapFromPairs(pairs); };\n        MapWrapper.clearValues = function (m) { _clearValues(m); };\n        MapWrapper.iterable = function (m) { return m; };\n        MapWrapper.keys = function (m) { return _arrayFromMap(m, false); };\n        MapWrapper.values = function (m) { return _arrayFromMap(m, true); };\n        return MapWrapper;\n    }());\n    /**\n     * Wraps Javascript Objects\n     */\n    var StringMapWrapper = (function () {\n        function StringMapWrapper() {\n        }\n        StringMapWrapper.create = function () {\n            // Note: We are not using Object.create(null) here due to\n            // performance!\n            // http://jsperf.com/ng2-object-create-null\n            return {};\n        };\n        StringMapWrapper.contains = function (map, key) {\n            return map.hasOwnProperty(key);\n        };\n        StringMapWrapper.get = function (map, key) {\n            return map.hasOwnProperty(key) ? map[key] : undefined;\n        };\n        StringMapWrapper.set = function (map, key, value) { map[key] = value; };\n        StringMapWrapper.keys = function (map) { return Object.keys(map); };\n        StringMapWrapper.values = function (map) {\n            return Object.keys(map).map(function (k) { return map[k]; });\n        };\n        StringMapWrapper.isEmpty = function (map) {\n            for (var prop in map) {\n                return false;\n            }\n            return true;\n        };\n        StringMapWrapper.delete = function (map, key) { delete map[key]; };\n        StringMapWrapper.forEach = function (map, callback) {\n            for (var _i = 0, _a = Object.keys(map); _i < _a.length; _i++) {\n                var k = _a[_i];\n                callback(map[k], k);\n            }\n        };\n        StringMapWrapper.merge = function (m1, m2) {\n            var m = {};\n            for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {\n                var k = _a[_i];\n                m[k] = m1[k];\n            }\n            for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {\n                var k = _c[_b];\n                m[k] = m2[k];\n            }\n            return m;\n        };\n        StringMapWrapper.equals = function (m1, m2) {\n            var k1 = Object.keys(m1);\n            var k2 = Object.keys(m2);\n            if (k1.length != k2.length) {\n                return false;\n            }\n            var key;\n            for (var i = 0; i < k1.length; i++) {\n                key = k1[i];\n                if (m1[key] !== m2[key]) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        return StringMapWrapper;\n    }());\n    var ListWrapper = (function () {\n        function ListWrapper() {\n        }\n        // JS has no way to express a statically fixed size list, but dart does so we\n        // keep both methods.\n        ListWrapper.createFixedSize = function (size) { return new Array(size); };\n        ListWrapper.createGrowableSize = function (size) { return new Array(size); };\n        ListWrapper.clone = function (array) { return array.slice(0); };\n        ListWrapper.forEachWithIndex = function (array, fn) {\n            for (var i = 0; i < array.length; i++) {\n                fn(array[i], i);\n            }\n        };\n        ListWrapper.first = function (array) {\n            if (!array)\n                return null;\n            return array[0];\n        };\n        ListWrapper.last = function (array) {\n            if (!array || array.length == 0)\n                return null;\n            return array[array.length - 1];\n        };\n        ListWrapper.indexOf = function (array, value, startIndex) {\n            if (startIndex === void 0) { startIndex = 0; }\n            return array.indexOf(value, startIndex);\n        };\n        ListWrapper.contains = function (list, el) { return list.indexOf(el) !== -1; };\n        ListWrapper.reversed = function (array) {\n            var a = ListWrapper.clone(array);\n            return a.reverse();\n        };\n        ListWrapper.concat = function (a, b) { return a.concat(b); };\n        ListWrapper.insert = function (list, index, value) { list.splice(index, 0, value); };\n        ListWrapper.removeAt = function (list, index) {\n            var res = list[index];\n            list.splice(index, 1);\n            return res;\n        };\n        ListWrapper.removeAll = function (list, items) {\n            for (var i = 0; i < items.length; ++i) {\n                var index = list.indexOf(items[i]);\n                list.splice(index, 1);\n            }\n        };\n        ListWrapper.remove = function (list, el) {\n            var index = list.indexOf(el);\n            if (index > -1) {\n                list.splice(index, 1);\n                return true;\n            }\n            return false;\n        };\n        ListWrapper.clear = function (list) { list.length = 0; };\n        ListWrapper.isEmpty = function (list) { return list.length == 0; };\n        ListWrapper.fill = function (list, value, start, end) {\n            if (start === void 0) { start = 0; }\n            if (end === void 0) { end = null; }\n            list.fill(value, start, end === null ? list.length : end);\n        };\n        ListWrapper.equals = function (a, b) {\n            if (a.length != b.length)\n                return false;\n            for (var i = 0; i < a.length; ++i) {\n                if (a[i] !== b[i])\n                    return false;\n            }\n            return true;\n        };\n        ListWrapper.slice = function (l, from, to) {\n            if (from === void 0) { from = 0; }\n            if (to === void 0) { to = null; }\n            return l.slice(from, to === null ? undefined : to);\n        };\n        ListWrapper.splice = function (l, from, length) { return l.splice(from, length); };\n        ListWrapper.sort = function (l, compareFn) {\n            if (isPresent(compareFn)) {\n                l.sort(compareFn);\n            }\n            else {\n                l.sort();\n            }\n        };\n        ListWrapper.toString = function (l) { return l.toString(); };\n        ListWrapper.toJSON = function (l) { return JSON.stringify(l); };\n        ListWrapper.maximum = function (list, predicate) {\n            if (list.length == 0) {\n                return null;\n            }\n            var solution = null;\n            var maxValue = -Infinity;\n            for (var index = 0; index < list.length; index++) {\n                var candidate = list[index];\n                if (isBlank(candidate)) {\n                    continue;\n                }\n                var candidateValue = predicate(candidate);\n                if (candidateValue > maxValue) {\n                    solution = candidate;\n                    maxValue = candidateValue;\n                }\n            }\n            return solution;\n        };\n        ListWrapper.flatten = function (list) {\n            var target = [];\n            _flattenArray(list, target);\n            return target;\n        };\n        ListWrapper.addAll = function (list, source) {\n            for (var i = 0; i < source.length; i++) {\n                list.push(source[i]);\n            }\n        };\n        return ListWrapper;\n    }());\n    function _flattenArray(source, target) {\n        if (isPresent(source)) {\n            for (var i = 0; i < source.length; i++) {\n                var item = source[i];\n                if (isArray(item)) {\n                    _flattenArray(item, target);\n                }\n                else {\n                    target.push(item);\n                }\n            }\n        }\n        return target;\n    }\n    // Safari and Internet Explorer do not support the iterable parameter to the\n    // Set constructor.  We work around that by manually adding the items.\n    var createSetFromList = (function () {\n        var test = new Set([1, 2, 3]);\n        if (test.size === 3) {\n            return function createSetFromList(lst) { return new Set(lst); };\n        }\n        else {\n            return function createSetAndPopulateFromList(lst) {\n                var res = new Set(lst);\n                if (res.size !== lst.length) {\n                    for (var i = 0; i < lst.length; i++) {\n                        res.add(lst[i]);\n                    }\n                }\n                return res;\n            };\n        }\n    })();\n\n    /**\n     * Providers for validators to be used for {@link FormControl}s in a form.\n     *\n     * Provide this using `multi: true` to add validators.\n     *\n     * ### Example\n     *\n     * {@example core/forms/ts/ng_validators/ng_validators.ts region='ng_validators'}\n     * @stable\n     */\n    var NG_VALIDATORS = new _angular_core.OpaqueToken('NgValidators');\n    /**\n     * Providers for asynchronous validators to be used for {@link FormControl}s\n     * in a form.\n     *\n     * Provide this using `multi: true` to add validators.\n     *\n     * See {@link NG_VALIDATORS} for more details.\n     *\n     * @stable\n     */\n    var NG_ASYNC_VALIDATORS = new _angular_core.OpaqueToken('NgAsyncValidators');\n    /**\n     * Provides a set of validators used by form controls.\n     *\n     * A validator is a function that processes a {@link FormControl} or collection of\n     * controls and returns a map of errors. A null map means that validation has passed.\n     *\n     * ### Example\n     *\n     * ```typescript\n     * var loginControl = new FormControl(\"\", Validators.required)\n     * ```\n     *\n     * @stable\n     */\n    var Validators = (function () {\n        function Validators() {\n        }\n        /**\n         * Validator that requires controls to have a non-empty value.\n         */\n        Validators.required = function (control) {\n            return isBlank(control.value) || (isString(control.value) && control.value == '') ?\n                { 'required': true } :\n                null;\n        };\n        /**\n         * Validator that requires controls to have a value of a minimum length.\n         */\n        Validators.minLength = function (minLength) {\n            return function (control) {\n                if (isPresent(Validators.required(control)))\n                    return null;\n                var v = control.value;\n                return v.length < minLength ?\n                    { 'minlength': { 'requiredLength': minLength, 'actualLength': v.length } } :\n                    null;\n            };\n        };\n        /**\n         * Validator that requires controls to have a value of a maximum length.\n         */\n        Validators.maxLength = function (maxLength) {\n            return function (control) {\n                if (isPresent(Validators.required(control)))\n                    return null;\n                var v = control.value;\n                return v.length > maxLength ?\n                    { 'maxlength': { 'requiredLength': maxLength, 'actualLength': v.length } } :\n                    null;\n            };\n        };\n        /**\n         * Validator that requires a control to match a regex to its value.\n         */\n        Validators.pattern = function (pattern) {\n            return function (control) {\n                if (isPresent(Validators.required(control)))\n                    return null;\n                var regex = new RegExp(\"^\" + pattern + \"$\");\n                var v = control.value;\n                return regex.test(v) ? null :\n                    { 'pattern': { 'requiredPattern': \"^\" + pattern + \"$\", 'actualValue': v } };\n            };\n        };\n        /**\n         * No-op validator.\n         */\n        Validators.nullValidator = function (c) { return null; };\n        /**\n         * Compose multiple validators into a single function that returns the union\n         * of the individual error maps.\n         */\n        Validators.compose = function (validators) {\n            if (isBlank(validators))\n                return null;\n            var presentValidators = validators.filter(isPresent);\n            if (presentValidators.length == 0)\n                return null;\n            return function (control) {\n                return _mergeErrors(_executeValidators(control, presentValidators));\n            };\n        };\n        Validators.composeAsync = function (validators) {\n            if (isBlank(validators))\n                return null;\n            var presentValidators = validators.filter(isPresent);\n            if (presentValidators.length == 0)\n                return null;\n            return function (control) {\n                var promises = _executeAsyncValidators(control, presentValidators).map(_convertToPromise);\n                return Promise.all(promises).then(_mergeErrors);\n            };\n        };\n        return Validators;\n    }());\n    function _convertToPromise(obj) {\n        return isPromise(obj) ? obj : rxjs_operator_toPromise.toPromise.call(obj);\n    }\n    function _executeValidators(control, validators) {\n        return validators.map(function (v) { return v(control); });\n    }\n    function _executeAsyncValidators(control, validators) {\n        return validators.map(function (v) { return v(control); });\n    }\n    function _mergeErrors(arrayOfErrors) {\n        var res = arrayOfErrors.reduce(function (res, errors) {\n            return isPresent(errors) ? StringMapWrapper.merge(res, errors) : res;\n        }, {});\n        return StringMapWrapper.isEmpty(res) ? null : res;\n    }\n\n    /**\n     * Used to provide a {@link ControlValueAccessor} for form controls.\n     *\n     * See {@link DefaultValueAccessor} for how to implement one.\n     * @stable\n     */\n    var NG_VALUE_ACCESSOR = new _angular_core.OpaqueToken('NgValueAccessor');\n\n    var CHECKBOX_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return CheckboxControlValueAccessor; }),\n        multi: true\n    };\n    /**\n     * The accessor for writing a value and listening to changes on a checkbox input element.\n     *\n     *  ### Example\n     *  ```\n     *  <input type=\"checkbox\" name=\"rememberLogin\" ngModel>\n     *  ```\n     *\n     *  @stable\n     */\n    var CheckboxControlValueAccessor = (function () {\n        function CheckboxControlValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        CheckboxControlValueAccessor.prototype.writeValue = function (value) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', value);\n        };\n        CheckboxControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n        CheckboxControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        CheckboxControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        CheckboxControlValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',\n                        host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },\n                        providers: [CHECKBOX_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        CheckboxControlValueAccessor.ctorParameters = [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ];\n        return CheckboxControlValueAccessor;\n    }());\n\n    var DEFAULT_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return DefaultValueAccessor; }),\n        multi: true\n    };\n    /**\n     * The default accessor for writing a value and listening to changes that is used by the\n     * {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName} directives.\n     *\n     *  ### Example\n     *  ```\n     *  <input type=\"text\" name=\"searchQuery\" ngModel>\n     *  ```\n     *\n     *  @stable\n     */\n    var DefaultValueAccessor = (function () {\n        function DefaultValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        DefaultValueAccessor.prototype.writeValue = function (value) {\n            var normalizedValue = isBlank(value) ? '' : value;\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n        };\n        DefaultValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n        DefaultValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        DefaultValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        DefaultValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',\n                        // TODO: vsavkin replace the above selector with the one below it once\n                        // https://github.com/angular/angular/issues/3011 is implemented\n                        // selector: '[ngControl],[ngModel],[ngFormControl]',\n                        host: { '(input)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n                        providers: [DEFAULT_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        DefaultValueAccessor.ctorParameters = [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ];\n        return DefaultValueAccessor;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function normalizeValidator(validator) {\n        if (validator.validate !== undefined) {\n            return function (c) { return validator.validate(c); };\n        }\n        else {\n            return validator;\n        }\n    }\n    function normalizeAsyncValidator(validator) {\n        if (validator.validate !== undefined) {\n            return function (c) { return validator.validate(c); };\n        }\n        else {\n            return validator;\n        }\n    }\n\n    var NUMBER_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return NumberValueAccessor; }),\n        multi: true\n    };\n    /**\n     * The accessor for writing a number value and listening to changes that is used by the\n     * {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName} directives.\n     *\n     *  ### Example\n     *  ```\n     *  <input type=\"number\" [(ngModel)]=\"age\">\n     *  ```\n     */\n    var NumberValueAccessor = (function () {\n        function NumberValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        NumberValueAccessor.prototype.writeValue = function (value) {\n            // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n            var normalizedValue = isBlank(value) ? '' : value;\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n        };\n        NumberValueAccessor.prototype.registerOnChange = function (fn) {\n            this.onChange = function (value) { fn(value == '' ? null : NumberWrapper.parseFloat(value)); };\n        };\n        NumberValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        NumberValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        NumberValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',\n                        host: {\n                            '(change)': 'onChange($event.target.value)',\n                            '(input)': 'onChange($event.target.value)',\n                            '(blur)': 'onTouched()'\n                        },\n                        providers: [NUMBER_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        NumberValueAccessor.ctorParameters = [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ];\n        return NumberValueAccessor;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$2 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    function unimplemented() {\n        throw new Error('unimplemented');\n    }\n    /**\n     * A base class that all control directive extend.\n     * It binds a {@link FormControl} object to a DOM element.\n     *\n     * Used internally by Angular forms.\n     *\n     * @stable\n     */\n    var NgControl = (function (_super) {\n        __extends$2(NgControl, _super);\n        function NgControl() {\n            _super.apply(this, arguments);\n            /** @internal */\n            this._parent = null;\n            this.name = null;\n            this.valueAccessor = null;\n            /** @internal */\n            this._rawValidators = [];\n            /** @internal */\n            this._rawAsyncValidators = [];\n        }\n        Object.defineProperty(NgControl.prototype, \"validator\", {\n            get: function () { return unimplemented(); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgControl.prototype, \"asyncValidator\", {\n            get: function () { return unimplemented(); },\n            enumerable: true,\n            configurable: true\n        });\n        return NgControl;\n    }(AbstractControlDirective));\n\n    var RADIO_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return RadioControlValueAccessor; }),\n        multi: true\n    };\n    /**\n     * Internal class used by Angular to uncheck radio buttons with the matching name.\n     */\n    var RadioControlRegistry = (function () {\n        function RadioControlRegistry() {\n            this._accessors = [];\n        }\n        RadioControlRegistry.prototype.add = function (control, accessor) {\n            this._accessors.push([control, accessor]);\n        };\n        RadioControlRegistry.prototype.remove = function (accessor) {\n            var indexToRemove = -1;\n            for (var i = 0; i < this._accessors.length; ++i) {\n                if (this._accessors[i][1] === accessor) {\n                    indexToRemove = i;\n                }\n            }\n            ListWrapper.removeAt(this._accessors, indexToRemove);\n        };\n        RadioControlRegistry.prototype.select = function (accessor) {\n            var _this = this;\n            this._accessors.forEach(function (c) {\n                if (_this._isSameGroup(c, accessor) && c[1] !== accessor) {\n                    c[1].fireUncheck(accessor.value);\n                }\n            });\n        };\n        RadioControlRegistry.prototype._isSameGroup = function (controlPair, accessor) {\n            if (!controlPair[0].control)\n                return false;\n            return controlPair[0]._parent === accessor._control._parent &&\n                controlPair[1].name === accessor.name;\n        };\n        RadioControlRegistry.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        RadioControlRegistry.ctorParameters = [];\n        return RadioControlRegistry;\n    }());\n    /**\n     * The accessor for writing a radio control value and listening to changes that is used by the\n     * {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName} directives.\n     *\n     *  ### Example\n     *  ```\n     *  @Component({\n     *    template: `\n     *      <input type=\"radio\" name=\"food\" [(ngModel)]=\"food\" value=\"chicken\">\n     *      <input type=\"radio\" name=\"food\" [(ngModel)]=\"food\" value=\"fish\">\n     *    `\n     *  })\n     *  class FoodCmp {\n     *    food = 'chicken';\n     *  }\n     *  ```\n     */\n    var RadioControlValueAccessor = (function () {\n        function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            this._registry = _registry;\n            this._injector = _injector;\n            this.onChange = function () { };\n            this.onTouched = function () { };\n        }\n        RadioControlValueAccessor.prototype.ngOnInit = function () {\n            this._control = this._injector.get(NgControl);\n            this._checkName();\n            this._registry.add(this._control, this);\n        };\n        RadioControlValueAccessor.prototype.ngOnDestroy = function () { this._registry.remove(this); };\n        RadioControlValueAccessor.prototype.writeValue = function (value) {\n            this._state = value === this.value;\n            if (isPresent(value)) {\n                this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', this._state);\n            }\n        };\n        RadioControlValueAccessor.prototype.registerOnChange = function (fn) {\n            var _this = this;\n            this._fn = fn;\n            this.onChange = function () {\n                fn(_this.value);\n                _this._registry.select(_this);\n            };\n        };\n        RadioControlValueAccessor.prototype.fireUncheck = function (value) { this.writeValue(value); };\n        RadioControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        RadioControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        RadioControlValueAccessor.prototype._checkName = function () {\n            if (this.name && this.formControlName && this.name !== this.formControlName) {\n                this._throwNameError();\n            }\n            if (!this.name && this.formControlName)\n                this.name = this.formControlName;\n        };\n        RadioControlValueAccessor.prototype._throwNameError = function () {\n            throw new Error(\"\\n      If you define both a name and a formControlName attribute on your radio button, their values\\n      must match. Ex: <input type=\\\"radio\\\" formControlName=\\\"food\\\" name=\\\"food\\\">\\n    \");\n        };\n        RadioControlValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',\n                        host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },\n                        providers: [RADIO_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        RadioControlValueAccessor.ctorParameters = [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n            { type: RadioControlRegistry, },\n            { type: _angular_core.Injector, },\n        ];\n        RadioControlValueAccessor.propDecorators = {\n            'name': [{ type: _angular_core.Input },],\n            'formControlName': [{ type: _angular_core.Input },],\n            'value': [{ type: _angular_core.Input },],\n        };\n        return RadioControlValueAccessor;\n    }());\n\n    var SELECT_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return SelectControlValueAccessor; }),\n        multi: true\n    };\n    function _buildValueString(id, value) {\n        if (isBlank(id))\n            return \"\" + value;\n        if (!isPrimitive(value))\n            value = 'Object';\n        return StringWrapper.slice(id + \": \" + value, 0, 50);\n    }\n    function _extractId(valueString) {\n        return valueString.split(':')[0];\n    }\n    /**\n     * The accessor for writing a value and listening to changes on a select element.\n     *\n     * Note: We have to listen to the 'change' event because 'input' events aren't fired\n     * for selects in Firefox and IE:\n     * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350\n     * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/\n     *\n     * @stable\n     */\n    var SelectControlValueAccessor = (function () {\n        function SelectControlValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            /** @internal */\n            this._optionMap = new Map();\n            /** @internal */\n            this._idCounter = 0;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        SelectControlValueAccessor.prototype.writeValue = function (value) {\n            this.value = value;\n            var valueString = _buildValueString(this._getOptionId(value), value);\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', valueString);\n        };\n        SelectControlValueAccessor.prototype.registerOnChange = function (fn) {\n            var _this = this;\n            this.onChange = function (valueString) {\n                _this.value = valueString;\n                fn(_this._getOptionValue(valueString));\n            };\n        };\n        SelectControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        SelectControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        /** @internal */\n        SelectControlValueAccessor.prototype._registerOption = function () { return (this._idCounter++).toString(); };\n        /** @internal */\n        SelectControlValueAccessor.prototype._getOptionId = function (value) {\n            for (var _i = 0, _a = MapWrapper.keys(this._optionMap); _i < _a.length; _i++) {\n                var id = _a[_i];\n                if (looseIdentical(this._optionMap.get(id), value))\n                    return id;\n            }\n            return null;\n        };\n        /** @internal */\n        SelectControlValueAccessor.prototype._getOptionValue = function (valueString) {\n            var value = this._optionMap.get(_extractId(valueString));\n            return isPresent(value) ? value : valueString;\n        };\n        SelectControlValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',\n                        host: { '(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n                        providers: [SELECT_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        SelectControlValueAccessor.ctorParameters = [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ];\n        return SelectControlValueAccessor;\n    }());\n    /**\n     * Marks `<option>` as dynamic, so Angular can be notified when options change.\n     *\n     * ### Example\n     *\n     * ```\n     * <select name=\"city\" ngModel>\n     *   <option *ngFor=\"let c of cities\" [value]=\"c\"></option>\n     * </select>\n     * ```\n     *\n     * @stable\n     */\n    var NgSelectOption = (function () {\n        function NgSelectOption(_element, _renderer, _select) {\n            this._element = _element;\n            this._renderer = _renderer;\n            this._select = _select;\n            if (isPresent(this._select))\n                this.id = this._select._registerOption();\n        }\n        Object.defineProperty(NgSelectOption.prototype, \"ngValue\", {\n            set: function (value) {\n                if (this._select == null)\n                    return;\n                this._select._optionMap.set(this.id, value);\n                this._setElementValue(_buildValueString(this.id, value));\n                this._select.writeValue(this._select.value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgSelectOption.prototype, \"value\", {\n            set: function (value) {\n                this._setElementValue(value);\n                if (isPresent(this._select))\n                    this._select.writeValue(this._select.value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** @internal */\n        NgSelectOption.prototype._setElementValue = function (value) {\n            this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n        };\n        NgSelectOption.prototype.ngOnDestroy = function () {\n            if (isPresent(this._select)) {\n                this._select._optionMap.delete(this.id);\n                this._select.writeValue(this._select.value);\n            }\n        };\n        NgSelectOption.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: 'option' },] },\n        ];\n        /** @nocollapse */\n        NgSelectOption.ctorParameters = [\n            { type: _angular_core.ElementRef, },\n            { type: _angular_core.Renderer, },\n            { type: SelectControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n        ];\n        NgSelectOption.propDecorators = {\n            'ngValue': [{ type: _angular_core.Input, args: ['ngValue',] },],\n            'value': [{ type: _angular_core.Input, args: ['value',] },],\n        };\n        return NgSelectOption;\n    }());\n\n    var SELECT_MULTIPLE_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return SelectMultipleControlValueAccessor; }),\n        multi: true\n    };\n    function _buildValueString$1(id, value) {\n        if (isBlank(id))\n            return \"\" + value;\n        if (isString(value))\n            value = \"'\" + value + \"'\";\n        if (!isPrimitive(value))\n            value = 'Object';\n        return StringWrapper.slice(id + \": \" + value, 0, 50);\n    }\n    function _extractId$1(valueString) {\n        return valueString.split(':')[0];\n    }\n    /**\n     * The accessor for writing a value and listening to changes on a select element.\n     *\n     * @stable\n     */\n    var SelectMultipleControlValueAccessor = (function () {\n        function SelectMultipleControlValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            /** @internal */\n            this._optionMap = new Map();\n            /** @internal */\n            this._idCounter = 0;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        SelectMultipleControlValueAccessor.prototype.writeValue = function (value) {\n            var _this = this;\n            this.value = value;\n            if (value == null)\n                return;\n            var values = value;\n            // convert values to ids\n            var ids = values.map(function (v) { return _this._getOptionId(v); });\n            this._optionMap.forEach(function (opt, o) { opt._setSelected(ids.indexOf(o.toString()) > -1); });\n        };\n        SelectMultipleControlValueAccessor.prototype.registerOnChange = function (fn) {\n            var _this = this;\n            this.onChange = function (_) {\n                var selected = [];\n                if (_.hasOwnProperty('selectedOptions')) {\n                    var options = _.selectedOptions;\n                    for (var i = 0; i < options.length; i++) {\n                        var opt = options.item(i);\n                        var val = _this._getOptionValue(opt.value);\n                        selected.push(val);\n                    }\n                }\n                else {\n                    var options = _.options;\n                    for (var i = 0; i < options.length; i++) {\n                        var opt = options.item(i);\n                        if (opt.selected) {\n                            var val = _this._getOptionValue(opt.value);\n                            selected.push(val);\n                        }\n                    }\n                }\n                fn(selected);\n            };\n        };\n        SelectMultipleControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        SelectMultipleControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        /** @internal */\n        SelectMultipleControlValueAccessor.prototype._registerOption = function (value) {\n            var id = (this._idCounter++).toString();\n            this._optionMap.set(id, value);\n            return id;\n        };\n        /** @internal */\n        SelectMultipleControlValueAccessor.prototype._getOptionId = function (value) {\n            for (var _i = 0, _a = MapWrapper.keys(this._optionMap); _i < _a.length; _i++) {\n                var id = _a[_i];\n                if (looseIdentical(this._optionMap.get(id)._value, value))\n                    return id;\n            }\n            return null;\n        };\n        /** @internal */\n        SelectMultipleControlValueAccessor.prototype._getOptionValue = function (valueString) {\n            var opt = this._optionMap.get(_extractId$1(valueString));\n            return isPresent(opt) ? opt._value : valueString;\n        };\n        SelectMultipleControlValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',\n                        host: { '(change)': 'onChange($event.target)', '(blur)': 'onTouched()' },\n                        providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        SelectMultipleControlValueAccessor.ctorParameters = [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ];\n        return SelectMultipleControlValueAccessor;\n    }());\n    /**\n     * Marks `<option>` as dynamic, so Angular can be notified when options change.\n     *\n     * ### Example\n     *\n     * ```\n     * <select multiple name=\"city\" ngModel>\n     *   <option *ngFor=\"let c of cities\" [value]=\"c\"></option>\n     * </select>\n     * ```\n     */\n    var NgSelectMultipleOption = (function () {\n        function NgSelectMultipleOption(_element, _renderer, _select) {\n            this._element = _element;\n            this._renderer = _renderer;\n            this._select = _select;\n            if (isPresent(this._select)) {\n                this.id = this._select._registerOption(this);\n            }\n        }\n        Object.defineProperty(NgSelectMultipleOption.prototype, \"ngValue\", {\n            set: function (value) {\n                if (this._select == null)\n                    return;\n                this._value = value;\n                this._setElementValue(_buildValueString$1(this.id, value));\n                this._select.writeValue(this._select.value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgSelectMultipleOption.prototype, \"value\", {\n            set: function (value) {\n                if (isPresent(this._select)) {\n                    this._value = value;\n                    this._setElementValue(_buildValueString$1(this.id, value));\n                    this._select.writeValue(this._select.value);\n                }\n                else {\n                    this._setElementValue(value);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** @internal */\n        NgSelectMultipleOption.prototype._setElementValue = function (value) {\n            this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n        };\n        /** @internal */\n        NgSelectMultipleOption.prototype._setSelected = function (selected) {\n            this._renderer.setElementProperty(this._element.nativeElement, 'selected', selected);\n        };\n        NgSelectMultipleOption.prototype.ngOnDestroy = function () {\n            if (isPresent(this._select)) {\n                this._select._optionMap.delete(this.id);\n                this._select.writeValue(this._select.value);\n            }\n        };\n        NgSelectMultipleOption.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: 'option' },] },\n        ];\n        /** @nocollapse */\n        NgSelectMultipleOption.ctorParameters = [\n            { type: _angular_core.ElementRef, },\n            { type: _angular_core.Renderer, },\n            { type: SelectMultipleControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n        ];\n        NgSelectMultipleOption.propDecorators = {\n            'ngValue': [{ type: _angular_core.Input, args: ['ngValue',] },],\n            'value': [{ type: _angular_core.Input, args: ['value',] },],\n        };\n        return NgSelectMultipleOption;\n    }());\n\n    function controlPath(name, parent) {\n        var p = ListWrapper.clone(parent.path);\n        p.push(name);\n        return p;\n    }\n    function setUpControl(control, dir) {\n        if (isBlank(control))\n            _throwError(dir, 'Cannot find control with');\n        if (isBlank(dir.valueAccessor))\n            _throwError(dir, 'No value accessor for form control with');\n        control.validator = Validators.compose([control.validator, dir.validator]);\n        control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n        dir.valueAccessor.writeValue(control.value);\n        // view -> model\n        dir.valueAccessor.registerOnChange(function (newValue) {\n            dir.viewToModelUpdate(newValue);\n            control.markAsDirty();\n            control.setValue(newValue, { emitModelToViewChange: false });\n        });\n        // touched\n        dir.valueAccessor.registerOnTouched(function () { return control.markAsTouched(); });\n        control.registerOnChange(function (newValue, emitModelEvent) {\n            // control -> view\n            dir.valueAccessor.writeValue(newValue);\n            // control -> ngModel\n            if (emitModelEvent)\n                dir.viewToModelUpdate(newValue);\n        });\n        if (dir.valueAccessor.setDisabledState) {\n            control.registerOnDisabledChange(function (isDisabled) { dir.valueAccessor.setDisabledState(isDisabled); });\n        }\n        // re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4\n        dir._rawValidators.forEach(function (validator) {\n            if (validator.registerOnChange)\n                validator.registerOnChange(function () { return control.updateValueAndValidity(); });\n        });\n        dir._rawAsyncValidators.forEach(function (validator) {\n            if (validator.registerOnChange)\n                validator.registerOnChange(function () { return control.updateValueAndValidity(); });\n        });\n    }\n    function cleanUpControl(control, dir) {\n        dir.valueAccessor.registerOnChange(function () { return _noControlError(dir); });\n        dir.valueAccessor.registerOnTouched(function () { return _noControlError(dir); });\n        dir._rawValidators.forEach(function (validator) { return validator.registerOnChange(null); });\n        dir._rawAsyncValidators.forEach(function (validator) { return validator.registerOnChange(null); });\n        if (control)\n            control._clearChangeFns();\n    }\n    function setUpFormContainer(control, dir) {\n        if (isBlank(control))\n            _throwError(dir, 'Cannot find control with');\n        control.validator = Validators.compose([control.validator, dir.validator]);\n        control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n    }\n    function _noControlError(dir) {\n        return _throwError(dir, 'There is no FormControl instance attached to form control element with');\n    }\n    function _throwError(dir, message) {\n        var messageEnd;\n        if (dir.path.length > 1) {\n            messageEnd = \"path: '\" + dir.path.join(' -> ') + \"'\";\n        }\n        else if (dir.path[0]) {\n            messageEnd = \"name: '\" + dir.path + \"'\";\n        }\n        else {\n            messageEnd = 'unspecified name attribute';\n        }\n        throw new Error(message + \" \" + messageEnd);\n    }\n    function composeValidators(validators) {\n        return isPresent(validators) ? Validators.compose(validators.map(normalizeValidator)) : null;\n    }\n    function composeAsyncValidators(validators) {\n        return isPresent(validators) ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) :\n            null;\n    }\n    function isPropertyUpdated(changes, viewModel) {\n        if (!StringMapWrapper.contains(changes, 'model'))\n            return false;\n        var change = changes['model'];\n        if (change.isFirstChange())\n            return true;\n        return !looseIdentical(viewModel, change.currentValue);\n    }\n    function isBuiltInAccessor(valueAccessor) {\n        return (hasConstructor(valueAccessor, CheckboxControlValueAccessor) ||\n            hasConstructor(valueAccessor, NumberValueAccessor) ||\n            hasConstructor(valueAccessor, SelectControlValueAccessor) ||\n            hasConstructor(valueAccessor, SelectMultipleControlValueAccessor) ||\n            hasConstructor(valueAccessor, RadioControlValueAccessor));\n    }\n    // TODO: vsavkin remove it once https://github.com/angular/angular/issues/3011 is implemented\n    function selectValueAccessor(dir, valueAccessors) {\n        if (isBlank(valueAccessors))\n            return null;\n        var defaultAccessor;\n        var builtinAccessor;\n        var customAccessor;\n        valueAccessors.forEach(function (v) {\n            if (hasConstructor(v, DefaultValueAccessor)) {\n                defaultAccessor = v;\n            }\n            else if (isBuiltInAccessor(v)) {\n                if (isPresent(builtinAccessor))\n                    _throwError(dir, 'More than one built-in value accessor matches form control with');\n                builtinAccessor = v;\n            }\n            else {\n                if (isPresent(customAccessor))\n                    _throwError(dir, 'More than one custom value accessor matches form control with');\n                customAccessor = v;\n            }\n        });\n        if (isPresent(customAccessor))\n            return customAccessor;\n        if (isPresent(builtinAccessor))\n            return builtinAccessor;\n        if (isPresent(defaultAccessor))\n            return defaultAccessor;\n        _throwError(dir, 'No valid value accessor for form control with');\n        return null;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * This is a base class for code shared between {@link NgModelGroup} and {@link FormGroupName}.\n     *\n     * @stable\n     */\n    var AbstractFormGroupDirective = (function (_super) {\n        __extends(AbstractFormGroupDirective, _super);\n        function AbstractFormGroupDirective() {\n            _super.apply(this, arguments);\n        }\n        AbstractFormGroupDirective.prototype.ngOnInit = function () {\n            this._checkParentType();\n            this.formDirective.addFormGroup(this);\n        };\n        AbstractFormGroupDirective.prototype.ngOnDestroy = function () {\n            if (this.formDirective) {\n                this.formDirective.removeFormGroup(this);\n            }\n        };\n        Object.defineProperty(AbstractFormGroupDirective.prototype, \"control\", {\n            /**\n             * Get the {@link FormGroup} backing this binding.\n             */\n            get: function () { return this.formDirective.getFormGroup(this); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractFormGroupDirective.prototype, \"path\", {\n            /**\n             * Get the path to this control group.\n             */\n            get: function () { return controlPath(this.name, this._parent); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractFormGroupDirective.prototype, \"formDirective\", {\n            /**\n             * Get the {@link Form} to which this group belongs.\n             */\n            get: function () { return this._parent ? this._parent.formDirective : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractFormGroupDirective.prototype, \"validator\", {\n            get: function () { return composeValidators(this._validators); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractFormGroupDirective.prototype, \"asyncValidator\", {\n            get: function () { return composeAsyncValidators(this._asyncValidators); },\n            enumerable: true,\n            configurable: true\n        });\n        /** @internal */\n        AbstractFormGroupDirective.prototype._checkParentType = function () { };\n        return AbstractFormGroupDirective;\n    }(ControlContainer));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$3 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var AbstractControlStatus = (function () {\n        function AbstractControlStatus(cd) {\n            this._cd = cd;\n        }\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassUntouched\", {\n            get: function () {\n                return isPresent(this._cd.control) ? this._cd.control.untouched : false;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassTouched\", {\n            get: function () {\n                return isPresent(this._cd.control) ? this._cd.control.touched : false;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassPristine\", {\n            get: function () {\n                return isPresent(this._cd.control) ? this._cd.control.pristine : false;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassDirty\", {\n            get: function () {\n                return isPresent(this._cd.control) ? this._cd.control.dirty : false;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassValid\", {\n            get: function () {\n                return isPresent(this._cd.control) ? this._cd.control.valid : false;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassInvalid\", {\n            get: function () {\n                return isPresent(this._cd.control) ? this._cd.control.invalid : false;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return AbstractControlStatus;\n    }());\n    var ngControlStatusHost = {\n        '[class.ng-untouched]': 'ngClassUntouched',\n        '[class.ng-touched]': 'ngClassTouched',\n        '[class.ng-pristine]': 'ngClassPristine',\n        '[class.ng-dirty]': 'ngClassDirty',\n        '[class.ng-valid]': 'ngClassValid',\n        '[class.ng-invalid]': 'ngClassInvalid'\n    };\n    /**\n     * Directive automatically applied to Angular form controls that sets CSS classes\n     * based on control status (valid/invalid/dirty/etc).\n     *\n     * @stable\n     */\n    var NgControlStatus = (function (_super) {\n        __extends$3(NgControlStatus, _super);\n        function NgControlStatus(cd) {\n            _super.call(this, cd);\n        }\n        NgControlStatus.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost },] },\n        ];\n        /** @nocollapse */\n        NgControlStatus.ctorParameters = [\n            { type: NgControl, decorators: [{ type: _angular_core.Self },] },\n        ];\n        return NgControlStatus;\n    }(AbstractControlStatus));\n    /**\n     * Directive automatically applied to Angular form groups that sets CSS classes\n     * based on control status (valid/invalid/dirty/etc).\n     *\n     * @stable\n     */\n    var NgControlStatusGroup = (function (_super) {\n        __extends$3(NgControlStatusGroup, _super);\n        function NgControlStatusGroup(cd) {\n            _super.call(this, cd);\n        }\n        NgControlStatusGroup.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',\n                        host: ngControlStatusHost\n                    },] },\n        ];\n        /** @nocollapse */\n        NgControlStatusGroup.ctorParameters = [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Self },] },\n        ];\n        return NgControlStatusGroup;\n    }(AbstractControlStatus));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$5 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Use by directives and components to emit custom Events.\n     *\n     * ### Examples\n     *\n     * In the following example, `Zippy` alternatively emits `open` and `close` events when its\n     * title gets clicked:\n     *\n     * ```\n     * @Component({\n     *   selector: 'zippy',\n     *   template: `\n     *   <div class=\"zippy\">\n     *     <div (click)=\"toggle()\">Toggle</div>\n     *     <div [hidden]=\"!visible\">\n     *       <ng-content></ng-content>\n     *     </div>\n     *  </div>`})\n     * export class Zippy {\n     *   visible: boolean = true;\n     *   @Output() open: EventEmitter<any> = new EventEmitter();\n     *   @Output() close: EventEmitter<any> = new EventEmitter();\n     *\n     *   toggle() {\n     *     this.visible = !this.visible;\n     *     if (this.visible) {\n     *       this.open.emit(null);\n     *     } else {\n     *       this.close.emit(null);\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * The events payload can be accessed by the parameter `$event` on the components output event\n     * handler:\n     *\n     * ```\n     * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n     * ```\n     *\n     * Uses Rx.Observable but provides an adapter to make it work as specified here:\n     * https://github.com/jhusain/observable-spec\n     *\n     * Once a reference implementation of the spec is available, switch to it.\n     * @stable\n     */\n    var EventEmitter = (function (_super) {\n        __extends$5(EventEmitter, _super);\n        /**\n         * Creates an instance of [EventEmitter], which depending on [isAsync],\n         * delivers events synchronously or asynchronously.\n         */\n        function EventEmitter(isAsync) {\n            if (isAsync === void 0) { isAsync = false; }\n            _super.call(this);\n            this.__isAsync = isAsync;\n        }\n        EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };\n        EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {\n            var schedulerFn;\n            var errorFn = function (err) { return null; };\n            var completeFn = function () { return null; };\n            if (generatorOrNext && typeof generatorOrNext === 'object') {\n                schedulerFn = this.__isAsync ? function (value /** TODO #9100 */) {\n                    setTimeout(function () { return generatorOrNext.next(value); });\n                } : function (value /** TODO #9100 */) { generatorOrNext.next(value); };\n                if (generatorOrNext.error) {\n                    errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :\n                        function (err) { generatorOrNext.error(err); };\n                }\n                if (generatorOrNext.complete) {\n                    completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :\n                        function () { generatorOrNext.complete(); };\n                }\n            }\n            else {\n                schedulerFn = this.__isAsync ? function (value /** TODO #9100 */) {\n                    setTimeout(function () { return generatorOrNext(value); });\n                } : function (value /** TODO #9100 */) { generatorOrNext(value); };\n                if (error) {\n                    errorFn =\n                        this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };\n                }\n                if (complete) {\n                    completeFn =\n                        this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };\n                }\n            }\n            return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);\n        };\n        return EventEmitter;\n    }(rxjs_Subject.Subject));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$6 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Indicates that a FormControl is valid, i.e. that no errors exist in the input value.\n     */\n    var VALID = 'VALID';\n    /**\n     * Indicates that a FormControl is invalid, i.e. that an error exists in the input value.\n     */\n    var INVALID = 'INVALID';\n    /**\n     * Indicates that a FormControl is pending, i.e. that async validation is occurring and\n     * errors are not yet available for the input value.\n     */\n    var PENDING = 'PENDING';\n    /**\n     * Indicates that a FormControl is disabled, i.e. that the control is exempt from ancestor\n     * calculations of validity or value.\n     */\n    var DISABLED = 'DISABLED';\n    function _find(control, path, delimiter) {\n        if (isBlank(path))\n            return null;\n        if (!(path instanceof Array)) {\n            path = path.split(delimiter);\n        }\n        if (path instanceof Array && ListWrapper.isEmpty(path))\n            return null;\n        return path.reduce(function (v, name) {\n            if (v instanceof FormGroup) {\n                return isPresent(v.controls[name]) ? v.controls[name] : null;\n            }\n            else if (v instanceof FormArray) {\n                var index = name;\n                return isPresent(v.at(index)) ? v.at(index) : null;\n            }\n            else {\n                return null;\n            }\n        }, control);\n    }\n    function toObservable(r) {\n        return isPromise(r) ? rxjs_observable_fromPromise.fromPromise(r) : r;\n    }\n    function coerceToValidator(validator) {\n        return Array.isArray(validator) ? composeValidators(validator) : validator;\n    }\n    function coerceToAsyncValidator(asyncValidator) {\n        return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) : asyncValidator;\n    }\n    /**\n     * @stable\n     */\n    var AbstractControl = (function () {\n        function AbstractControl(validator, asyncValidator) {\n            this.validator = validator;\n            this.asyncValidator = asyncValidator;\n            this._pristine = true;\n            this._touched = false;\n        }\n        Object.defineProperty(AbstractControl.prototype, \"value\", {\n            get: function () { return this._value; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"status\", {\n            get: function () { return this._status; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"valid\", {\n            get: function () { return this._status === VALID; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"invalid\", {\n            get: function () { return this._status === INVALID; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"errors\", {\n            /**\n             * Returns the errors of this control.\n             */\n            get: function () { return this._errors; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"pristine\", {\n            get: function () { return this._pristine; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"dirty\", {\n            get: function () { return !this.pristine; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"touched\", {\n            get: function () { return this._touched; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"untouched\", {\n            get: function () { return !this._touched; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"valueChanges\", {\n            get: function () { return this._valueChanges; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"statusChanges\", {\n            get: function () { return this._statusChanges; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"pending\", {\n            get: function () { return this._status == PENDING; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"disabled\", {\n            get: function () { return this._status === DISABLED; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"enabled\", {\n            get: function () { return this._status !== DISABLED; },\n            enumerable: true,\n            configurable: true\n        });\n        AbstractControl.prototype.setAsyncValidators = function (newValidator) {\n            this.asyncValidator = coerceToAsyncValidator(newValidator);\n        };\n        AbstractControl.prototype.clearAsyncValidators = function () { this.asyncValidator = null; };\n        AbstractControl.prototype.setValidators = function (newValidator) {\n            this.validator = coerceToValidator(newValidator);\n        };\n        AbstractControl.prototype.clearValidators = function () { this.validator = null; };\n        AbstractControl.prototype.markAsTouched = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            onlySelf = normalizeBool(onlySelf);\n            this._touched = true;\n            if (isPresent(this._parent) && !onlySelf) {\n                this._parent.markAsTouched({ onlySelf: onlySelf });\n            }\n        };\n        AbstractControl.prototype.markAsDirty = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            onlySelf = normalizeBool(onlySelf);\n            this._pristine = false;\n            if (isPresent(this._parent) && !onlySelf) {\n                this._parent.markAsDirty({ onlySelf: onlySelf });\n            }\n        };\n        AbstractControl.prototype.markAsPristine = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._pristine = true;\n            this._forEachChild(function (control) { control.markAsPristine({ onlySelf: true }); });\n            if (isPresent(this._parent) && !onlySelf) {\n                this._parent._updatePristine({ onlySelf: onlySelf });\n            }\n        };\n        AbstractControl.prototype.markAsUntouched = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._touched = false;\n            this._forEachChild(function (control) { control.markAsUntouched({ onlySelf: true }); });\n            if (isPresent(this._parent) && !onlySelf) {\n                this._parent._updateTouched({ onlySelf: onlySelf });\n            }\n        };\n        AbstractControl.prototype.markAsPending = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            onlySelf = normalizeBool(onlySelf);\n            this._status = PENDING;\n            if (isPresent(this._parent) && !onlySelf) {\n                this._parent.markAsPending({ onlySelf: onlySelf });\n            }\n        };\n        AbstractControl.prototype.disable = function (_a) {\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            emitEvent = isPresent(emitEvent) ? emitEvent : true;\n            this._status = DISABLED;\n            this._forEachChild(function (control) { control.disable({ onlySelf: true }); });\n            this._updateValue();\n            if (emitEvent) {\n                this._valueChanges.emit(this._value);\n                this._statusChanges.emit(this._status);\n            }\n            this._updateAncestors(onlySelf);\n            this._onDisabledChange(true);\n        };\n        AbstractControl.prototype.enable = function (_a) {\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            this._status = VALID;\n            this._forEachChild(function (control) { control.enable({ onlySelf: true }); });\n            this.updateValueAndValidity({ onlySelf: true, emitEvent: emitEvent });\n            this._updateAncestors(onlySelf);\n            this._onDisabledChange(false);\n        };\n        AbstractControl.prototype._updateAncestors = function (onlySelf) {\n            if (isPresent(this._parent) && !onlySelf) {\n                this._parent.updateValueAndValidity();\n                this._parent._updatePristine();\n                this._parent._updateTouched();\n            }\n        };\n        AbstractControl.prototype.setParent = function (parent) { this._parent = parent; };\n        AbstractControl.prototype.updateValueAndValidity = function (_a) {\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            onlySelf = normalizeBool(onlySelf);\n            emitEvent = isPresent(emitEvent) ? emitEvent : true;\n            this._updateValue();\n            this._errors = this._runValidator();\n            var originalStatus = this._status;\n            this._status = this._calculateStatus();\n            if (this._status == VALID || this._status == PENDING) {\n                this._runAsyncValidator(emitEvent);\n            }\n            if (this._disabledChanged(originalStatus)) {\n                this._updateValue();\n            }\n            if (emitEvent) {\n                this._valueChanges.emit(this._value);\n                this._statusChanges.emit(this._status);\n            }\n            if (isPresent(this._parent) && !onlySelf) {\n                this._parent.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n            }\n        };\n        /** @internal */\n        AbstractControl.prototype._updateTreeValidity = function (_a) {\n            var emitEvent = (_a === void 0 ? { emitEvent: true } : _a).emitEvent;\n            this._forEachChild(function (ctrl) { return ctrl._updateTreeValidity({ emitEvent: emitEvent }); });\n            this.updateValueAndValidity({ onlySelf: true, emitEvent: emitEvent });\n        };\n        AbstractControl.prototype._runValidator = function () {\n            return isPresent(this.validator) ? this.validator(this) : null;\n        };\n        AbstractControl.prototype._runAsyncValidator = function (emitEvent) {\n            var _this = this;\n            if (isPresent(this.asyncValidator)) {\n                this._status = PENDING;\n                this._cancelExistingSubscription();\n                var obs = toObservable(this.asyncValidator(this));\n                this._asyncValidationSubscription = obs.subscribe({ next: function (res) { return _this.setErrors(res, { emitEvent: emitEvent }); } });\n            }\n        };\n        AbstractControl.prototype._cancelExistingSubscription = function () {\n            if (isPresent(this._asyncValidationSubscription)) {\n                this._asyncValidationSubscription.unsubscribe();\n            }\n        };\n        AbstractControl.prototype._disabledChanged = function (originalStatus) {\n            return this._status !== originalStatus &&\n                (this._status === DISABLED || originalStatus === DISABLED);\n        };\n        /**\n         * Sets errors on a form control.\n         *\n         * This is used when validations are run not automatically, but manually by the user.\n         *\n         * Calling `setErrors` will also update the validity of the parent control.\n         *\n         * ## Usage\n         *\n         * ```\n         * var login = new FormControl(\"someLogin\");\n         * login.setErrors({\n         *   \"notUnique\": true\n         * });\n         *\n         * expect(login.valid).toEqual(false);\n         * expect(login.errors).toEqual({\"notUnique\": true});\n         *\n         * login.updateValue(\"someOtherLogin\");\n         *\n         * expect(login.valid).toEqual(true);\n         * ```\n         */\n        AbstractControl.prototype.setErrors = function (errors, _a) {\n            var emitEvent = (_a === void 0 ? {} : _a).emitEvent;\n            emitEvent = isPresent(emitEvent) ? emitEvent : true;\n            this._errors = errors;\n            this._updateControlsErrors(emitEvent);\n        };\n        AbstractControl.prototype.get = function (path) { return _find(this, path, '.'); };\n        AbstractControl.prototype.getError = function (errorCode, path) {\n            if (path === void 0) { path = null; }\n            var control = isPresent(path) && !ListWrapper.isEmpty(path) ? this.get(path) : this;\n            if (isPresent(control) && isPresent(control._errors)) {\n                return StringMapWrapper.get(control._errors, errorCode);\n            }\n            else {\n                return null;\n            }\n        };\n        AbstractControl.prototype.hasError = function (errorCode, path) {\n            if (path === void 0) { path = null; }\n            return isPresent(this.getError(errorCode, path));\n        };\n        Object.defineProperty(AbstractControl.prototype, \"root\", {\n            get: function () {\n                var x = this;\n                while (isPresent(x._parent)) {\n                    x = x._parent;\n                }\n                return x;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** @internal */\n        AbstractControl.prototype._updateControlsErrors = function (emitEvent) {\n            this._status = this._calculateStatus();\n            if (emitEvent) {\n                this._statusChanges.emit(this._status);\n            }\n            if (isPresent(this._parent)) {\n                this._parent._updateControlsErrors(emitEvent);\n            }\n        };\n        /** @internal */\n        AbstractControl.prototype._initObservables = function () {\n            this._valueChanges = new EventEmitter();\n            this._statusChanges = new EventEmitter();\n        };\n        AbstractControl.prototype._calculateStatus = function () {\n            if (isPresent(this._errors))\n                return INVALID;\n            if (this._anyControlsHaveStatus(PENDING))\n                return PENDING;\n            if (this._anyControlsHaveStatus(INVALID))\n                return INVALID;\n            if (this._allControlsDisabled())\n                return DISABLED;\n            return VALID;\n        };\n        /** @internal */\n        AbstractControl.prototype._anyControlsHaveStatus = function (status) {\n            return this._anyControls(function (control) { return control.status == status; });\n        };\n        /** @internal */\n        AbstractControl.prototype._anyControlsDirty = function () {\n            return this._anyControls(function (control) { return control.dirty; });\n        };\n        /** @internal */\n        AbstractControl.prototype._anyControlsTouched = function () {\n            return this._anyControls(function (control) { return control.touched; });\n        };\n        /** @internal */\n        AbstractControl.prototype._updatePristine = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._pristine = !this._anyControlsDirty();\n            if (isPresent(this._parent) && !onlySelf) {\n                this._parent._updatePristine({ onlySelf: onlySelf });\n            }\n        };\n        /** @internal */\n        AbstractControl.prototype._updateTouched = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._touched = this._anyControlsTouched();\n            if (isPresent(this._parent) && !onlySelf) {\n                this._parent._updateTouched({ onlySelf: onlySelf });\n            }\n        };\n        /** @internal */\n        AbstractControl.prototype._onDisabledChange = function (isDisabled) { };\n        /** @internal */\n        AbstractControl.prototype._isBoxedValue = function (formState) {\n            return isStringMap(formState) && Object.keys(formState).length === 2 && 'value' in formState &&\n                'disabled' in formState;\n        };\n        return AbstractControl;\n    }());\n    /**\n     * Defines a part of a form that cannot be divided into other controls. `FormControl`s have values\n     * and\n     * validation state, which is determined by an optional validation function.\n     *\n     * `FormControl` is one of the three fundamental building blocks used to define forms in Angular,\n     * along\n     * with {@link FormGroup} and {@link FormArray}.\n     *\n     * ## Usage\n     *\n     * By default, a `FormControl` is created for every `<input>` or other form component.\n     * With {@link FormControlDirective} or {@link FormGroupDirective} an existing {@link FormControl}\n     * can be bound to a DOM element instead. This `FormControl` can be configured with a custom\n     * validation function.\n     *\n     * @stable\n     */\n    var FormControl = (function (_super) {\n        __extends$6(FormControl, _super);\n        function FormControl(formState, validator, asyncValidator) {\n            if (formState === void 0) { formState = null; }\n            if (validator === void 0) { validator = null; }\n            if (asyncValidator === void 0) { asyncValidator = null; }\n            _super.call(this, coerceToValidator(validator), coerceToAsyncValidator(asyncValidator));\n            /** @internal */\n            this._onChange = [];\n            this._applyFormState(formState);\n            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n            this._initObservables();\n        }\n        /**\n         * Set the value of the form control to `value`.\n         *\n         * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`\n         * and not its parent component. If `emitEvent` is `true`, this change will cause a\n         * `valueChanges` event on the `FormControl` to be emitted. Both of these options default to\n         * `false`.\n         *\n         * If `emitModelToViewChange` is `true`, the view will be notified about the new value\n         * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not\n         * specified.\n         *\n         * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the\n         * model.  This is the default behavior if `emitViewToModelChange` is not specified.\n         */\n        FormControl.prototype.setValue = function (value, _a) {\n            var _this = this;\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent, emitModelToViewChange = _b.emitModelToViewChange, emitViewToModelChange = _b.emitViewToModelChange;\n            emitModelToViewChange = isPresent(emitModelToViewChange) ? emitModelToViewChange : true;\n            emitViewToModelChange = isPresent(emitViewToModelChange) ? emitViewToModelChange : true;\n            this._value = value;\n            if (this._onChange.length && emitModelToViewChange) {\n                this._onChange.forEach(function (changeFn) { return changeFn(_this._value, emitViewToModelChange); });\n            }\n            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n        };\n        /**\n         * This function is functionally the same as updateValue() at this level.  It exists for\n         * symmetry with patchValue() on FormGroups and FormArrays, where it does behave differently.\n         */\n        FormControl.prototype.patchValue = function (value, options) {\n            if (options === void 0) { options = {}; }\n            this.setValue(value, options);\n        };\n        FormControl.prototype.reset = function (formState, _a) {\n            if (formState === void 0) { formState = null; }\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._applyFormState(formState);\n            this.markAsPristine({ onlySelf: onlySelf });\n            this.markAsUntouched({ onlySelf: onlySelf });\n            this.setValue(this._value, { onlySelf: onlySelf });\n        };\n        /**\n         * @internal\n         */\n        FormControl.prototype._updateValue = function () { };\n        /**\n         * @internal\n         */\n        FormControl.prototype._anyControls = function (condition) { return false; };\n        /**\n         * @internal\n         */\n        FormControl.prototype._allControlsDisabled = function () { return this.disabled; };\n        /**\n         * Register a listener for change events.\n         */\n        FormControl.prototype.registerOnChange = function (fn) { this._onChange.push(fn); };\n        /**\n         * @internal\n         */\n        FormControl.prototype._clearChangeFns = function () {\n            this._onChange = [];\n            this._onDisabledChange = null;\n        };\n        /**\n         * Register a listener for disabled events.\n         */\n        FormControl.prototype.registerOnDisabledChange = function (fn) { this._onDisabledChange = fn; };\n        /**\n         * @internal\n         */\n        FormControl.prototype._forEachChild = function (cb) { };\n        FormControl.prototype._applyFormState = function (formState) {\n            if (this._isBoxedValue(formState)) {\n                this._value = formState.value;\n                formState.disabled ? this.disable({ onlySelf: true, emitEvent: false }) :\n                    this.enable({ onlySelf: true, emitEvent: false });\n            }\n            else {\n                this._value = formState;\n            }\n        };\n        return FormControl;\n    }(AbstractControl));\n    /**\n     * Defines a part of a form, of fixed length, that can contain other controls.\n     *\n     * A `FormGroup` aggregates the values of each {@link FormControl} in the group.\n     * The status of a `FormGroup` depends on the status of its children.\n     * If one of the controls in a group is invalid, the entire group is invalid.\n     * Similarly, if a control changes its value, the entire group changes as well.\n     *\n     * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\n     * along with {@link FormControl} and {@link FormArray}. {@link FormArray} can also contain other\n     * controls, but is of variable length.\n     *\n     *\n     * @stable\n     */\n    var FormGroup = (function (_super) {\n        __extends$6(FormGroup, _super);\n        function FormGroup(controls, validator, asyncValidator) {\n            if (validator === void 0) { validator = null; }\n            if (asyncValidator === void 0) { asyncValidator = null; }\n            _super.call(this, validator, asyncValidator);\n            this.controls = controls;\n            this._initObservables();\n            this._setParentForControls();\n            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        }\n        /**\n         * Register a control with the group's list of controls.\n         */\n        FormGroup.prototype.registerControl = function (name, control) {\n            if (this.controls[name])\n                return this.controls[name];\n            this.controls[name] = control;\n            control.setParent(this);\n            return control;\n        };\n        /**\n         * Add a control to this group.\n         */\n        FormGroup.prototype.addControl = function (name, control) {\n            this.registerControl(name, control);\n            this.updateValueAndValidity();\n        };\n        /**\n         * Remove a control from this group.\n         */\n        FormGroup.prototype.removeControl = function (name) {\n            StringMapWrapper.delete(this.controls, name);\n            this.updateValueAndValidity();\n        };\n        /**\n         * Check whether there is a control with the given name in the group.\n         */\n        FormGroup.prototype.contains = function (controlName) {\n            var c = StringMapWrapper.contains(this.controls, controlName);\n            return c && this.get(controlName).enabled;\n        };\n        FormGroup.prototype.setValue = function (value, _a) {\n            var _this = this;\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._checkAllValuesPresent(value);\n            StringMapWrapper.forEach(value, function (newValue, name) {\n                _this._throwIfControlMissing(name);\n                _this.controls[name].setValue(newValue, { onlySelf: true });\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf });\n        };\n        FormGroup.prototype.patchValue = function (value, _a) {\n            var _this = this;\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            StringMapWrapper.forEach(value, function (newValue, name) {\n                if (_this.controls[name]) {\n                    _this.controls[name].patchValue(newValue, { onlySelf: true });\n                }\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf });\n        };\n        FormGroup.prototype.reset = function (value, _a) {\n            if (value === void 0) { value = {}; }\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._forEachChild(function (control, name) {\n                control.reset(value[name], { onlySelf: true });\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf });\n            this._updatePristine({ onlySelf: onlySelf });\n            this._updateTouched({ onlySelf: onlySelf });\n        };\n        FormGroup.prototype.getRawValue = function () {\n            return this._reduceChildren({}, function (acc, control, name) {\n                acc[name] = control.value;\n                return acc;\n            });\n        };\n        /** @internal */\n        FormGroup.prototype._throwIfControlMissing = function (name) {\n            if (!Object.keys(this.controls).length) {\n                throw new Error(\"\\n        There are no form controls registered with this group yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");\n            }\n            if (!this.controls[name]) {\n                throw new Error(\"Cannot find form control with name: \" + name + \".\");\n            }\n        };\n        /** @internal */\n        FormGroup.prototype._forEachChild = function (cb) {\n            StringMapWrapper.forEach(this.controls, cb);\n        };\n        /** @internal */\n        FormGroup.prototype._setParentForControls = function () {\n            var _this = this;\n            this._forEachChild(function (control, name) { control.setParent(_this); });\n        };\n        /** @internal */\n        FormGroup.prototype._updateValue = function () { this._value = this._reduceValue(); };\n        /** @internal */\n        FormGroup.prototype._anyControls = function (condition) {\n            var _this = this;\n            var res = false;\n            this._forEachChild(function (control, name) {\n                res = res || (_this.contains(name) && condition(control));\n            });\n            return res;\n        };\n        /** @internal */\n        FormGroup.prototype._reduceValue = function () {\n            var _this = this;\n            return this._reduceChildren({}, function (acc, control, name) {\n                if (control.enabled || _this.disabled) {\n                    acc[name] = control.value;\n                }\n                return acc;\n            });\n        };\n        /** @internal */\n        FormGroup.prototype._reduceChildren = function (initValue, fn) {\n            var res = initValue;\n            this._forEachChild(function (control, name) { res = fn(res, control, name); });\n            return res;\n        };\n        /** @internal */\n        FormGroup.prototype._allControlsDisabled = function () {\n            for (var _i = 0, _a = Object.keys(this.controls); _i < _a.length; _i++) {\n                var controlName = _a[_i];\n                if (this.controls[controlName].enabled) {\n                    return false;\n                }\n            }\n            return !StringMapWrapper.isEmpty(this.controls);\n        };\n        /** @internal */\n        FormGroup.prototype._checkAllValuesPresent = function (value) {\n            this._forEachChild(function (control, name) {\n                if (value[name] === undefined) {\n                    throw new Error(\"Must supply a value for form control with name: '\" + name + \"'.\");\n                }\n            });\n        };\n        return FormGroup;\n    }(AbstractControl));\n    /**\n     * Defines a part of a form, of variable length, that can contain other controls.\n     *\n     * A `FormArray` aggregates the values of each {@link FormControl} in the group.\n     * The status of a `FormArray` depends on the status of its children.\n     * If one of the controls in a group is invalid, the entire array is invalid.\n     * Similarly, if a control changes its value, the entire array changes as well.\n     *\n     * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,\n     * along with {@link FormControl} and {@link FormGroup}. {@link FormGroup} can also contain\n     * other controls, but is of fixed length.\n     *\n     * ## Adding or removing controls\n     *\n     * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods\n     * in `FormArray` itself. These methods ensure the controls are properly tracked in the\n     * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n     * the `FormArray` directly, as that will result in strange and unexpected behavior such\n     * as broken change detection.\n     *\n     *\n     * @stable\n     */\n    var FormArray = (function (_super) {\n        __extends$6(FormArray, _super);\n        function FormArray(controls, validator, asyncValidator) {\n            if (validator === void 0) { validator = null; }\n            if (asyncValidator === void 0) { asyncValidator = null; }\n            _super.call(this, validator, asyncValidator);\n            this.controls = controls;\n            this._initObservables();\n            this._setParentForControls();\n            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        }\n        /**\n         * Get the {@link AbstractControl} at the given `index` in the array.\n         */\n        FormArray.prototype.at = function (index) { return this.controls[index]; };\n        /**\n         * Insert a new {@link AbstractControl} at the end of the array.\n         */\n        FormArray.prototype.push = function (control) {\n            this.controls.push(control);\n            control.setParent(this);\n            this.updateValueAndValidity();\n        };\n        /**\n         * Insert a new {@link AbstractControl} at the given `index` in the array.\n         */\n        FormArray.prototype.insert = function (index, control) {\n            ListWrapper.insert(this.controls, index, control);\n            control.setParent(this);\n            this.updateValueAndValidity();\n        };\n        /**\n         * Remove the control at the given `index` in the array.\n         */\n        FormArray.prototype.removeAt = function (index) {\n            ListWrapper.removeAt(this.controls, index);\n            this.updateValueAndValidity();\n        };\n        Object.defineProperty(FormArray.prototype, \"length\", {\n            /**\n             * Length of the control array.\n             */\n            get: function () { return this.controls.length; },\n            enumerable: true,\n            configurable: true\n        });\n        FormArray.prototype.setValue = function (value, _a) {\n            var _this = this;\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._checkAllValuesPresent(value);\n            value.forEach(function (newValue, index) {\n                _this._throwIfControlMissing(index);\n                _this.at(index).setValue(newValue, { onlySelf: true });\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf });\n        };\n        FormArray.prototype.patchValue = function (value, _a) {\n            var _this = this;\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            value.forEach(function (newValue, index) {\n                if (_this.at(index)) {\n                    _this.at(index).patchValue(newValue, { onlySelf: true });\n                }\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf });\n        };\n        FormArray.prototype.reset = function (value, _a) {\n            if (value === void 0) { value = []; }\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._forEachChild(function (control, index) {\n                control.reset(value[index], { onlySelf: true });\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf });\n            this._updatePristine({ onlySelf: onlySelf });\n            this._updateTouched({ onlySelf: onlySelf });\n        };\n        FormArray.prototype.getRawValue = function () { return this.controls.map(function (control) { return control.value; }); };\n        /** @internal */\n        FormArray.prototype._throwIfControlMissing = function (index) {\n            if (!this.controls.length) {\n                throw new Error(\"\\n        There are no form controls registered with this array yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");\n            }\n            if (!this.at(index)) {\n                throw new Error(\"Cannot find form control at index \" + index);\n            }\n        };\n        /** @internal */\n        FormArray.prototype._forEachChild = function (cb) {\n            this.controls.forEach(function (control, index) { cb(control, index); });\n        };\n        /** @internal */\n        FormArray.prototype._updateValue = function () {\n            var _this = this;\n            this._value = this.controls.filter(function (control) { return control.enabled || _this.disabled; })\n                .map(function (control) { return control.value; });\n        };\n        /** @internal */\n        FormArray.prototype._anyControls = function (condition) {\n            return this.controls.some(function (control) { return control.enabled && condition(control); });\n        };\n        /** @internal */\n        FormArray.prototype._setParentForControls = function () {\n            var _this = this;\n            this._forEachChild(function (control) { control.setParent(_this); });\n        };\n        /** @internal */\n        FormArray.prototype._checkAllValuesPresent = function (value) {\n            this._forEachChild(function (control, i) {\n                if (value[i] === undefined) {\n                    throw new Error(\"Must supply a value for form control at index: \" + i + \".\");\n                }\n            });\n        };\n        /** @internal */\n        FormArray.prototype._allControlsDisabled = function () {\n            for (var _i = 0, _a = this.controls; _i < _a.length; _i++) {\n                var control = _a[_i];\n                if (control.enabled)\n                    return false;\n            }\n            return !!this.controls.length;\n        };\n        return FormArray;\n    }(AbstractControl));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$4 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var formDirectiveProvider = {\n        provide: ControlContainer,\n        useExisting: _angular_core.forwardRef(function () { return NgForm; })\n    };\n    var resolvedPromise = Promise.resolve(null);\n    /**\n     * If `NgForm` is bound in a component, `<form>` elements in that component will be\n     * upgraded to use the Angular form system.\n     *\n     * ### Typical Use\n     *\n     * Include `FORM_DIRECTIVES` in the `directives` section of a {@link Component} annotation\n     * to use `NgForm` and its associated controls.\n     *\n     * ### Structure\n     *\n     * An Angular form is a collection of `FormControl`s in some hierarchy.\n     * `FormControl`s can be at the top level or can be organized in `FormGroup`s\n     * or `FormArray`s. This hierarchy is reflected in the form's `value`, a\n     * JSON object that mirrors the form structure.\n     *\n     * ### Submission\n     *\n     * The `ngSubmit` event signals when the user triggers a form submission.\n     *\n     *  ```typescript\n     * @Component({\n     *   selector: 'my-app',\n     *   template: `\n     *     <div>\n     *       <p>Submit the form to see the data object Angular builds</p>\n     *       <h2>NgForm demo</h2>\n     *       <form #f=\"ngForm\" (ngSubmit)=\"onSubmit(f.value)\">\n     *         <h3>Control group: credentials</h3>\n     *         <div ngModelGroup=\"credentials\">\n     *           <p>Login: <input type=\"text\" name=\"login\" ngModel></p>\n     *           <p>Password: <input type=\"password\" name=\"password\" ngModel></p>\n     *         </div>\n     *         <h3>Control group: person</h3>\n     *         <div ngModelGroup=\"person\">\n     *           <p>First name: <input type=\"text\" name=\"firstName\" ngModel></p>\n     *           <p>Last name: <input type=\"text\" name=\"lastName\" ngModel></p>\n     *         </div>\n     *         <button type=\"submit\">Submit Form</button>\n     *       <p>Form data submitted:</p>\n     *       </form>\n     *       <pre>{{data}}</pre>\n     *     </div>\n     * `,\n     *   directives: []\n     * })\n     * export class App {\n     *   constructor() {}\n     *\n     *   data: string;\n     *\n     *   onSubmit(data) {\n     *     this.data = JSON.stringify(data, null, 2);\n     *   }\n     * }\n     *  ```\n     *\n     *  @stable\n     */\n    var NgForm = (function (_super) {\n        __extends$4(NgForm, _super);\n        function NgForm(validators, asyncValidators) {\n            _super.call(this);\n            this._submitted = false;\n            this.ngSubmit = new EventEmitter();\n            this.form =\n                new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\n        }\n        Object.defineProperty(NgForm.prototype, \"submitted\", {\n            get: function () { return this._submitted; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgForm.prototype, \"formDirective\", {\n            get: function () { return this; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgForm.prototype, \"control\", {\n            get: function () { return this.form; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgForm.prototype, \"path\", {\n            get: function () { return []; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgForm.prototype, \"controls\", {\n            get: function () { return this.form.controls; },\n            enumerable: true,\n            configurable: true\n        });\n        NgForm.prototype.addControl = function (dir) {\n            var _this = this;\n            resolvedPromise.then(function () {\n                var container = _this._findContainer(dir.path);\n                dir._control = container.registerControl(dir.name, dir.control);\n                setUpControl(dir.control, dir);\n                dir.control.updateValueAndValidity({ emitEvent: false });\n            });\n        };\n        NgForm.prototype.getControl = function (dir) { return this.form.get(dir.path); };\n        NgForm.prototype.removeControl = function (dir) {\n            var _this = this;\n            resolvedPromise.then(function () {\n                var container = _this._findContainer(dir.path);\n                if (isPresent(container)) {\n                    container.removeControl(dir.name);\n                }\n            });\n        };\n        NgForm.prototype.addFormGroup = function (dir) {\n            var _this = this;\n            resolvedPromise.then(function () {\n                var container = _this._findContainer(dir.path);\n                var group = new FormGroup({});\n                setUpFormContainer(group, dir);\n                container.registerControl(dir.name, group);\n                group.updateValueAndValidity({ emitEvent: false });\n            });\n        };\n        NgForm.prototype.removeFormGroup = function (dir) {\n            var _this = this;\n            resolvedPromise.then(function () {\n                var container = _this._findContainer(dir.path);\n                if (isPresent(container)) {\n                    container.removeControl(dir.name);\n                }\n            });\n        };\n        NgForm.prototype.getFormGroup = function (dir) { return this.form.get(dir.path); };\n        NgForm.prototype.updateModel = function (dir, value) {\n            var _this = this;\n            resolvedPromise.then(function () {\n                var ctrl = _this.form.get(dir.path);\n                ctrl.setValue(value);\n            });\n        };\n        NgForm.prototype.setValue = function (value) { this.control.setValue(value); };\n        NgForm.prototype.onSubmit = function () {\n            this._submitted = true;\n            this.ngSubmit.emit(null);\n            return false;\n        };\n        NgForm.prototype.onReset = function () { this.resetForm(); };\n        NgForm.prototype.resetForm = function (value) {\n            if (value === void 0) { value = undefined; }\n            this.form.reset(value);\n            this._submitted = false;\n        };\n        /** @internal */\n        NgForm.prototype._findContainer = function (path) {\n            path.pop();\n            return ListWrapper.isEmpty(path) ? this.form : this.form.get(path);\n        };\n        NgForm.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',\n                        providers: [formDirectiveProvider],\n                        host: { '(submit)': 'onSubmit()', '(reset)': 'onReset()' },\n                        outputs: ['ngSubmit'],\n                        exportAs: 'ngForm'\n                    },] },\n        ];\n        /** @nocollapse */\n        NgForm.ctorParameters = [\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        ];\n        return NgForm;\n    }(ControlContainer));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var Examples = {\n        formControlName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <input formControlName=\\\"firstName\\\">\\n    </div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       firstName: new FormControl()\\n    });\",\n        formGroupName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <div formGroupName=\\\"person\\\">\\n          <input formControlName=\\\"firstName\\\">\\n       </div>\\n    </div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       person: new FormGroup({ firstName: new FormControl() })\\n    });\",\n        formArrayName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <div formArrayName=\\\"cities\\\">\\n        <div *ngFor=\\\"let city of cityArray.controls; let i=index\\\">\\n          <input [formControlName]=\\\"i\\\">\\n        </div>\\n      </div>\\n    </div>\\n\\n    In your class:\\n\\n    this.cityArray = new FormArray([new FormControl('SF')]);\\n    this.myGroup = new FormGroup({\\n      cities: this.cityArray\\n    });\",\n        ngModelGroup: \"\\n    <form>\\n       <div ngModelGroup=\\\"person\\\">\\n          <input [(ngModel)]=\\\"person.name\\\" name=\\\"firstName\\\">\\n       </div>\\n    </form>\",\n        ngModelWithFormGroup: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <input formControlName=\\\"firstName\\\">\\n       <input [(ngModel)]=\\\"showMoreControls\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n    </div>\\n  \"\n    };\n\n    var TemplateDrivenErrors = (function () {\n        function TemplateDrivenErrors() {\n        }\n        TemplateDrivenErrors.modelParentException = function () {\n            throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\\n      formGroup's partner directive \\\"formControlName\\\" instead.  Example:\\n\\n      \" + Examples.formControlName + \"\\n\\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\\n\\n      Example:\\n\\n      \" + Examples.ngModelWithFormGroup);\n        };\n        TemplateDrivenErrors.formGroupNameException = function () {\n            throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\\n\\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\\n\\n      \" + Examples.formGroupName + \"\\n\\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\\n\\n      \" + Examples.ngModelGroup);\n        };\n        TemplateDrivenErrors.missingNameException = function () {\n            throw new Error(\"If ngModel is used within a form tag, either the name attribute must be set or the form\\n      control must be defined as 'standalone' in ngModelOptions.\\n\\n      Example 1: <input [(ngModel)]=\\\"person.firstName\\\" name=\\\"first\\\">\\n      Example 2: <input [(ngModel)]=\\\"person.firstName\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\");\n        };\n        TemplateDrivenErrors.modelGroupParentException = function () {\n            throw new Error(\"\\n      ngModelGroup cannot be used with a parent formGroup directive.\\n\\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\\n\\n      \" + Examples.formGroupName + \"\\n\\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\\n\\n      \" + Examples.ngModelGroup);\n        };\n        return TemplateDrivenErrors;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$8 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var modelGroupProvider = {\n        provide: ControlContainer,\n        useExisting: _angular_core.forwardRef(function () { return NgModelGroup; })\n    };\n    /**\n     * Creates and binds a model group to a DOM element.\n     *\n     * This directive can only be used as a child of {@link NgForm}.\n     *\n     * ```typescript\n     * @Component({\n     *   selector: 'my-app',\n     *   template: `\n     *     <div>\n     *       <h2>Angular forms Example</h2>\n     *       <form #f=\"ngForm\">\n     *         <div ngModelGroup=\"name\" #mgName=\"ngModelGroup\">\n     *           <h3>Enter your name:</h3>\n     *           <p>First: <input name=\"first\" ngModel required></p>\n     *           <p>Middle: <input name=\"middle\" ngModel></p>\n     *           <p>Last: <input name=\"last\" ngModel required></p>\n     *         </div>\n     *         <h3>Name value:</h3>\n     *         <pre>{{ mgName.value | json }}</pre>\n     *         <p>Name is {{mgName?.valid ? \"valid\" : \"invalid\"}}</p>\n     *         <h3>What's your favorite food?</h3>\n     *         <p><input name=\"food\" ngModel></p>\n     *         <h3>Form value</h3>\n     *         <pre>{{ f.value | json }}</pre>\n     *       </form>\n     *     </div>\n     *   `\n     * })\n     * export class App {}\n     * ```\n     *\n     * This example declares a model group for a user's name. The value and validation state of\n     * this group can be accessed separately from the overall form.\n     *\n     * @stable\n     */\n    var NgModelGroup = (function (_super) {\n        __extends$8(NgModelGroup, _super);\n        function NgModelGroup(parent, validators, asyncValidators) {\n            _super.call(this);\n            this._parent = parent;\n            this._validators = validators;\n            this._asyncValidators = asyncValidators;\n        }\n        /** @internal */\n        NgModelGroup.prototype._checkParentType = function () {\n            if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n                TemplateDrivenErrors.modelGroupParentException();\n            }\n        };\n        NgModelGroup.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup' },] },\n        ];\n        /** @nocollapse */\n        NgModelGroup.ctorParameters = [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        ];\n        NgModelGroup.propDecorators = {\n            'name': [{ type: _angular_core.Input, args: ['ngModelGroup',] },],\n        };\n        return NgModelGroup;\n    }(AbstractFormGroupDirective));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$7 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var formControlBinding = {\n        provide: NgControl,\n        useExisting: _angular_core.forwardRef(function () { return NgModel; })\n    };\n    var resolvedPromise$1 = Promise.resolve(null);\n    /**\n     * Binds a domain model to a form control.\n     *\n     * ### Usage\n     *\n     * `ngModel` binds an existing domain model to a form control. For a\n     * two-way binding, use `[(ngModel)]` to ensure the model updates in\n     * both directions.\n     *\n     *  ```typescript\n     * @Component({\n     *      selector: \"search-comp\",\n     *      directives: [],\n     *      template: `<input type='text' [(ngModel)]=\"searchQuery\">`\n     *      })\n     * class SearchComp {\n     *  searchQuery: string;\n     * }\n     *  ```\n     *\n     *  @stable\n     */\n    var NgModel = (function (_super) {\n        __extends$7(NgModel, _super);\n        function NgModel(parent, validators, asyncValidators, valueAccessors) {\n            _super.call(this);\n            /** @internal */\n            this._control = new FormControl();\n            /** @internal */\n            this._registered = false;\n            this.update = new EventEmitter();\n            this._parent = parent;\n            this._rawValidators = validators || [];\n            this._rawAsyncValidators = asyncValidators || [];\n            this.valueAccessor = selectValueAccessor(this, valueAccessors);\n        }\n        NgModel.prototype.ngOnChanges = function (changes) {\n            this._checkForErrors();\n            if (!this._registered)\n                this._setUpControl();\n            if ('isDisabled' in changes) {\n                this._updateDisabled(changes);\n            }\n            if (isPropertyUpdated(changes, this.viewModel)) {\n                this._updateValue(this.model);\n                this.viewModel = this.model;\n            }\n        };\n        NgModel.prototype.ngOnDestroy = function () { this.formDirective && this.formDirective.removeControl(this); };\n        Object.defineProperty(NgModel.prototype, \"control\", {\n            get: function () { return this._control; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgModel.prototype, \"path\", {\n            get: function () {\n                return this._parent ? controlPath(this.name, this._parent) : [this.name];\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgModel.prototype, \"formDirective\", {\n            get: function () { return this._parent ? this._parent.formDirective : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgModel.prototype, \"validator\", {\n            get: function () { return composeValidators(this._rawValidators); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgModel.prototype, \"asyncValidator\", {\n            get: function () {\n                return composeAsyncValidators(this._rawAsyncValidators);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        NgModel.prototype.viewToModelUpdate = function (newValue) {\n            this.viewModel = newValue;\n            this.update.emit(newValue);\n        };\n        NgModel.prototype._setUpControl = function () {\n            this._isStandalone() ? this._setUpStandalone() :\n                this.formDirective.addControl(this);\n            this._registered = true;\n        };\n        NgModel.prototype._isStandalone = function () {\n            return !this._parent || (this.options && this.options.standalone);\n        };\n        NgModel.prototype._setUpStandalone = function () {\n            setUpControl(this._control, this);\n            this._control.updateValueAndValidity({ emitEvent: false });\n        };\n        NgModel.prototype._checkForErrors = function () {\n            if (!this._isStandalone()) {\n                this._checkParentType();\n            }\n            this._checkName();\n        };\n        NgModel.prototype._checkParentType = function () {\n            if (!(this._parent instanceof NgModelGroup) &&\n                this._parent instanceof AbstractFormGroupDirective) {\n                TemplateDrivenErrors.formGroupNameException();\n            }\n            else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n                TemplateDrivenErrors.modelParentException();\n            }\n        };\n        NgModel.prototype._checkName = function () {\n            if (this.options && this.options.name)\n                this.name = this.options.name;\n            if (!this._isStandalone() && !this.name) {\n                TemplateDrivenErrors.missingNameException();\n            }\n        };\n        NgModel.prototype._updateValue = function (value) {\n            var _this = this;\n            resolvedPromise$1.then(function () { _this.control.setValue(value, { emitViewToModelChange: false }); });\n        };\n        NgModel.prototype._updateDisabled = function (changes) {\n            var _this = this;\n            var disabledValue = changes['isDisabled'].currentValue;\n            var isDisabled = disabledValue != null && disabledValue != false;\n            resolvedPromise$1.then(function () {\n                if (isDisabled && !_this.control.disabled) {\n                    _this.control.disable();\n                }\n                else if (!isDisabled && _this.control.disabled) {\n                    _this.control.enable();\n                }\n            });\n        };\n        NgModel.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[ngModel]:not([formControlName]):not([formControl])',\n                        providers: [formControlBinding],\n                        exportAs: 'ngModel'\n                    },] },\n        ];\n        /** @nocollapse */\n        NgModel.ctorParameters = [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },\n        ];\n        NgModel.propDecorators = {\n            'name': [{ type: _angular_core.Input },],\n            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],\n            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],\n            'options': [{ type: _angular_core.Input, args: ['ngModelOptions',] },],\n            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],\n        };\n        return NgModel;\n    }(NgControl));\n\n    var ReactiveErrors = (function () {\n        function ReactiveErrors() {\n        }\n        ReactiveErrors.controlParentException = function () {\n            throw new Error(\"formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \" + Examples.formControlName);\n        };\n        ReactiveErrors.ngModelGroupException = function () {\n            throw new Error(\"formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\\n       that also have a \\\"form\\\" prefix: formGroupName, formArrayName, or formGroup.\\n\\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\\n\\n        \" + Examples.formGroupName + \"\\n\\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\\n\\n        \" + Examples.ngModelGroup);\n        };\n        ReactiveErrors.missingFormException = function () {\n            throw new Error(\"formGroup expects a FormGroup instance. Please pass one in.\\n\\n       Example:\\n\\n       \" + Examples.formControlName);\n        };\n        ReactiveErrors.groupParentException = function () {\n            throw new Error(\"formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n      directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \" + Examples.formGroupName);\n        };\n        ReactiveErrors.arrayParentException = function () {\n            throw new Error(\"formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n        Example:\\n\\n        \" + Examples.formArrayName);\n        };\n        ReactiveErrors.disabledAttrWarning = function () {\n            console.warn(\"\\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\\n      you. We recommend using this approach to avoid 'changed after checked' errors.\\n       \\n      Example: \\n      form = new FormGroup({\\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\\n        last: new FormControl('Drew', Validators.required)\\n      });\\n    \");\n        };\n        return ReactiveErrors;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$9 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var formControlBinding$1 = {\n        provide: NgControl,\n        useExisting: _angular_core.forwardRef(function () { return FormControlDirective; })\n    };\n    /**\n     * Binds an existing {@link FormControl} to a DOM element. It requires importing the {@link\n     * ReactiveFormsModule}.\n     *\n     * In this example, we bind the control to an input element. When the value of the input element\n     * changes, the value of the control will reflect that change. Likewise, if the value of the\n     * control changes, the input element reflects that change.\n     *\n     *  ```typescript\n     * @Component({\n     *   selector: 'my-app',\n     *   template: `\n     *     <div>\n     *       <h2>Bind existing control example</h2>\n     *       <form>\n     *         <p>Element with existing control: <input type=\"text\"\n     * [formControl]=\"loginControl\"></p>\n     *         <p>Value of existing control: {{loginControl.value}}</p>\n     *       </form>\n     *     </div>\n     *   `,\n     * })\n     * export class App {\n     *   loginControl: FormControl = new FormControl('');\n     * }\n     *  ```\n     *\n     * ### ngModel\n     *\n     * We can also set the value of the form programmatically with setValue().\n     **\n     *  ```typescript\n     * @Component({\n     *      selector: \"login-comp\",\n\n     *      template: \"<input type='text' [formControl]='loginControl'>\"\n     *      })\n     * class LoginComp {\n     *  loginControl: FormControl = new FormControl('');\n     *\n     *  populate() {\n     *    this.loginControl.setValue('some login');\n     *  }\n     *\n     * }\n     *  ```\n     *\n     *  @stable\n     */\n    var FormControlDirective = (function (_super) {\n        __extends$9(FormControlDirective, _super);\n        function FormControlDirective(validators, asyncValidators, valueAccessors) {\n            _super.call(this);\n            this.update = new EventEmitter();\n            this._rawValidators = validators || [];\n            this._rawAsyncValidators = asyncValidators || [];\n            this.valueAccessor = selectValueAccessor(this, valueAccessors);\n        }\n        Object.defineProperty(FormControlDirective.prototype, \"isDisabled\", {\n            set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },\n            enumerable: true,\n            configurable: true\n        });\n        FormControlDirective.prototype.ngOnChanges = function (changes) {\n            if (this._isControlChanged(changes)) {\n                setUpControl(this.form, this);\n                if (this.control.disabled)\n                    this.valueAccessor.setDisabledState(true);\n                this.form.updateValueAndValidity({ emitEvent: false });\n            }\n            if (isPropertyUpdated(changes, this.viewModel)) {\n                this.form.setValue(this.model);\n                this.viewModel = this.model;\n            }\n        };\n        Object.defineProperty(FormControlDirective.prototype, \"path\", {\n            get: function () { return []; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlDirective.prototype, \"validator\", {\n            get: function () { return composeValidators(this._rawValidators); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlDirective.prototype, \"asyncValidator\", {\n            get: function () {\n                return composeAsyncValidators(this._rawAsyncValidators);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlDirective.prototype, \"control\", {\n            get: function () { return this.form; },\n            enumerable: true,\n            configurable: true\n        });\n        FormControlDirective.prototype.viewToModelUpdate = function (newValue) {\n            this.viewModel = newValue;\n            this.update.emit(newValue);\n        };\n        FormControlDirective.prototype._isControlChanged = function (changes) {\n            return StringMapWrapper.contains(changes, 'form');\n        };\n        FormControlDirective.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[formControl]', providers: [formControlBinding$1], exportAs: 'ngForm' },] },\n        ];\n        /** @nocollapse */\n        FormControlDirective.ctorParameters = [\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },\n        ];\n        FormControlDirective.propDecorators = {\n            'form': [{ type: _angular_core.Input, args: ['formControl',] },],\n            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],\n            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],\n            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],\n        };\n        return FormControlDirective;\n    }(NgControl));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$11 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var formDirectiveProvider$1 = {\n        provide: ControlContainer,\n        useExisting: _angular_core.forwardRef(function () { return FormGroupDirective; })\n    };\n    /**\n     * Binds an existing form group to a DOM element.  It requires importing the {@link\n     * ReactiveFormsModule}.\n     *\n     * In this example, we bind the form group to the form element, and we bind the login and\n     * password controls to the login and password elements.\n     *\n     *  ```typescript\n     * @Component({\n     *   selector: 'my-app',\n     *   template: `\n     *     <div>\n     *       <h2>Binding an existing form group</h2>\n     *       <form [formGroup]=\"loginForm\">\n     *         <p>Login: <input type=\"text\" formControlName=\"login\"></p>\n     *         <p>Password: <input type=\"password\" formControlName=\"password\"></p>\n     *       </form>\n     *       <p>Value:</p>\n     *       <pre>{{ loginForm.value | json}}</pre>\n     *     </div>\n     *   `\n     * })\n     * export class App {\n     *   loginForm: FormGroup;\n     *\n     *   constructor() {\n     *     this.loginForm = new FormGroup({\n     *       login: new FormControl(\"\"),\n     *       password: new FormControl(\"\")\n     *     });\n     *   }\n     *\n     * }\n     *  ```\n     *\n     * We can also use setValue() to populate the form programmatically.\n     *\n     *  ```typescript\n     * @Component({\n     *      selector: \"login-comp\",\n     *      template: `\n     *        <form [formGroup]='loginForm'>\n     *          Login <input type='text' formControlName='login'>\n     *          Password <input type='password' formControlName='password'>\n     *          <button (click)=\"onLogin()\">Login</button>\n     *        </form>`\n     *      })\n     * class LoginComp {\n     *  loginForm: FormGroup;\n     *\n     *  constructor() {\n     *    this.loginForm = new FormGroup({\n     *      login: new FormControl(''),\n     *      password: new FormControl('')\n     *    });\n     *  }\n     *\n     *  populate() {\n     *    this.loginForm.setValue({ login: 'some login', password: 'some password'});\n     *  }\n     *\n     *  onLogin(): void {\n     *    // this.credentials.login === 'some login'\n     *    // this.credentials.password === 'some password'\n     *  }\n     * }\n     *  ```\n     *\n     *  @stable\n     */\n    var FormGroupDirective = (function (_super) {\n        __extends$11(FormGroupDirective, _super);\n        function FormGroupDirective(_validators, _asyncValidators) {\n            _super.call(this);\n            this._validators = _validators;\n            this._asyncValidators = _asyncValidators;\n            this._submitted = false;\n            this.directives = [];\n            this.form = null;\n            this.ngSubmit = new EventEmitter();\n        }\n        FormGroupDirective.prototype.ngOnChanges = function (changes) {\n            this._checkFormPresent();\n            if (StringMapWrapper.contains(changes, 'form')) {\n                var sync = composeValidators(this._validators);\n                this.form.validator = Validators.compose([this.form.validator, sync]);\n                var async = composeAsyncValidators(this._asyncValidators);\n                this.form.asyncValidator = Validators.composeAsync([this.form.asyncValidator, async]);\n                this._updateDomValue(changes);\n            }\n        };\n        Object.defineProperty(FormGroupDirective.prototype, \"submitted\", {\n            get: function () { return this._submitted; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormGroupDirective.prototype, \"formDirective\", {\n            get: function () { return this; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormGroupDirective.prototype, \"control\", {\n            get: function () { return this.form; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormGroupDirective.prototype, \"path\", {\n            get: function () { return []; },\n            enumerable: true,\n            configurable: true\n        });\n        FormGroupDirective.prototype.addControl = function (dir) {\n            var ctrl = this.form.get(dir.path);\n            setUpControl(ctrl, dir);\n            ctrl.updateValueAndValidity({ emitEvent: false });\n            this.directives.push(dir);\n        };\n        FormGroupDirective.prototype.getControl = function (dir) { return this.form.get(dir.path); };\n        FormGroupDirective.prototype.removeControl = function (dir) { ListWrapper.remove(this.directives, dir); };\n        FormGroupDirective.prototype.addFormGroup = function (dir) {\n            var ctrl = this.form.get(dir.path);\n            setUpFormContainer(ctrl, dir);\n            ctrl.updateValueAndValidity({ emitEvent: false });\n        };\n        FormGroupDirective.prototype.removeFormGroup = function (dir) { };\n        FormGroupDirective.prototype.getFormGroup = function (dir) { return this.form.get(dir.path); };\n        FormGroupDirective.prototype.addFormArray = function (dir) {\n            var ctrl = this.form.get(dir.path);\n            setUpFormContainer(ctrl, dir);\n            ctrl.updateValueAndValidity({ emitEvent: false });\n        };\n        FormGroupDirective.prototype.removeFormArray = function (dir) { };\n        FormGroupDirective.prototype.getFormArray = function (dir) { return this.form.get(dir.path); };\n        FormGroupDirective.prototype.updateModel = function (dir, value) {\n            var ctrl = this.form.get(dir.path);\n            ctrl.setValue(value);\n        };\n        FormGroupDirective.prototype.onSubmit = function () {\n            this._submitted = true;\n            this.ngSubmit.emit(null);\n            return false;\n        };\n        FormGroupDirective.prototype.onReset = function () { this.resetForm(); };\n        FormGroupDirective.prototype.resetForm = function (value) {\n            if (value === void 0) { value = undefined; }\n            this.form.reset(value);\n            this._submitted = false;\n        };\n        /** @internal */\n        FormGroupDirective.prototype._updateDomValue = function (changes) {\n            var _this = this;\n            var oldForm = changes['form'].previousValue;\n            this.directives.forEach(function (dir) {\n                var newCtrl = _this.form.get(dir.path);\n                var oldCtrl = oldForm.get(dir.path);\n                if (oldCtrl !== newCtrl) {\n                    cleanUpControl(oldCtrl, dir);\n                    if (newCtrl)\n                        setUpControl(newCtrl, dir);\n                }\n            });\n            this.form._updateTreeValidity({ emitEvent: false });\n        };\n        FormGroupDirective.prototype._checkFormPresent = function () {\n            if (isBlank(this.form)) {\n                ReactiveErrors.missingFormException();\n            }\n        };\n        FormGroupDirective.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[formGroup]',\n                        providers: [formDirectiveProvider$1],\n                        host: { '(submit)': 'onSubmit()', '(reset)': 'onReset()' },\n                        exportAs: 'ngForm'\n                    },] },\n        ];\n        /** @nocollapse */\n        FormGroupDirective.ctorParameters = [\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        ];\n        FormGroupDirective.propDecorators = {\n            'form': [{ type: _angular_core.Input, args: ['formGroup',] },],\n            'ngSubmit': [{ type: _angular_core.Output },],\n        };\n        return FormGroupDirective;\n    }(ControlContainer));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$12 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var formGroupNameProvider = {\n        provide: ControlContainer,\n        useExisting: _angular_core.forwardRef(function () { return FormGroupName; })\n    };\n    /**\n     * Syncs an existing form group to a DOM element.\n     *\n     * This directive can only be used as a child of {@link FormGroupDirective}.  It also requires\n     * importing the {@link ReactiveFormsModule}.\n     *\n     * ```typescript\n     * @Component({\n     *   selector: 'my-app',\n     *   template: `\n     *     <div>\n     *       <h2>Angular FormGroup Example</h2>\n     *       <form [formGroup]=\"myForm\">\n     *         <div formGroupName=\"name\">\n     *           <h3>Enter your name:</h3>\n     *           <p>First: <input formControlName=\"first\"></p>\n     *           <p>Middle: <input formControlName=\"middle\"></p>\n     *           <p>Last: <input formControlName=\"last\"></p>\n     *         </div>\n     *         <h3>Name value:</h3>\n     *         <pre>{{ myForm.get('name') | json }}</pre>\n     *         <p>Name is {{myForm.get('name')?.valid ? \"valid\" : \"invalid\"}}</p>\n     *         <h3>What's your favorite food?</h3>\n     *         <p><input formControlName=\"food\"></p>\n     *         <h3>Form value</h3>\n     *         <pre> {{ myForm | json }} </pre>\n     *       </form>\n     *     </div>\n     *   `\n     * })\n     * export class App {\n     *   myForm = new FormGroup({\n     *     name: new FormGroup({\n     *       first: new FormControl('', Validators.required),\n     *       middle: new FormControl(''),\n     *       last: new FormControl('', Validators.required)\n     *     }),\n     *     food: new FormControl()\n     *   });\n     * }\n     * ```\n     *\n     * This example syncs the form group for the user's name. The value and validation state of\n     * this group can be accessed separately from the overall form.\n     *\n     * @stable\n     */\n    var FormGroupName = (function (_super) {\n        __extends$12(FormGroupName, _super);\n        function FormGroupName(parent, validators, asyncValidators) {\n            _super.call(this);\n            this._parent = parent;\n            this._validators = validators;\n            this._asyncValidators = asyncValidators;\n        }\n        /** @internal */\n        FormGroupName.prototype._checkParentType = function () {\n            if (_hasInvalidParent(this._parent)) {\n                ReactiveErrors.groupParentException();\n            }\n        };\n        FormGroupName.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[formGroupName]', providers: [formGroupNameProvider] },] },\n        ];\n        /** @nocollapse */\n        FormGroupName.ctorParameters = [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        ];\n        FormGroupName.propDecorators = {\n            'name': [{ type: _angular_core.Input, args: ['formGroupName',] },],\n        };\n        return FormGroupName;\n    }(AbstractFormGroupDirective));\n    var formArrayNameProvider = {\n        provide: ControlContainer,\n        useExisting: _angular_core.forwardRef(function () { return FormArrayName; })\n    };\n    /**\n     * Syncs an existing form array to a DOM element.\n     *\n     * This directive can only be used as a child of {@link FormGroupDirective}.  It also requires\n     * importing the {@link ReactiveFormsModule}.\n     *\n     * ```typescript\n     * @Component({\n     *   selector: 'my-app',\n     *   template: `\n     *     <div>\n     *       <h2>Angular FormArray Example</h2>\n     *       <form [formGroup]=\"myForm\">\n     *         <div formArrayName=\"cities\">\n     *           <div *ngFor=\"let city of cityArray.controls; let i=index\">\n     *             <input [formControlName]=\"i\">\n     *           </div>\n     *         </div>\n     *       </form>\n     *       {{ myForm.value | json }}     // {cities: ['SF', 'NY']}\n     *     </div>\n     *   `\n     * })\n     * export class App {\n     *   cityArray = new FormArray([\n     *     new FormControl('SF'),\n     *     new FormControl('NY')\n     *   ]);\n     *   myForm = new FormGroup({\n     *     cities: this.cityArray\n     *   });\n     * }\n     * ```\n     *\n     * @stable\n     */\n    var FormArrayName = (function (_super) {\n        __extends$12(FormArrayName, _super);\n        function FormArrayName(parent, validators, asyncValidators) {\n            _super.call(this);\n            this._parent = parent;\n            this._validators = validators;\n            this._asyncValidators = asyncValidators;\n        }\n        FormArrayName.prototype.ngOnInit = function () {\n            this._checkParentType();\n            this.formDirective.addFormArray(this);\n        };\n        FormArrayName.prototype.ngOnDestroy = function () {\n            if (this.formDirective) {\n                this.formDirective.removeFormArray(this);\n            }\n        };\n        Object.defineProperty(FormArrayName.prototype, \"control\", {\n            get: function () { return this.formDirective.getFormArray(this); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormArrayName.prototype, \"formDirective\", {\n            get: function () {\n                return this._parent ? this._parent.formDirective : null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormArrayName.prototype, \"path\", {\n            get: function () { return controlPath(this.name, this._parent); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormArrayName.prototype, \"validator\", {\n            get: function () { return composeValidators(this._validators); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormArrayName.prototype, \"asyncValidator\", {\n            get: function () { return composeAsyncValidators(this._asyncValidators); },\n            enumerable: true,\n            configurable: true\n        });\n        FormArrayName.prototype._checkParentType = function () {\n            if (_hasInvalidParent(this._parent)) {\n                ReactiveErrors.arrayParentException();\n            }\n        };\n        FormArrayName.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[formArrayName]', providers: [formArrayNameProvider] },] },\n        ];\n        /** @nocollapse */\n        FormArrayName.ctorParameters = [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        ];\n        FormArrayName.propDecorators = {\n            'name': [{ type: _angular_core.Input, args: ['formArrayName',] },],\n        };\n        return FormArrayName;\n    }(ControlContainer));\n    function _hasInvalidParent(parent) {\n        return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&\n            !(parent instanceof FormArrayName);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$10 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var controlNameBinding = {\n        provide: NgControl,\n        useExisting: _angular_core.forwardRef(function () { return FormControlName; })\n    };\n    /**\n     * Syncs an existing form control with the specified name to a DOM element.\n     *\n     * This directive can only be used as a child of {@link FormGroupDirective}.  It also requires\n     * importing the {@link ReactiveFormsModule}.\n\n     * ### Example\n     *\n     * In this example, we create the login and password controls.\n     * We can work with each control separately: check its validity, get its value, listen to its\n     * changes.\n     *\n     *  ```\n     * @Component({\n     *      selector: \"login-comp\",\n     *      template: `\n     *        <form [formGroup]=\"myForm\" (submit)=\"onLogIn()\">\n     *          Login <input type=\"text\" formControlName=\"login\">\n     *          <div *ngIf=\"!loginCtrl.valid\">Login is invalid</div>\n     *          Password <input type=\"password\" formControlName=\"password\">\n     *          <button type=\"submit\">Log in!</button>\n     *        </form>\n     *      `})\n     * class LoginComp {\n     *  loginCtrl = new FormControl();\n     *  passwordCtrl = new FormControl();\n     *  myForm = new FormGroup({\n     *     login: loginCtrl,\n     *     password: passwordCtrl\n     *  });\n     *  onLogIn(): void {\n     *    // value === {login: 'some login', password: 'some password'}\n     *  }\n     * }\n     *  ```\n     *\n     * We can also set the value of the form programmatically using setValue().\n     *\n     *  ```\n     * @Component({\n     *      selector: \"login-comp\",\n     *      template: `\n     *        <form [formGroup]=\"myForm\" (submit)='onLogIn()'>\n     *          Login <input type='text' formControlName='login'>\n     *          Password <input type='password' formControlName='password'>\n     *          <button type='submit'>Log in!</button>\n     *        </form>\n     *      `})\n     * class LoginComp {\n     *  myForm = new FormGroup({\n     *    login: new FormControl(),\n     *    password: new FormControl()\n     *  });\n     *\n     *  populate() {\n     *     this.myForm.setValue({login: 'some login', password: 'some password'});\n     *  }\n     *\n     *  onLogIn(): void {\n     *    // this.credentials.login === \"some login\"\n     *    // this.credentials.password === \"some password\"\n     *  }\n     * }\n     *  ```\n     *\n     *  @stable\n     */\n    var FormControlName = (function (_super) {\n        __extends$10(FormControlName, _super);\n        function FormControlName(parent, validators, asyncValidators, valueAccessors) {\n            _super.call(this);\n            this._added = false;\n            this.update = new EventEmitter();\n            this._parent = parent;\n            this._rawValidators = validators || [];\n            this._rawAsyncValidators = asyncValidators || [];\n            this.valueAccessor = selectValueAccessor(this, valueAccessors);\n        }\n        Object.defineProperty(FormControlName.prototype, \"isDisabled\", {\n            set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },\n            enumerable: true,\n            configurable: true\n        });\n        FormControlName.prototype.ngOnChanges = function (changes) {\n            if (!this._added) {\n                this._checkParentType();\n                this.formDirective.addControl(this);\n                if (this.control.disabled)\n                    this.valueAccessor.setDisabledState(true);\n                this._added = true;\n            }\n            if (isPropertyUpdated(changes, this.viewModel)) {\n                this.viewModel = this.model;\n                this.formDirective.updateModel(this, this.model);\n            }\n        };\n        FormControlName.prototype.ngOnDestroy = function () {\n            if (this.formDirective) {\n                this.formDirective.removeControl(this);\n            }\n        };\n        FormControlName.prototype.viewToModelUpdate = function (newValue) {\n            this.viewModel = newValue;\n            this.update.emit(newValue);\n        };\n        Object.defineProperty(FormControlName.prototype, \"path\", {\n            get: function () { return controlPath(this.name, this._parent); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlName.prototype, \"formDirective\", {\n            get: function () { return this._parent ? this._parent.formDirective : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlName.prototype, \"validator\", {\n            get: function () { return composeValidators(this._rawValidators); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlName.prototype, \"asyncValidator\", {\n            get: function () {\n                return composeAsyncValidators(this._rawAsyncValidators);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlName.prototype, \"control\", {\n            get: function () { return this.formDirective.getControl(this); },\n            enumerable: true,\n            configurable: true\n        });\n        FormControlName.prototype._checkParentType = function () {\n            if (!(this._parent instanceof FormGroupName) &&\n                this._parent instanceof AbstractFormGroupDirective) {\n                ReactiveErrors.ngModelGroupException();\n            }\n            else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&\n                !(this._parent instanceof FormArrayName)) {\n                ReactiveErrors.controlParentException();\n            }\n        };\n        FormControlName.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[formControlName]', providers: [controlNameBinding] },] },\n        ];\n        /** @nocollapse */\n        FormControlName.ctorParameters = [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },\n        ];\n        FormControlName.propDecorators = {\n            'name': [{ type: _angular_core.Input, args: ['formControlName',] },],\n            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],\n            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],\n            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],\n        };\n        return FormControlName;\n    }(NgControl));\n\n    var REQUIRED_VALIDATOR = {\n        provide: NG_VALIDATORS,\n        useExisting: _angular_core.forwardRef(function () { return RequiredValidator; }),\n        multi: true\n    };\n    /**\n     * A Directive that adds the `required` validator to any controls marked with the\n     * `required` attribute, via the {@link NG_VALIDATORS} binding.\n     *\n     * ### Example\n     *\n     * ```\n     * <input name=\"fullName\" ngModel required>\n     * ```\n     *\n     * @stable\n     */\n    var RequiredValidator = (function () {\n        function RequiredValidator() {\n        }\n        Object.defineProperty(RequiredValidator.prototype, \"required\", {\n            get: function () { return this._required; },\n            set: function (value) {\n                this._required = isPresent(value) && \"\" + value !== 'false';\n                if (this._onChange)\n                    this._onChange();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        RequiredValidator.prototype.validate = function (c) {\n            return this.required ? Validators.required(c) : null;\n        };\n        RequiredValidator.prototype.registerOnChange = function (fn) { this._onChange = fn; };\n        RequiredValidator.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[required][formControlName],[required][formControl],[required][ngModel]',\n                        providers: [REQUIRED_VALIDATOR],\n                        host: { '[attr.required]': 'required? \"\" : null' }\n                    },] },\n        ];\n        /** @nocollapse */\n        RequiredValidator.ctorParameters = [];\n        RequiredValidator.propDecorators = {\n            'required': [{ type: _angular_core.Input },],\n        };\n        return RequiredValidator;\n    }());\n    /**\n     * Provider which adds {@link MinLengthValidator} to {@link NG_VALIDATORS}.\n     *\n     * ## Example:\n     *\n     * {@example common/forms/ts/validators/validators.ts region='min'}\n     */\n    var MIN_LENGTH_VALIDATOR = {\n        provide: NG_VALIDATORS,\n        useExisting: _angular_core.forwardRef(function () { return MinLengthValidator; }),\n        multi: true\n    };\n    /**\n     * A directive which installs the {@link MinLengthValidator} for any `formControlName`,\n     * `formControl`, or control with `ngModel` that also has a `minlength` attribute.\n     *\n     * @stable\n     */\n    var MinLengthValidator = (function () {\n        function MinLengthValidator() {\n        }\n        MinLengthValidator.prototype._createValidator = function () {\n            this._validator = Validators.minLength(parseInt(this.minlength, 10));\n        };\n        MinLengthValidator.prototype.ngOnChanges = function (changes) {\n            if (changes['minlength']) {\n                this._createValidator();\n                if (this._onChange)\n                    this._onChange();\n            }\n        };\n        MinLengthValidator.prototype.validate = function (c) {\n            return isPresent(this.minlength) ? this._validator(c) : null;\n        };\n        MinLengthValidator.prototype.registerOnChange = function (fn) { this._onChange = fn; };\n        MinLengthValidator.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n                        providers: [MIN_LENGTH_VALIDATOR],\n                        host: { '[attr.minlength]': 'minlength? minlength : null' }\n                    },] },\n        ];\n        /** @nocollapse */\n        MinLengthValidator.ctorParameters = [];\n        MinLengthValidator.propDecorators = {\n            'minlength': [{ type: _angular_core.Input },],\n        };\n        return MinLengthValidator;\n    }());\n    /**\n     * Provider which adds {@link MaxLengthValidator} to {@link NG_VALIDATORS}.\n     *\n     * ## Example:\n     *\n     * {@example common/forms/ts/validators/validators.ts region='max'}\n     */\n    var MAX_LENGTH_VALIDATOR = {\n        provide: NG_VALIDATORS,\n        useExisting: _angular_core.forwardRef(function () { return MaxLengthValidator; }),\n        multi: true\n    };\n    /**\n     * A directive which installs the {@link MaxLengthValidator} for any `formControlName,\n     * `formControl`,\n     * or control with `ngModel` that also has a `maxlength` attribute.\n     *\n     * @stable\n     */\n    var MaxLengthValidator = (function () {\n        function MaxLengthValidator() {\n        }\n        MaxLengthValidator.prototype._createValidator = function () {\n            this._validator = Validators.maxLength(parseInt(this.maxlength, 10));\n        };\n        MaxLengthValidator.prototype.ngOnChanges = function (changes) {\n            if (changes['maxlength']) {\n                this._createValidator();\n                if (this._onChange)\n                    this._onChange();\n            }\n        };\n        MaxLengthValidator.prototype.validate = function (c) {\n            return isPresent(this.maxlength) ? this._validator(c) : null;\n        };\n        MaxLengthValidator.prototype.registerOnChange = function (fn) { this._onChange = fn; };\n        MaxLengthValidator.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n                        providers: [MAX_LENGTH_VALIDATOR],\n                        host: { '[attr.maxlength]': 'maxlength? maxlength : null' }\n                    },] },\n        ];\n        /** @nocollapse */\n        MaxLengthValidator.ctorParameters = [];\n        MaxLengthValidator.propDecorators = {\n            'maxlength': [{ type: _angular_core.Input },],\n        };\n        return MaxLengthValidator;\n    }());\n    var PATTERN_VALIDATOR = {\n        provide: NG_VALIDATORS,\n        useExisting: _angular_core.forwardRef(function () { return PatternValidator; }),\n        multi: true\n    };\n    /**\n     * A Directive that adds the `pattern` validator to any controls marked with the\n     * `pattern` attribute, via the {@link NG_VALIDATORS} binding. Uses attribute value\n     * as the regex to validate Control value against.  Follows pattern attribute\n     * semantics; i.e. regex must match entire Control value.\n     *\n     * ### Example\n     *\n     * ```\n     * <input [name]=\"fullName\" pattern=\"[a-zA-Z ]*\" ngModel>\n     * ```\n     * @stable\n     */\n    var PatternValidator = (function () {\n        function PatternValidator() {\n        }\n        PatternValidator.prototype._createValidator = function () { this._validator = Validators.pattern(this.pattern); };\n        PatternValidator.prototype.ngOnChanges = function (changes) {\n            if (changes['pattern']) {\n                this._createValidator();\n                if (this._onChange)\n                    this._onChange();\n            }\n        };\n        PatternValidator.prototype.validate = function (c) {\n            return isPresent(this.pattern) ? this._validator(c) : null;\n        };\n        PatternValidator.prototype.registerOnChange = function (fn) { this._onChange = fn; };\n        PatternValidator.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n                        providers: [PATTERN_VALIDATOR],\n                        host: { '[attr.pattern]': 'pattern? pattern : null' }\n                    },] },\n        ];\n        /** @nocollapse */\n        PatternValidator.ctorParameters = [];\n        PatternValidator.propDecorators = {\n            'pattern': [{ type: _angular_core.Input },],\n        };\n        return PatternValidator;\n    }());\n\n    /**\n     * Creates a form object from a user-specified configuration.\n     *\n     * ```typescript\n     * @Component({\n     *   selector: 'my-app',\n     *   template: `\n     *     <form [formGroup]=\"loginForm\">\n     *       <p>Login <input formControlName=\"login\"></p>\n     *       <div formGroupName=\"passwordRetry\">\n     *         <p>Password <input type=\"password\" formControlName=\"password\"></p>\n     *         <p>Confirm password <input type=\"password\" formControlName=\"passwordConfirmation\"></p>\n     *       </div>\n     *     </form>\n     *     <h3>Form value:</h3>\n     *     <pre>{{value}}</pre>\n     *   `,\n     *   directives: [REACTIVE_FORM_DIRECTIVES]\n     * })\n     * export class App {\n     *   loginForm: FormGroup;\n     *\n     *   constructor(builder: FormBuilder) {\n     *     this.loginForm = builder.group({\n     *       login: [\"\", Validators.required],\n     *       passwordRetry: builder.group({\n     *         password: [\"\", Validators.required],\n     *         passwordConfirmation: [\"\", Validators.required, asyncValidator]\n     *       })\n     *     });\n     *   }\n     *\n     *   get value(): string {\n     *     return JSON.stringify(this.loginForm.value, null, 2);\n     *   }\n     * }\n     * ```\n     *\n     * @stable\n     */\n    var FormBuilder = (function () {\n        function FormBuilder() {\n        }\n        /**\n         * Construct a new {@link FormGroup} with the given map of configuration.\n         * Valid keys for the `extra` parameter map are `optionals` and `validator`.\n         *\n         * See the {@link FormGroup} constructor for more details.\n         */\n        FormBuilder.prototype.group = function (controlsConfig, extra) {\n            if (extra === void 0) { extra = null; }\n            var controls = this._reduceControls(controlsConfig);\n            var validator = isPresent(extra) ? StringMapWrapper.get(extra, 'validator') : null;\n            var asyncValidator = isPresent(extra) ? StringMapWrapper.get(extra, 'asyncValidator') : null;\n            return new FormGroup(controls, validator, asyncValidator);\n        };\n        /**\n         * Construct a new {@link FormControl} with the given `formState`,`validator`, and\n         * `asyncValidator`.\n         */\n        FormBuilder.prototype.control = function (formState, validator, asyncValidator) {\n            if (validator === void 0) { validator = null; }\n            if (asyncValidator === void 0) { asyncValidator = null; }\n            return new FormControl(formState, validator, asyncValidator);\n        };\n        /**\n         * Construct an array of {@link FormControl}s from the given `controlsConfig` array of\n         * configuration, with the given optional `validator` and `asyncValidator`.\n         */\n        FormBuilder.prototype.array = function (controlsConfig, validator, asyncValidator) {\n            var _this = this;\n            if (validator === void 0) { validator = null; }\n            if (asyncValidator === void 0) { asyncValidator = null; }\n            var controls = controlsConfig.map(function (c) { return _this._createControl(c); });\n            return new FormArray(controls, validator, asyncValidator);\n        };\n        /** @internal */\n        FormBuilder.prototype._reduceControls = function (controlsConfig) {\n            var _this = this;\n            var controls = {};\n            StringMapWrapper.forEach(controlsConfig, function (controlConfig, controlName) {\n                controls[controlName] = _this._createControl(controlConfig);\n            });\n            return controls;\n        };\n        /** @internal */\n        FormBuilder.prototype._createControl = function (controlConfig) {\n            if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||\n                controlConfig instanceof FormArray) {\n                return controlConfig;\n            }\n            else if (isArray(controlConfig)) {\n                var value = controlConfig[0];\n                var validator = controlConfig.length > 1 ? controlConfig[1] : null;\n                var asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;\n                return this.control(value, validator, asyncValidator);\n            }\n            else {\n                return this.control(controlConfig);\n            }\n        };\n        FormBuilder.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        FormBuilder.ctorParameters = [];\n        return FormBuilder;\n    }());\n\n    var SHARED_FORM_DIRECTIVES = [\n        NgSelectOption, NgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor,\n        CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor,\n        RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator,\n        MinLengthValidator, MaxLengthValidator, PatternValidator\n    ];\n    var TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];\n    var REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];\n    /**\n     * Internal module used for sharing directives between FormsModule and ReactiveFormsModule\n     */\n    var InternalFormsSharedModule = (function () {\n        function InternalFormsSharedModule() {\n        }\n        InternalFormsSharedModule.decorators = [\n            { type: _angular_core.NgModule, args: [{ declarations: SHARED_FORM_DIRECTIVES, exports: SHARED_FORM_DIRECTIVES },] },\n        ];\n        /** @nocollapse */\n        InternalFormsSharedModule.ctorParameters = [];\n        return InternalFormsSharedModule;\n    }());\n\n    /**\n     * The ng module for forms.\n     * @stable\n     */\n    var FormsModule = (function () {\n        function FormsModule() {\n        }\n        FormsModule.decorators = [\n            { type: _angular_core.NgModule, args: [{\n                        declarations: TEMPLATE_DRIVEN_DIRECTIVES,\n                        providers: [RadioControlRegistry],\n                        exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]\n                    },] },\n        ];\n        /** @nocollapse */\n        FormsModule.ctorParameters = [];\n        return FormsModule;\n    }());\n    /**\n     * The ng module for reactive forms.\n     * @stable\n     */\n    var ReactiveFormsModule = (function () {\n        function ReactiveFormsModule() {\n        }\n        ReactiveFormsModule.decorators = [\n            { type: _angular_core.NgModule, args: [{\n                        declarations: [REACTIVE_DRIVEN_DIRECTIVES],\n                        providers: [FormBuilder, RadioControlRegistry],\n                        exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]\n                    },] },\n        ];\n        /** @nocollapse */\n        ReactiveFormsModule.ctorParameters = [];\n        return ReactiveFormsModule;\n    }());\n\n    exports.AbstractControlDirective = AbstractControlDirective;\n    exports.AbstractFormGroupDirective = AbstractFormGroupDirective;\n    exports.CheckboxControlValueAccessor = CheckboxControlValueAccessor;\n    exports.ControlContainer = ControlContainer;\n    exports.NG_VALUE_ACCESSOR = NG_VALUE_ACCESSOR;\n    exports.DefaultValueAccessor = DefaultValueAccessor;\n    exports.NgControl = NgControl;\n    exports.NgControlStatus = NgControlStatus;\n    exports.NgControlStatusGroup = NgControlStatusGroup;\n    exports.NgForm = NgForm;\n    exports.NgModel = NgModel;\n    exports.NgModelGroup = NgModelGroup;\n    exports.FormControlDirective = FormControlDirective;\n    exports.FormControlName = FormControlName;\n    exports.FormGroupDirective = FormGroupDirective;\n    exports.FormArrayName = FormArrayName;\n    exports.FormGroupName = FormGroupName;\n    exports.NgSelectOption = NgSelectOption;\n    exports.SelectControlValueAccessor = SelectControlValueAccessor;\n    exports.SelectMultipleControlValueAccessor = SelectMultipleControlValueAccessor;\n    exports.MaxLengthValidator = MaxLengthValidator;\n    exports.MinLengthValidator = MinLengthValidator;\n    exports.PatternValidator = PatternValidator;\n    exports.RequiredValidator = RequiredValidator;\n    exports.FormBuilder = FormBuilder;\n    exports.AbstractControl = AbstractControl;\n    exports.FormArray = FormArray;\n    exports.FormControl = FormControl;\n    exports.FormGroup = FormGroup;\n    exports.NG_ASYNC_VALIDATORS = NG_ASYNC_VALIDATORS;\n    exports.NG_VALIDATORS = NG_VALIDATORS;\n    exports.Validators = Validators;\n    exports.FormsModule = FormsModule;\n    exports.ReactiveFormsModule = ReactiveFormsModule;\n\n}));\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/@angular/forms/bundles/forms.umd.js\n ** module id = 386\n ** module chunks = 0\n **/","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n\tname: 'timestampFormat'\n})\n\nexport class TimestampFormat implements PipeTransform {\n\ttransform(value: any, args: string[]): any {\n\t\tif (value) {\n\t\t\tvar date = value instanceof Date ? value : new Date(value * 1000);\n\t\t\tvar formatted = this.strPad(\"00\", (date.getMonth() + 1), true) + '/' + this.strPad(\"00\", date.getDate(), true) + '/' + date.getFullYear() + ' - ' + this.strPad(\"00\", date.getHours(), true) + ':' + this.strPad(\"00\", date.getMinutes(), true) + ':' + this.strPad(\"00\", date.getSeconds(), true);\n\t\t\treturn formatted;\n\t\t}\n\t}\n\n\tstrPad(pad: string, str: string, padLeft: boolean) {\n\t\tif (typeof str === 'undefined') {\n\t\t\treturn pad;\n\t\t}\n\n\t\tif (padLeft) {\n\t\t\treturn (pad + str).slice(-pad.length);\n\t\t} else {\n\t\t\treturn (str + pad).substring(0, pad.length);\n\t\t}\n\t}\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./src/app/pipes/timestampFormat.ts\n **/","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nvar charts_1 = require('./components/charts/charts');\n__export(require('./components/charts/charts'));\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = {\n    directives: [\n        charts_1.CHART_DIRECTIVES\n    ]\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ng2-charts/ng2-charts.js\n ** module id = 388\n ** module chunks = 0\n **/","\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar core_1 = require('@angular/core');\nvar common_1 = require('@angular/common');\nvar BaseChartComponent = (function () {\n    function BaseChartComponent(element) {\n        this.labels = [];\n        this.options = { responsive: true };\n        this.chartClick = new core_1.EventEmitter();\n        this.chartHover = new core_1.EventEmitter();\n        this.initFlag = false;\n        this.element = element;\n    }\n    BaseChartComponent.prototype.ngOnInit = function () {\n        this.ctx = this.element.nativeElement.children[0].getContext('2d');\n        this.cvs = this.element.nativeElement.children[0];\n        this.parent = this.element.nativeElement;\n        this.initFlag = true;\n        if (this.data || this.datasets) {\n            this.refresh();\n        }\n    };\n    BaseChartComponent.prototype.ngOnChanges = function () {\n        if (this.initFlag) {\n            this.refresh();\n        }\n    };\n    BaseChartComponent.prototype.ngOnDestroy = function () {\n        if (this.chart) {\n            this.chart.destroy();\n            this.chart = void 0;\n        }\n    };\n    BaseChartComponent.prototype.getChartBuilder = function (ctx /*, data:Array<any>, options:any*/) {\n        var _this = this;\n        var datasets = void 0;\n        // in case if datasets is not provided, but data is present\n        if (!this.datasets || !this.datasets.length && (this.data && this.data.length)) {\n            if (Array.isArray(this.data[0])) {\n                datasets = this.data.map(function (data, index) {\n                    return { data: data, label: _this.labels[index] || \"Label \" + index };\n                });\n            }\n            else {\n                datasets = [{ data: this.data, label: \"Label 0\" }];\n            }\n        }\n        if (this.datasets && this.datasets.length ||\n            (datasets && datasets.length)) {\n            datasets = (this.datasets || datasets)\n                .map(function (elm, index) {\n                var newElm = Object.assign({}, elm);\n                if (_this.colors && _this.colors.length) {\n                    Object.assign(newElm, _this.colors[index]);\n                }\n                else {\n                    Object.assign(newElm, getColors(_this.chartType, index, newElm.data.length));\n                }\n                return newElm;\n            });\n        }\n        if (!datasets) {\n            throw new Error(\"ng-charts configuration error, \\n      data or datasets field are required to render char \" + this.chartType);\n        }\n        var options = Object.assign({}, this.options);\n        // hock for onHover and onClick events\n        options.hover = options.hover || {};\n        if (!options.hover.onHover) {\n            options.hover.onHover = function (active) {\n                if (active && !active.length) {\n                    return;\n                }\n                _this.chartHover.emit({ active: active });\n            };\n        }\n        if (!options.onClick) {\n            options.onClick = function (event, active) {\n                _this.chartClick.emit({ event: event, active: active });\n            };\n        }\n        var opts = {\n            type: this.chartType,\n            data: {\n                labels: this.labels,\n                datasets: datasets\n            },\n            options: options\n        };\n        if (typeof Chart === 'undefined') {\n            throw new Error('ng2-charts configuration issue: Embedding Chart.js lib is mandatory');\n        }\n        return new Chart(ctx, opts);\n    };\n    BaseChartComponent.prototype.refresh = function () {\n        var _this = this;\n        if (this.options && this.options.responsive && this.parent.clientHeight === 0) {\n            return setTimeout(function () { return _this.refresh(); }, 50);\n        }\n        // todo: remove this line, it is producing flickering\n        this.ngOnDestroy();\n        this.chart = this.getChartBuilder(this.ctx /*, data, this.options*/);\n    };\n    BaseChartComponent.defaultColors = [\n        [255, 99, 132],\n        [54, 162, 235],\n        [255, 206, 86],\n        [231, 233, 237],\n        [75, 192, 192],\n        [151, 187, 205],\n        [220, 220, 220],\n        [247, 70, 74],\n        [70, 191, 189],\n        [253, 180, 92],\n        [148, 159, 177],\n        [77, 83, 96]\n    ];\n    __decorate([\n        core_1.Input(), \n        __metadata('design:type', Object)\n    ], BaseChartComponent.prototype, \"data\", void 0);\n    __decorate([\n        core_1.Input(), \n        __metadata('design:type', Array)\n    ], BaseChartComponent.prototype, \"datasets\", void 0);\n    __decorate([\n        core_1.Input(), \n        __metadata('design:type', Array)\n    ], BaseChartComponent.prototype, \"labels\", void 0);\n    __decorate([\n        core_1.Input(), \n        __metadata('design:type', Object)\n    ], BaseChartComponent.prototype, \"options\", void 0);\n    __decorate([\n        core_1.Input(), \n        __metadata('design:type', String)\n    ], BaseChartComponent.prototype, \"chartType\", void 0);\n    __decorate([\n        core_1.Input(), \n        __metadata('design:type', Array)\n    ], BaseChartComponent.prototype, \"colors\", void 0);\n    __decorate([\n        core_1.Input(), \n        __metadata('design:type', Boolean)\n    ], BaseChartComponent.prototype, \"legend\", void 0);\n    __decorate([\n        core_1.Output(), \n        __metadata('design:type', core_1.EventEmitter)\n    ], BaseChartComponent.prototype, \"chartClick\", void 0);\n    __decorate([\n        core_1.Output(), \n        __metadata('design:type', core_1.EventEmitter)\n    ], BaseChartComponent.prototype, \"chartHover\", void 0);\n    BaseChartComponent = __decorate([\n        core_1.Component({\n            selector: 'base-chart',\n            template: \"<canvas style=\\\"width: 100%; height: 100%;\\\"></canvas>\",\n            directives: [common_1.CORE_DIRECTIVES, common_1.FORM_DIRECTIVES, common_1.NgClass]\n        }), \n        __metadata('design:paramtypes', [core_1.ElementRef])\n    ], BaseChartComponent);\n    return BaseChartComponent;\n}());\nexports.BaseChartComponent = BaseChartComponent;\nfunction rgba(colour, alpha) {\n    return 'rgba(' + colour.concat(alpha).join(',') + ')';\n}\nfunction getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\nfunction formatLineColor(colors) {\n    return {\n        backgroundColor: rgba(colors, 0.4),\n        borderColor: rgba(colors, 1),\n        pointBackgroundColor: rgba(colors, 1),\n        pointBorderColor: '#fff',\n        pointHoverBackgroundColor: '#fff',\n        pointHoverBorderColor: rgba(colors, 0.8)\n    };\n}\nfunction formatBarColor(colors) {\n    return {\n        backgroundColor: rgba(colors, 0.6),\n        borderColor: rgba(colors, 1),\n        hoverBackgroundColor: rgba(colors, 0.8),\n        hoverBorderColor: rgba(colors, 1)\n    };\n}\nfunction formatPieColors(colors) {\n    return {\n        backgroundColor: colors.map(function (color) { return rgba(color, 0.6); }),\n        borderColor: colors.map(function () { return '#fff'; }),\n        pointBackgroundColor: colors.map(function (color) { return rgba(color, 1); }),\n        pointBorderColor: colors.map(function () { return '#fff'; }),\n        pointHoverBackgroundColor: colors.map(function (color) { return rgba(color, 1); }),\n        pointHoverBorderColor: colors.map(function (color) { return rgba(color, 1); })\n    };\n}\nfunction formatPolarAreaColors(colors) {\n    return {\n        backgroundColor: colors.map(function (color) { return rgba(color, 0.6); }),\n        borderColor: colors.map(function (color) { return rgba(color, 1); }),\n        hoverBackgroundColor: colors.map(function (color) { return rgba(color, 0.8); }),\n        hoverBorderColor: colors.map(function (color) { return rgba(color, 1); })\n    };\n}\nfunction getRandomColor() {\n    return [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];\n}\n/**\n * Generate colors for line|bar charts\n * @param index\n * @returns {number[]|Color}\n */\nfunction generateColor(index) {\n    return BaseChartComponent.defaultColors[index] || getRandomColor();\n}\n/**\n * Generate colors for pie|doughnut charts\n * @param count\n * @returns {Colors}\n */\nfunction generateColors(count) {\n    var colorsArr = new Array(count);\n    for (var i = 0; i < count; i++) {\n        colorsArr[i] = BaseChartComponent.defaultColors[i] || getRandomColor();\n    }\n    return colorsArr;\n}\n/**\n * Generate colors by chart type\n * @param chartType\n * @param index\n * @param count\n * @returns {Color}\n */\nfunction getColors(chartType, index, count) {\n    if (chartType === 'pie' || chartType === 'doughnut') {\n        return formatPieColors(generateColors(count));\n    }\n    if (chartType === 'polarArea') {\n        return formatPolarAreaColors(generateColors(count));\n    }\n    if (chartType === 'line' || chartType === 'radar') {\n        return formatLineColor(generateColor(index));\n    }\n    if (chartType === 'bar') {\n        return formatBarColor(generateColor(index));\n    }\n    return generateColor(index);\n}\nexports.CHART_DIRECTIVES = [BaseChartComponent];\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ng2-charts/components/charts/charts.js\n ** module id = 389\n ** module chunks = 0\n **/","import {Component, OnInit, Input, Output, EventEmitter} from \"@angular/core\";\nimport {TaskService} from \"../services/TaskService\";\nimport {FormControl, FormGroup} from \"@angular/forms\";\nimport {TaskOption} from \"../domain/TaskOption\";\nimport {Utils} from \"../domain/Utils\";\n\n@Component({\n\tselector: 'task-options',\n\ttemplate: require('./task-options.component.html')\n})\n\nexport class TaskOptionsComponent implements OnInit {\n\n\t@Input()\n\tprivate projectId: string;\n\n\t@Input()\n\tprivate projectName: string;\n\n\t@Input()\n\tprivate taskId: string;\n\n\t@Input()\n\tprivate taskName: string;\n\n\t@Input()\n\tprivate taskDescription: string;\n\n\t@Input()\n\tprivate options: any;\n\n\tprivate form: FormGroup = new FormGroup({});\n\n\t@Output()\n\tprivate taskRunWithSuccess = new EventEmitter();\n\n\t@Output()\n\tprivate taskRunWithError = new EventEmitter();\n\n\t@Output()\n\tprivate taskRunCancel = new EventEmitter();\n\n\t@Input()\n\tprivate taskOptions: Array<TaskOption>;\n\n\tprivate showEmptyMessage: boolean;\n\n\tconstructor(private taskService: TaskService) {\n\n\t}\n\n\tngOnInit(): any {\n\t\tthis.load();\n\t}\n\n\tload() {\n\t\tlet controlList: any = {};\n\t\tthis.taskOptions = [];\n\n\t\tif (this.options != null) {\n\t\t\tthis.options.forEach((option: any) => {\n\t\t\t\tcontrolList[option[\"id\"]] = new FormControl(option[\"value\"]);\n\n\t\t\t\tthis.taskOptions.push(new TaskOption({\n\t\t\t\t\tid: option['id'],\n\t\t\t\t\ttype: option['type'],\n\t\t\t\t\tdescription: option['description'],\n\t\t\t\t\tvalue: option['value'],\n\t\t\t\t\tvalues: option['values']\n\t\t\t\t}));\n\t\t\t});\n\t\t} else {\n\t\t\tthis.showEmptyMessage = true;\n\t\t}\n\n\t\tthis.form = new FormGroup(controlList);\n\t}\n\n\trun() {\n\t\tlet formValues = this.form.value;\n\t\tlet formData = Utils.formValuesEncoded(formValues);\n\t\tformData += `&project=${this.projectId}&task=${this.taskId}`;\n\n\t\tthis.taskService.run(this.projectId, this.taskId, formData)\n\t\t\t.then(response => {\n\t\t\t\tif (response != null && response.success == true) {\n\t\t\t\t\ttoastr.success(\"Your task was added to queue with success!\");\n\t\t\t\t\tthis.taskRunWithSuccess.emit();\n\t\t\t\t} else {\n\t\t\t\t\ttoastr.error(response.data.errors[0][1]);\n\t\t\t\t\tthis.taskRunWithError.emit();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\ttoastr.error(error);\n\t\t\t\tthis.taskRunWithError.emit();\n\t\t\t});\n\t}\n\n\tcancel() {\n\t\tthis.taskRunCancel.emit();\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./src/app/task-options/task-options.component.ts\n **/","export class TaskOption {\n\n\tpublic id: string;\n\tpublic type: string;\n\tpublic description: string;\n\tpublic value: string;\n\tpublic values: any;\n\n\tconstructor(options: {} = {}) {\n\t\tthis.id = options[\"id\"] || '';\n\t\tthis.type = options[\"type\"] || '';\n\t\tthis.description = options[\"description\"] || '';\n\t\tthis.value = options[\"value\"] || '';\n\t\tthis.values = options[\"values\"] || '';\n\t}\n\n}\n\n\n/** WEBPACK FOOTER **\n ** ./~/angular2-template-loader!./src/app/domain/TaskOption.ts\n **/","module.exports = \"<div class=\\\"modal\\\" style=\\\"display: block\\\">\\n\\t<div class=\\\"modal-content\\\">\\n\\t\\t<div class=\\\"modal-body\\\">\\n\\n\\t\\t\\t<div style=\\\"padding: 12px 16px 2px 16px\\\">\\n\\t\\t\\t\\t<h4 style=\\\"width: 100%; text-align: right;\\\">RUN NOW</h4>\\n\\t\\t\\t\\t<div><strong>Project:</strong> {{projectName}}</div>\\n\\t\\t\\t\\t<div><strong>Task:</strong> {{taskName}}</div>\\n\\t\\t\\t\\t<div><strong>Description:</strong> {{taskDescription}}</div>\\n\\t\\t\\t</div>\\n\\n\\t\\t\\t<hr/>\\n\\n\\t\\t\\t<div *ngIf=\\\"showEmptyMessage\\\">\\n\\t\\t\\t\\t<h5 style=\\\"padding: 2px 16px; width: 100%; text-align: center;\\\">No options are required for this task, click on RUN button to start the task</h5>\\n\\t\\t\\t</div>\\n\\n\\t\\t\\t<form *ngIf=\\\"form\\\" (ngSubmit)=\\\"run()\\\" [formGroup]=\\\"form\\\" autocomplete=\\\"off\\\">\\n\\n\\t\\t\\t\\t<div *ngFor=\\\"let taskOption of taskOptions\\\" style=\\\"padding: 2px 16px;\\\">\\n\\n\\t\\t\\t\\t\\t<div [ngSwitch]=\\\"taskOption.type\\\">\\n\\n\\t\\t\\t\\t\\t\\t<div *ngSwitchCase=\\\"'text'\\\" class=\\\"form-group\\\">\\n\\t\\t\\t\\t\\t\\t\\t<label [attr.for]=\\\"taskOption.id\\\">{{taskOption.description}}</label>\\n\\t\\t\\t\\t\\t\\t\\t<input [formControlName]=\\\"taskOption.id\\\" [id]=\\\"taskOption.id\\\" type=\\\"text\\\" class=\\\"form-control\\\" autocomplete=\\\"off\\\">\\n\\t\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t\\t<div *ngSwitchCase=\\\"'password'\\\" class=\\\"form-group\\\">\\n\\t\\t\\t\\t\\t\\t\\t<label [attr.for]=\\\"taskOption.id\\\">{{taskOption.description}}</label>\\n\\t\\t\\t\\t\\t\\t\\t<input [formControlName]=\\\"taskOption.id\\\" [id]=\\\"taskOption.id\\\" type=\\\"password\\\" class=\\\"form-control\\\" autocomplete=\\\"off\\\">\\n\\t\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t\\t<div *ngSwitchCase=\\\"'hidden'\\\" class=\\\"form-group\\\">\\n\\t\\t\\t\\t\\t\\t\\t<input [formControlName]=\\\"taskOption.id\\\" [id]=\\\"taskOption.id\\\" type=\\\"hidden\\\" class=\\\"form-control\\\" autocomplete=\\\"off\\\">\\n\\t\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t\\t<div *ngSwitchCase=\\\"'select'\\\" class=\\\"form-group\\\">\\n\\t\\t\\t\\t\\t\\t\\t<label [attr.for]=\\\"taskOption.id\\\">{{taskOption.description}}</label>\\n\\n\\t\\t\\t\\t\\t\\t\\t<select [id]=\\\"taskOption.id\\\" [formControlName]=\\\"taskOption.id\\\" class=\\\"form-control\\\" autocomplete=\\\"off\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<option *ngFor=\\\"let selectOption of taskOption.values\\\" [value]=\\\"selectOption.value\\\">{{selectOption.text}}</option>\\n\\t\\t\\t\\t\\t\\t\\t</select>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t\\t<div *ngSwitchCase=\\\"'checkbox'\\\" class=\\\"checkbox\\\">\\n\\t\\t\\t\\t\\t\\t\\t<label [attr.for]=\\\"taskOption.id\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<input [formControlName]=\\\"taskOption.id\\\" [id]=\\\"taskOption.id\\\" type=\\\"checkbox\\\" autocomplete=\\\"off\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t{{taskOption.description}}\\n\\t\\t\\t\\t\\t\\t\\t</label>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t\\t<div *ngSwitchCase=\\\"'textarea'\\\" class=\\\"form-group\\\">\\n\\t\\t\\t\\t\\t\\t\\t<label [attr.for]=\\\"taskOption.id\\\">{{taskOption.description}}</label>\\n\\t\\t\\t\\t\\t\\t\\t<textarea [formControlName]=\\\"taskOption.id\\\" [id]=\\\"taskOption.id\\\" type=\\\"text\\\" class=\\\"form-control\\\" rows=\\\"5\\\" autocomplete=\\\"off\\\"></textarea>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t<hr/>\\n\\n\\t\\t\\t\\t<div style=\\\"text-align: right; padding: 12px 16px;\\\">\\n\\t\\t\\t\\t\\t<button type=\\\"button\\\" (click)=\\\"cancel()\\\" class=\\\"btn btn-default\\\">Cancel</button>\\n\\t\\t\\t\\t\\t<button type=\\\"submit\\\" class=\\\"btn btn-success\\\" style=\\\"margin-left: 10px\\\">Run</button>\\n\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t</form>\\n\\t\\t</div>\\n\\t</div>\\n</div>\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/app/task-options/task-options.component.html\n ** module id = 392\n ** module chunks = 0\n **/"],"sourceRoot":""}